var tipuesearch = {"pages":[{"text":"bspline-fortran Brief description The library provides subroutines for 1D-6D interpolation using B-splines. The code is written in modern Fortran (i.e., Fortran 2003+). License The bspline-fortran source code and related files and documentation are distributed under a permissive free software license (BSD-style). See also This library includes the public domain DBSPLIN and DTENSBS code from the NIST Core Math Library (CMLIB). Keywords Bspline, spline, interpolation, data fitting, multivariate interpolation, multidimensional interpolation Developer Info Jacob Williams","tags":"","loc":"index.html","title":" bspline-fortran "},{"text":"Files Dependent On This One sourcefile~~bspline_sub_module.f90~~AfferentGraph sourcefile~bspline_sub_module.f90 bspline_sub_module.f90 sourcefile~bspline_oo_module.f90 bspline_oo_module.f90 sourcefile~bspline_sub_module.f90->sourcefile~bspline_oo_module.f90 sourcefile~bspline_module.f90 bspline_module.f90 sourcefile~bspline_sub_module.f90->sourcefile~bspline_module.f90 sourcefile~bspline_oo_module.f90->sourcefile~bspline_module.f90 sourcefile~test_regrid.f90 test_regrid.f90 sourcefile~bspline_module.f90->sourcefile~test_regrid.f90 sourcefile~speed_test_oo.f90 speed_test_oo.f90 sourcefile~bspline_module.f90->sourcefile~speed_test_oo.f90 sourcefile~test.f90 test.f90 sourcefile~bspline_module.f90->sourcefile~test.f90 sourcefile~test_integrate.f90 test_integrate.f90 sourcefile~bspline_module.f90->sourcefile~test_integrate.f90 sourcefile~speed_test.f90 speed_test.f90 sourcefile~bspline_module.f90->sourcefile~speed_test.f90 sourcefile~bspline_extrap_test.f90 bspline_extrap_test.f90 sourcefile~bspline_module.f90->sourcefile~bspline_extrap_test.f90 sourcefile~test_oo.f90 test_oo.f90 sourcefile~bspline_module.f90->sourcefile~test_oo.f90 sourcefile~knot_tests.f90 knot_tests.f90 sourcefile~bspline_module.f90->sourcefile~knot_tests.f90 Help Ã— Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which depends upon it. A file \n    is dependent upon another if the latter must be compiled before the former\n    can be. Modules bspline_sub_module Source Code bspline_sub_module.f90 Source Code !***************************************************************************************** !> author: Jacob Williams !  license: BSD ! !### Description ! !  Multidimensional (1D-6D) B-spline interpolation of data on a regular grid. !  Basic pure subroutine interface. ! !### Notes ! !  This module is based on the B-spline and spline routines from [1]. !  The original Fortran 77 routines were converted to free-form source. !  Some of them are relatively unchanged from the originals, but some have !  been extensively refactored. In addition, new routines for !  1d, 4d, 5d, and 6d interpolation were also created (these are simply !  extensions of the same algorithm into higher dimensions). ! !### See also !  * An object-oriented interface can be found in [[bspline_oo_module]]. ! !### References ! !  1. DBSPLIN and DTENSBS from the !     [NIST Core Math Library](http://www.nist.gov/itl/math/mcsd-software.cfm). !     Original code is public domain. !  2. Carl de Boor, \"A Practical Guide to Splines\", !     Springer-Verlag, New York, 1978. !  3. Carl de Boor, [Efficient Computer Manipulation of Tensor !     Products](http://dl.acm.org/citation.cfm?id=355831), !     ACM Transactions on Mathematical Software, !     Vol. 5 (1979), p. 173-182. !  4. D.E. Amos, \"Computation with Splines and B-Splines\", !     SAND78-1968, Sandia Laboratories, March, 1979. !  5. Carl de Boor, !     [Package for calculating with B-splines](http://epubs.siam.org/doi/abs/10.1137/0714026), !     SIAM Journal on Numerical Analysis 14, 3 (June 1977), p. 441-472. !  6. D.E. Amos, \"Quadrature subroutines for splines and B-splines\", !     Report SAND79-1825, Sandia Laboratories, December 1979. module bspline_sub_module use , intrinsic :: iso_fortran_env , only : real64 use , intrinsic :: iso_fortran_env , only : error_unit implicit none private integer , parameter :: wp = real64 !! Real precision abstract interface function b1fqad_func ( x ) result ( f ) !! interface for the input function in [[dbfqad]] import :: wp implicit none real ( wp ), intent ( in ) :: x real ( wp ) :: f !! f(x) end function b1fqad_func end interface public :: b1fqad_func !Spline function order (order = polynomial degree + 1) integer , parameter , public :: bspline_order_quadratic = 3 integer , parameter , public :: bspline_order_cubic = 4 integer , parameter , public :: bspline_order_quartic = 5 integer , parameter , public :: bspline_order_quintic = 6 !main routines: public :: db1ink , db1val , db1sqad , db1fqad public :: db2ink , db2val public :: db3ink , db3val public :: db4ink , db4val public :: db5ink , db5val public :: db6ink , db6val public :: get_status_message contains !***************************************************************************************** !***************************************************************************************** !> !  Determines the parameters of a function that interpolates !  the one-dimensional gridded data !   [x(i),\\mathrm{fcn}(i)] ~\\mathrm{for}~ i=1,..,n_x  !  The interpolating function and its derivatives may !  subsequently be evaluated by the function [[db1val]]. ! !### History !  * Jacob Williams, 10/30/2015 : Created 1D routine. pure subroutine db1ink ( x , nx , fcn , kx , iknot , tx , bcoef , iflag ) implicit none integer , intent ( in ) :: nx !! Number of x abcissae integer , intent ( in ) :: kx !! The order of spline pieces in x !! (  2 \\le k_x < n_x  ) !! (order = polynomial degree + 1) real ( wp ), dimension (:), intent ( in ) :: x !! `(nx)` array of x abcissae. Must be strictly increasing. real ( wp ), dimension (:), intent ( in ) :: fcn !! `(nx)` array of function values to interpolate. `fcn(i)` should !! contain the function value at the point `x(i)` integer , intent ( in ) :: iknot !! knot sequence flag: !! !! * 0 = knot sequence chosen by [[db1ink]]. !! * 1 = knot sequence chosen by user. real ( wp ), dimension (:), intent ( inout ) :: tx !! The `(nx+kx)` knots in the x direction !! for the spline interpolant: !! !! * If `iknot=0` these are chosen by [[db1ink]]. !! * If `iknot=1` these are specified by the user. !! !! Must be non-decreasing. real ( wp ), dimension (:), intent ( out ) :: bcoef !! `(nx)` array of coefficients of the b-spline interpolant. integer , intent ( out ) :: iflag !! status flag: !! !! * 0 = successful execution. !! * 2 = `iknot` out of range. !! * 3 = `nx` out of range. !! * 4 = `kx` out of range. !! * 5 = `x` not strictly increasing. !! * 6 = `tx` not non-decreasing. !! * 700 = `size(x)`  \\ne  `size(fcn,1)`. !! * 706 = `size(x)`  \\ne  `nx`. !! * 712 = `size(tx)`  \\ne  `nx+kx`. !! * 800 = `size(x)`  \\ne  `size(bcoef,1)`. real ( wp ), dimension ( 2 * kx * ( nx + 1 )) :: work logical :: status_ok !check validity of inputs call check_inputs ( 'db1ink' ,& iknot ,& iflag ,& nx = nx ,& kx = kx ,& x = x ,& f1 = fcn ,& bcoef1 = bcoef ,& tx = tx ,& status_ok = status_ok ) if ( status_ok ) then !choose knots if ( iknot == 0 ) then call dbknot ( x , nx , kx , tx ) end if !construct b-spline coefficients call dbtpcf ( x , nx , fcn , nx , 1 , tx , kx , bcoef , work , iflag ) end if end subroutine db1ink !***************************************************************************************** !***************************************************************************************** !> !  Evaluates the tensor product piecewise polynomial !  interpolant constructed by the routine [[db1ink]] or one of its !  derivatives at the point `xval`. ! !  To evaluate the interpolant itself, set `idx=0`, !  to evaluate the first partial with respect to `x`, set `idx=1`, and so on. ! !  [[db1val]] returns 0.0 if (`xval`,`yval`) is out of range. that is, if !```fortran !   xval < tx(1) .or. xval > tx(nx+kx) !``` !  if the knots `tx` were chosen by [[db1ink]], then this is equivalent to: !```fortran !   xval < x(1) .or. xval > x(nx)+epsx !``` !  where !```fortran !   epsx = 0.1*(x(nx)-x(nx-1)) !``` ! !  The input quantities `tx`, `nx`, `kx`, and `bcoef` should be !  unchanged since the last call of [[db1ink]]. ! !### History !  * Jacob Williams, 10/30/2015 : Created 1D routine. pure subroutine db1val ( xval , idx , tx , nx , kx , bcoef , f , iflag , inbvx , extrap ) implicit none integer , intent ( in ) :: idx !! x derivative of piecewise polynomial to evaluate. integer , intent ( in ) :: nx !! the number of interpolation points in x. !! (same as in last call to [[db1ink]]) integer , intent ( in ) :: kx !! order of polynomial pieces in x. !! (same as in last call to [[db1ink]]) real ( wp ), intent ( in ) :: xval !! x coordinate of evaluation point. real ( wp ), dimension ( nx + kx ), intent ( in ) :: tx !! sequence of knots defining the piecewise polynomial !! in the x direction. (same as in last call to [[db1ink]]) real ( wp ), dimension ( nx ), intent ( in ) :: bcoef !! the b-spline coefficients computed by [[db1ink]]. real ( wp ), intent ( out ) :: f !! interpolated value integer , intent ( out ) :: iflag !! status flag: !! !! *  = 0    : no errors !! *  \\ne 0  : error integer , intent ( inout ) :: inbvx !! initialization parameter which must be set !! to 1 the first time this routine is called, !! and must not be changed by the user. logical , intent ( in ), optional :: extrap !! if extrapolation is allowed !! (if not present, default is False) real ( wp ), dimension ( 3 * kx ) :: work f = 0.0_wp iflag = check_value ( xval , tx , 1 , extrap ); if ( iflag /= 0 ) return call dbvalu ( tx , bcoef , nx , kx , idx , xval , inbvx , work , iflag , f , extrap ) end subroutine db1val !***************************************************************************************** !***************************************************************************************** !> !  Computes the integral on `(x1,x2)` of a `kx`-th order b-spline. !  Orders `kx` as high as 20 are permitted by applying a 2, 6, or 10 !  point gauss formula on subintervals of `(x1,x2)` which are !  formed by included (distinct) knots. ! !### See also !  * [[dbsqad]] -- the core routine. pure subroutine db1sqad ( tx , bcoef , nx , kx , x1 , x2 , f , iflag ) implicit none integer , intent ( in ) :: nx !! length of coefficient array integer , intent ( in ) :: kx !! order of b-spline, `1 <= k <= 20` real ( wp ), dimension ( nx + kx ), intent ( in ) :: tx !! knot array real ( wp ), dimension ( nx ), intent ( in ) :: bcoef !! b-spline coefficient array real ( wp ), intent ( in ) :: x1 !! left point of quadrature interval in `t(kx) <= x <= t(nx+1)` real ( wp ), intent ( in ) :: x2 !! right point of quadrature interval in `t(kx) <= x <= t(nx+1)` real ( wp ), intent ( out ) :: f !! integral of the b-spline over (`x1`,`x2`) integer , intent ( out ) :: iflag !! status flag: !! !! *  = 0    : no errors !! *  \\ne 0  : error real ( wp ), dimension ( 3 * kx ) :: work !! work array for [[dbsqad]] call dbsqad ( tx , bcoef , nx , kx , x1 , x2 , f , work , iflag ) end subroutine db1sqad !***************************************************************************************** !***************************************************************************************** !> !  Computes the integral on `(x1,x2)` of a product of a !  function `fun` and the `idx`-th derivative of a `kx`-th order b-spline, !  using the b-representation `(tx,bcoef,nx,kx)`, with an adaptive !  8-point Legendre-Gauss algorithm. !  `(x1,x2)` must be a subinterval of `t(kx) <= x <= t(nx+1)`. ! !### See also !  * [[dbfqad]] -- the core routine. ! !@note This one is not pure, because we are not enforcing !      that the user function `fun` be pure. subroutine db1fqad ( fun , tx , bcoef , nx , kx , idx , x1 , x2 , tol , f , iflag ) implicit none procedure ( b1fqad_func ) :: fun !! external function of one argument for the !! integrand `bf(x)=fun(x)*dbvalu(tx,bcoef,nx,kx,id,x,inbv,work)` integer , intent ( in ) :: nx !! length of coefficient array integer , intent ( in ) :: kx !! order of b-spline, `kx >= 1` real ( wp ), dimension ( nx + kx ), intent ( in ) :: tx !! knot array real ( wp ), dimension ( nx ), intent ( in ) :: bcoef !! b-spline coefficient array integer , intent ( in ) :: idx !! order of the spline derivative, `0 <= idx <= k-1` !! `idx=0` gives the spline function real ( wp ), intent ( in ) :: x1 !! left point of quadrature interval in `t(k) <= x <= t(n+1)` real ( wp ), intent ( in ) :: x2 !! right point of quadrature interval in `t(k) <= x <= t(n+1)` real ( wp ), intent ( in ) :: tol !! desired accuracy for the quadrature, suggest !! `10*dtol < tol <= 0.1` where `dtol` is the maximum !! of `1.0e-18` and real(wp) unit roundoff for !! the machine real ( wp ), intent ( out ) :: f !! integral of `bf(x)` on `(x1,x2)` integer , intent ( out ) :: iflag !! status flag: !! !! *  = 0    : no errors !! *  \\ne 0  : error real ( wp ), dimension ( 3 * kx ) :: work !! work array for [[dbfqad]] call dbfqad ( fun , tx , bcoef , nx , kx , idx , x1 , x2 , tol , f , iflag , work ) end subroutine db1fqad !***************************************************************************************** !***************************************************************************************** !> !  Determines the parameters of a function that interpolates !  the two-dimensional gridded data !   [x(i),y(j),\\mathrm{fcn}(i,j)] ~\\mathrm{for}~ i=1,..,n_x ~\\mathrm{and}~ j=1,..,n_y  !  The interpolating function and its derivatives may !  subsequently be evaluated by the function [[db2val]]. ! !  The interpolating function is a piecewise polynomial function !  represented as a tensor product of one-dimensional b-splines. the !  form of this function is ! !   s(x,y) = \\sum_{i=1}&#94;{n_x} \\sum_{j=1}&#94;{n_y} a_{ij} u_i(x) v_j(y)  ! !  where the functions u_i and v_j are one-dimensional b-spline !  basis functions. the coefficients  a_{ij}  are chosen so that ! !   s(x(i),y(j)) = \\mathrm{fcn}(i,j) ~\\mathrm{for}~ i=1,..,n_x ~\\mathrm{and}~ j=1,..,n_y  ! !  Note that for each fixed value of y,  s(x,y)  is a piecewise !  polynomial function of x alone, and for each fixed value of x,  s(x,y)  !  is a piecewise polynomial function of y alone. in one dimension !  a piecewise polynomial may be created by partitioning a given !  interval into subintervals and defining a distinct polynomial piece !  on each one. the points where adjacent subintervals meet are called !  knots. each of the functions u_i and v_j above is a piecewise !  polynomial. ! !  Users of [[db2ink]] choose the order (degree+1) of the polynomial !  pieces used to define the piecewise polynomial in each of the x and !  y directions (`kx` and `ky`). users also may define their own knot !  sequence in x and y separately (`tx` and `ty`). if `iflag=0`, however, !  [[db2ink]] will choose sequences of knots that result in a piecewise !  polynomial interpolant with `kx-2` continuous partial derivatives in !  x and `ky-2` continuous partial derivatives in y. (`kx` knots are taken !  near each endpoint in the x direction, not-a-knot end conditions !  are used, and the remaining knots are placed at data points if `kx` !  is even or at midpoints between data points if `kx` is odd. the y !  direction is treated similarly.) ! !  After a call to [[db2ink]], all information necessary to define the !  interpolating function are contained in the parameters `nx`, `ny`, `kx`, !  `ky`, `tx`, `ty`, and `bcoef`. These quantities should not be altered until !  after the last call of the evaluation routine [[db2val]]. ! !### History !  * Boisvert, Ronald, NBS : 25 may 1982 : Author of original routine. !  * JEC : 000330 modified array declarations. !  * Jacob Williams, 2/24/2015 : extensive refactoring of CMLIB routine. pure subroutine db2ink ( x , nx , y , ny , fcn , kx , ky , iknot , tx , ty , bcoef , iflag ) implicit none integer , intent ( in ) :: nx !! Number of x abcissae integer , intent ( in ) :: ny !! Number of y abcissae integer , intent ( in ) :: kx !! The order of spline pieces in x !! (  2 \\le k_x < n_x  ) !! (order = polynomial degree + 1) integer , intent ( in ) :: ky !! The order of spline pieces in y !! (  2 \\le k_y < n_y  ) !! (order = polynomial degree + 1) real ( wp ), dimension (:), intent ( in ) :: x !! `(nx)` array of x abcissae. Must be strictly increasing. real ( wp ), dimension (:), intent ( in ) :: y !! `(ny)` array of y abcissae. Must be strictly increasing. real ( wp ), dimension (:,:), intent ( in ) :: fcn !! `(nx,ny)` matrix of function values to interpolate. !! `fcn(i,j)` should contain the function value at the !! point (`x(i)`,`y(j)`) integer , intent ( in ) :: iknot !! knot sequence flag: !! !! * 0 = knot sequence chosen by [[db1ink]]. !! * 1 = knot sequence chosen by user. real ( wp ), dimension (:), intent ( inout ) :: tx !! The `(nx+kx)` knots in the x direction for the spline interpolant. !! !! * If `iknot=0` these are chosen by [[db2ink]]. !! * If `iknot=1` these are specified by the user. !! !! Must be non-decreasing. real ( wp ), dimension (:), intent ( inout ) :: ty !! The `(ny+ky)` knots in the y direction for the spline interpolant. !! !! * If `iknot=0` these are chosen by [[db2ink]]. !! * If `iknot=1` these are specified by the user. !! !! Must be non-decreasing. real ( wp ), dimension (:,:), intent ( out ) :: bcoef !! `(nx,ny)` matrix of coefficients of the b-spline interpolant. integer , intent ( out ) :: iflag !! *  0 = successful execution. !! *  2 = `iknot` out of range. !! *  3 = `nx` out of range. !! *  4 = `kx` out of range. !! *  5 = `x` not strictly increasing. !! *  6 = `tx` not non-decreasing. !! *  7 = `ny` out of range. !! *  8 = `ky` out of range. !! *  9 = `y` not strictly increasing. !! * 10 = `ty` not non-decreasing. !! * 700 = `size(x)`   \\ne  `size(fcn,1)` !! * 701 = `size(y)`   \\ne  `size(fcn,2)` !! * 706 = `size(x)`   \\ne  `nx` !! * 707 = `size(y)`   \\ne  `ny` !! * 712 = `size(tx)`  \\ne  `nx+kx` !! * 713 = `size(ty)`  \\ne  `ny+ky` !! * 800 = `size(x)`   \\ne  `size(bcoef,1)` !! * 801 = `size(y)`   \\ne  `size(bcoef,2)` real ( wp ), dimension ( nx * ny ) :: temp real ( wp ), dimension ( max ( 2 * kx * ( nx + 1 ), 2 * ky * ( ny + 1 ))) :: work logical :: status_ok !check validity of inputs call check_inputs ( 'db2ink' ,& iknot ,& iflag ,& nx = nx , ny = ny ,& kx = kx , ky = ky ,& x = x , y = y ,& tx = tx , ty = ty ,& f2 = fcn ,& bcoef2 = bcoef ,& status_ok = status_ok ) if ( status_ok ) then !choose knots if ( iknot == 0 ) then call dbknot ( x , nx , kx , tx ) call dbknot ( y , ny , ky , ty ) end if !construct b-spline coefficients call dbtpcf ( x , nx , fcn , nx , ny , tx , kx , temp , work , iflag ) if ( iflag == 0 ) call dbtpcf ( y , ny , temp , ny , nx , ty , ky , bcoef , work , iflag ) end if end subroutine db2ink !***************************************************************************************** !***************************************************************************************** !> !  Evaluates the tensor product piecewise polynomial !  interpolant constructed by the routine [[db2ink]] or one of its !  derivatives at the point (`xval`,`yval`). ! !  To evaluate the interpolant !  itself, set `idx=idy=0`, to evaluate the first partial with respect !  to `x`, set `idx=1,idy=0`, and so on. ! !  [[db2val]] returns 0.0 if `(xval,yval)` is out of range. that is, if !```fortran !   xval < tx(1) .or. xval > tx(nx+kx) .or. !   yval < ty(1) .or. yval > ty(ny+ky) !``` !  if the knots tx and ty were chosen by [[db2ink]], then this is equivalent to: !```fortran !   xval < x(1) .or. xval > x(nx)+epsx .or. !   yval < y(1) .or. yval > y(ny)+epsy !``` !  where !```fortran !   epsx = 0.1*(x(nx)-x(nx-1)) !   epsy = 0.1*(y(ny)-y(ny-1)) !``` ! !  The input quantities `tx`, `ty`, `nx`, `ny`, `kx`, `ky`, and `bcoef` should be !  unchanged since the last call of [[db2ink]]. ! !### History !  * Boisvert, Ronald, NBS : 25 may 1982 : Author of original routine. !  * JEC : 000330 modified array declarations. !  * Jacob Williams, 2/24/2015 : extensive refactoring of CMLIB routine. pure subroutine db2val ( xval , yval , idx , idy , tx , ty , nx , ny , kx , ky , bcoef , f , iflag , inbvx , inbvy , iloy , extrap ) implicit none integer , intent ( in ) :: idx !! x derivative of piecewise polynomial to evaluate. integer , intent ( in ) :: idy !! y derivative of piecewise polynomial to evaluate. integer , intent ( in ) :: nx !! the number of interpolation points in x. !! (same as in last call to [[db2ink]]) integer , intent ( in ) :: ny !! the number of interpolation points in y. !! (same as in last call to [[db2ink]]) integer , intent ( in ) :: kx !! order of polynomial pieces in x. !! (same as in last call to [[db2ink]]) integer , intent ( in ) :: ky !! order of polynomial pieces in y. !! (same as in last call to [[db2ink]]) real ( wp ), intent ( in ) :: xval !! x coordinate of evaluation point. real ( wp ), intent ( in ) :: yval !! y coordinate of evaluation point. real ( wp ), dimension ( nx + kx ), intent ( in ) :: tx !! sequence of knots defining the piecewise polynomial !! in the x direction. !! (same as in last call to [[db2ink]]) real ( wp ), dimension ( ny + ky ), intent ( in ) :: ty !! sequence of knots defining the piecewise !! polynomial in the y direction. !! (same as in last call to [[db2ink]]) real ( wp ), dimension ( nx , ny ), intent ( in ) :: bcoef !! the b-spline coefficients computed by [[db2ink]]. real ( wp ), intent ( out ) :: f !! interpolated value integer , intent ( out ) :: iflag !! status flag: !! !! *  = 0    : no errors !! *  \\ne 0  : error integer , intent ( inout ) :: inbvx !! initialization parameter which must be set to 1 !! the first time this routine is called, !! and must not be changed by the user. integer , intent ( inout ) :: inbvy !! initialization parameter which must be set to 1 !! the first time this routine is called, !! and must not be changed by the user. integer , intent ( inout ) :: iloy !! initialization parameter which must be set to 1 !! the first time this routine is called, !! and must not be changed by the user. logical , intent ( in ), optional :: extrap !! if extrapolation is allowed !! (if not present, default is False) integer :: k , lefty , mflag , kcol real ( wp ), dimension ( ky ) :: temp real ( wp ), dimension ( 3 * max ( kx , ky )) :: work f = 0.0_wp iflag = check_value ( xval , tx , 1 , extrap ); if ( iflag /= 0 ) return iflag = check_value ( yval , ty , 2 , extrap ); if ( iflag /= 0 ) return iflag = - 1 call dintrv ( ty , ny + ky , yval , iloy , lefty , mflag , extrap ); if ( mflag /= 0 ) return kcol = lefty - ky do k = 1 , ky kcol = kcol + 1 call dbvalu ( tx , bcoef (:, kcol ), nx , kx , idx , xval , inbvx , work , iflag , temp ( k ), extrap ) if ( iflag /= 0 ) return !error end do kcol = lefty - ky + 1 call dbvalu ( ty ( kcol :), temp , ky , ky , idy , yval , inbvy , work , iflag , f , extrap ) end subroutine db2val !***************************************************************************************** !***************************************************************************************** !> !  Determines the parameters of a function that interpolates !  the three-dimensional gridded data !   [x(i),y(j),z(k),\\mathrm{fcn}(i,j,k)] ~\\mathrm{for}~ !     i=1,..,n_x ~\\mathrm{and}~ j=1,..,n_y, ~\\mathrm{and}~ k=1,..,n_z  !  The interpolating function and !  its derivatives may subsequently be evaluated by the function !  [[db3val]]. ! !  The interpolating function is a piecewise polynomial function !  represented as a tensor product of one-dimensional b-splines. the !  form of this function is !   s(x,y,z) = \\sum_{i=1}&#94;{n_x} \\sum_{j=1}&#94;{n_y} \\sum_{k=1}&#94;{n_z} !                a_{ijk} u_i(x) v_j(y) w_k(z)  ! !  where the functions u_i, v_j, and w_k are one-dimensional b- !  spline basis functions. the coefficients a_{ijk} are chosen so that: ! !   s(x(i),y(j),z(k)) = \\mathrm{fcn}(i,j,k) !     ~\\mathrm{for}~ i=1,..,n_x , j=1,..,n_y , k=1,..,n_z  ! !  Note that for fixed values of y and z s(x,y,z) is a piecewise !  polynomial function of x alone, for fixed values of x and z s(x,y,z) !  is a piecewise polynomial function of y alone, and for fixed !  values of x and y s(x,y,z) is a function of z alone. in one !  dimension a piecewise polynomial may be created by partitioning a !  given interval into subintervals and defining a distinct polynomial !  piece on each one. the points where adjacent subintervals meet are !  called knots. each of the functions u_i, v_j, and w_k above is a !  piecewise polynomial. ! !  Users of [[db3ink]] choose the order (degree+1) of the polynomial !  pieces used to define the piecewise polynomial in each of the x, y, !  and z directions (`kx`, `ky`, and `kz`). users also may define their own !  knot sequence in x, y, z separately (`tx`, `ty`, and `tz`). if `iflag=0`, !  however, [[db3ink]] will choose sequences of knots that result in a !  piecewise polynomial interpolant with `kx-2` continuous partial !  derivatives in x, `ky-2` continuous partial derivatives in y, and `kz-2` !  continuous partial derivatives in z. (`kx` knots are taken near !  each endpoint in x, not-a-knot end conditions are used, and the !  remaining knots are placed at data points if `kx` is even or at !  midpoints between data points if `kx` is odd. the y and z directions !  are treated similarly.) ! !  After a call to [[db3ink]], all information necessary to define the !  interpolating function are contained in the parameters `nx`, `ny`, `nz`, !  `kx`, `ky`, `kz`, `tx`, `ty`, `tz`, and `bcoef`. these quantities should not be !  altered until after the last call of the evaluation routine [[db3val]]. ! !### History !  * Boisvert, Ronald, NBS : 25 may 1982 : Author of original routine. !  * JEC : 000330 modified array declarations. !  * Jacob Williams, 2/24/2015 : extensive refactoring of CMLIB routine. pure subroutine db3ink ( x , nx , y , ny , z , nz , fcn , kx , ky , kz , iknot , tx , ty , tz , bcoef , iflag ) implicit none integer , intent ( in ) :: nx !! number of x abcissae (  \\ge 3  ) integer , intent ( in ) :: ny !! number of y abcissae (  \\ge 3  ) integer , intent ( in ) :: nz !! number of z abcissae (  \\ge 3  ) integer , intent ( in ) :: kx !! The order of spline pieces in x !! (  2 \\le k_x < n_x  ) !! (order = polynomial degree + 1) integer , intent ( in ) :: ky !! The order of spline pieces in y !! (  2 \\le k_y < n_y  ) !! (order = polynomial degree + 1) integer , intent ( in ) :: kz !! the order of spline pieces in z !! (  2 \\le k_z < n_z  ) !! (order = polynomial degree + 1) real ( wp ), dimension (:), intent ( in ) :: x !! `(nx)` array of x abcissae. must be strictly increasing. real ( wp ), dimension (:), intent ( in ) :: y !! `(ny)` array of y abcissae. must be strictly increasing. real ( wp ), dimension (:), intent ( in ) :: z !! `(nz)` array of z abcissae. must be strictly increasing. real ( wp ), dimension (:,:,:), intent ( in ) :: fcn !! `(nx,ny,nz)` matrix of function values to interpolate. `fcn(i,j,k)` should !! contain the function value at the point (`x(i)`,`y(j)`,`z(k)`) integer , intent ( in ) :: iknot !! knot sequence flag: !! !! * 0 = knot sequence chosen by [[db3ink]]. !! * 1 = knot sequence chosen by user. real ( wp ), dimension (:), intent ( inout ) :: tx !! The `(nx+kx)` knots in the x direction for the spline interpolant. !! !! * If `iknot=0` these are chosen by [[db3ink]]. !! * If `iknot=1` these are specified by the user. !! !! Must be non-decreasing. real ( wp ), dimension (:), intent ( inout ) :: ty !! The `(ny+ky)` knots in the y direction for the spline interpolant. !! !! * If `iknot=0` these are chosen by [[db3ink]]. !! * If `iknot=1` these are specified by the user. !! !! Must be non-decreasing. real ( wp ), dimension (:), intent ( inout ) :: tz !! The `(nz+kz)` knots in the z direction for the spline interpolant. !! !! * If `iknot=0` these are chosen by [[db3ink]]. !! * If `iknot=1` these are specified by the user. !! !! Must be non-decreasing. real ( wp ), dimension (:,:,:), intent ( out ) :: bcoef !! `(nx,ny,nz)` matrix of coefficients of the b-spline interpolant. integer , intent ( out ) :: iflag !! *  0 = successful execution. !! *  2 = `iknot` out of range. !! *  3 = `nx` out of range. !! *  4 = `kx` out of range. !! *  5 = `x` not strictly increasing. !! *  6 = `tx` not non-decreasing. !! *  7 = `ny` out of range. !! *  8 = `ky` out of range. !! *  9 = `y` not strictly increasing. !! * 10 = `ty` not non-decreasing. !! * 11 = `nz` out of range. !! * 12 = `kz` out of range. !! * 13 = `z` not strictly increasing. !! * 14 = `ty` not non-decreasing. !! * 700 = `size(x) ` \\ne `size(fcn,1)` !! * 701 = `size(y) ` \\ne `size(fcn,2)` !! * 702 = `size(z) ` \\ne `size(fcn,3)` !! * 706 = `size(x) ` \\ne `nx` !! * 707 = `size(y) ` \\ne `ny` !! * 708 = `size(z) ` \\ne `nz` !! * 712 = `size(tx)` \\ne `nx+kx` !! * 713 = `size(ty)` \\ne `ny+ky` !! * 714 = `size(tz)` \\ne `nz+kz` !! * 800 = `size(x) ` \\ne `size(bcoef,1)` !! * 801 = `size(y) ` \\ne `size(bcoef,2)` !! * 802 = `size(z) ` \\ne `size(bcoef,3)` real ( wp ), dimension ( nx * ny * nz ) :: temp real ( wp ), dimension ( max ( 2 * kx * ( nx + 1 ), 2 * ky * ( ny + 1 ), 2 * kz * ( nz + 1 ))) :: work logical :: status_ok ! check validity of input call check_inputs ( 'db3ink' ,& iknot ,& iflag ,& nx = nx , ny = ny , nz = nz ,& kx = kx , ky = ky , kz = kz ,& x = x , y = y , z = z ,& tx = tx , ty = ty , tz = tz ,& f3 = fcn ,& bcoef3 = bcoef ,& status_ok = status_ok ) if ( status_ok ) then ! choose knots if ( iknot == 0 ) then call dbknot ( x , nx , kx , tx ) call dbknot ( y , ny , ky , ty ) call dbknot ( z , nz , kz , tz ) end if ! copy fcn to work in packed for dbtpcf temp ( 1 : nx * ny * nz ) = reshape ( fcn , [ nx * ny * nz ] ) ! construct b-spline coefficients call dbtpcf ( x , nx , temp , nx , ny * nz , tx , kx , bcoef , work , iflag ) if ( iflag == 0 ) call dbtpcf ( y , ny , bcoef , ny , nx * nz , ty , ky , temp , work , iflag ) if ( iflag == 0 ) call dbtpcf ( z , nz , temp , nz , nx * ny , tz , kz , bcoef , work , iflag ) end if end subroutine db3ink !***************************************************************************************** !***************************************************************************************** !> !  Evaluates the tensor product piecewise polynomial !  interpolant constructed by the routine [[db3ink]] or one of its !  derivatives at the point (`xval`,`yval`,`zval`). ! !  To evaluate the !  interpolant itself, set `idx=idy=idz=0`, to evaluate the first !  partial with respect to `x`, set `idx=1`,`idy=idz=0`, and so on. ! !  [[db3val]] returns 0.0 if (`xval`,`yval`,`zval`) is out of range. that is, !```fortran ! xval<tx(1) .or. xval>tx(nx+kx) .or. ! yval<ty(1) .or. yval>ty(ny+ky) .or. ! zval<tz(1) .or. zval>tz(nz+kz) !``` !  if the knots `tx`, `ty`, and `tz` were chosen by [[db3ink]], then this is !  equivalent to !```fortran ! xval<x(1) .or. xval>x(nx)+epsx .or. ! yval<y(1) .or. yval>y(ny)+epsy .or. ! zval<z(1) .or. zval>z(nz)+epsz !``` !  where !```fortran ! epsx = 0.1*(x(nx)-x(nx-1)) ! epsy = 0.1*(y(ny)-y(ny-1)) ! epsz = 0.1*(z(nz)-z(nz-1)) !``` ! !  The input quantities `tx`, `ty`, `tz`, `nx`, `ny`, `nz`, `kx`, `ky`, `kz`, and `bcoef` !  should remain unchanged since the last call of [[db3ink]]. ! !### History !  * Boisvert, Ronald, NBS : 25 may 1982 : Author of original routine. !  * JEC : 000330 modified array declarations. !  * Jacob Williams, 2/24/2015 : extensive refactoring of CMLIB routine. pure subroutine db3val ( xval , yval , zval , idx , idy , idz ,& tx , ty , tz ,& nx , ny , nz , kx , ky , kz , bcoef , f , iflag ,& inbvx , inbvy , inbvz , iloy , iloz , extrap ) implicit none integer , intent ( in ) :: idx !! x derivative of piecewise polynomial to evaluate. integer , intent ( in ) :: idy !! y derivative of piecewise polynomial to evaluate. integer , intent ( in ) :: idz !! z derivative of piecewise polynomial to evaluate. integer , intent ( in ) :: nx !! the number of interpolation points in x. !! (same as in last call to [[db3ink]]) integer , intent ( in ) :: ny !! the number of interpolation points in y. !! (same as in last call to [[db3ink]]) integer , intent ( in ) :: nz !! the number of interpolation points in z. !! (same as in last call to [[db3ink]]) integer , intent ( in ) :: kx !! order of polynomial pieces in z. !! (same as in last call to [[db3ink]]) integer , intent ( in ) :: ky !! order of polynomial pieces in y. !! (same as in last call to [[db3ink]]) integer , intent ( in ) :: kz !! order of polynomial pieces in z. !! (same as in last call to [[db3ink]]) real ( wp ), intent ( in ) :: xval !! x coordinate of evaluation point. real ( wp ), intent ( in ) :: yval !! y coordinate of evaluation point. real ( wp ), intent ( in ) :: zval !! z coordinate of evaluation point. real ( wp ), dimension ( nx + kx ), intent ( in ) :: tx !! sequence of knots defining the piecewise polynomial !! in the x direction. (same as in last call to [[db3ink]]) real ( wp ), dimension ( ny + ky ), intent ( in ) :: ty !! sequence of knots defining the piecewise polynomial !! in the y direction. (same as in last call to [[db3ink]]) real ( wp ), dimension ( nz + kz ), intent ( in ) :: tz !! sequence of knots defining the piecewise polynomial !! in the z direction. (same as in last call to [[db3ink]]) real ( wp ), dimension ( nx , ny , nz ), intent ( in ) :: bcoef !! the b-spline coefficients computed by [[db3ink]]. real ( wp ), intent ( out ) :: f !! interpolated value integer , intent ( out ) :: iflag !! status flag: !! !! *  = 0    : no errors !! *  \\ne 0  : error integer , intent ( inout ) :: inbvx !! initialization parameter which must be !! set to 1 the first time this routine is called, !! and must not be changed by the user. integer , intent ( inout ) :: inbvy !! initialization parameter which must be !! set to 1 the first time this routine is called, !! and must not be changed by the user. integer , intent ( inout ) :: inbvz !! initialization parameter which must be !! set to 1 the first time this routine is called, !! and must not be changed by the user. integer , intent ( inout ) :: iloy !! initialization parameter which must be !! set to 1 the first time this routine is called, !! and must not be changed by the user. integer , intent ( inout ) :: iloz !! initialization parameter which must be !! set to 1 the first time this routine is called, !! and must not be changed by the user. logical , intent ( in ), optional :: extrap !! if extrapolation is allowed !! (if not present, default is False) real ( wp ), dimension ( ky , kz ) :: temp1 real ( wp ), dimension ( kz ) :: temp2 real ( wp ), dimension ( 3 * max ( kx , ky , kz )) :: work integer :: lefty , leftz , mflag ,& kcoly , kcolz , j , k f = 0.0_wp iflag = check_value ( xval , tx , 1 , extrap ); if ( iflag /= 0 ) return iflag = check_value ( yval , ty , 2 , extrap ); if ( iflag /= 0 ) return iflag = check_value ( zval , tz , 3 , extrap ); if ( iflag /= 0 ) return iflag = - 1 call dintrv ( ty , ny + ky , yval , iloy , lefty , mflag , extrap ); if ( mflag /= 0 ) return call dintrv ( tz , nz + kz , zval , iloz , leftz , mflag , extrap ); if ( mflag /= 0 ) return iflag = 0 kcolz = leftz - kz do k = 1 , kz kcolz = kcolz + 1 kcoly = lefty - ky do j = 1 , ky kcoly = kcoly + 1 call dbvalu ( tx , bcoef (:, kcoly , kcolz ), nx , kx , idx , xval , inbvx , work , iflag , temp1 ( j , k ), extrap ) if ( iflag /= 0 ) return end do end do kcoly = lefty - ky + 1 do k = 1 , kz call dbvalu ( ty ( kcoly :), temp1 (:, k ), ky , ky , idy , yval , inbvy , work , iflag , temp2 ( k ), extrap ) if ( iflag /= 0 ) return end do kcolz = leftz - kz + 1 call dbvalu ( tz ( kcolz :), temp2 , kz , kz , idz , zval , inbvz , work , iflag , f , extrap ) end subroutine db3val !***************************************************************************************** !***************************************************************************************** !> !  Determines the parameters of a function that interpolates !  the four-dimensional gridded data !   [x(i),y(j),z(k),q(l),\\mathrm{fcn}(i,j,k,l)] ~\\mathrm{for}~ !     i=1,..,n_x ~\\mathrm{and}~ j=1,..,n_y, ~\\mathrm{and}~ k=1,..,n_z, !     ~\\mathrm{and}~ l=1,..,n_q  !  The interpolating function and its derivatives may !  subsequently be evaluated by the function [[db4val]]. ! !  See [[db3ink]] header for more details. ! !### History !  * Jacob Williams, 2/24/2015 : Created this routine. pure subroutine db4ink ( x , nx , y , ny , z , nz , q , nq ,& fcn ,& kx , ky , kz , kq ,& iknot ,& tx , ty , tz , tq ,& bcoef , iflag ) implicit none integer , intent ( in ) :: nx !! number of x abcissae (  \\ge 3  ) integer , intent ( in ) :: ny !! number of y abcissae (  \\ge 3  ) integer , intent ( in ) :: nz !! number of z abcissae (  \\ge 3  ) integer , intent ( in ) :: nq !! number of q abcissae (  \\ge 3  ) integer , intent ( in ) :: kx !! the order of spline pieces in x !! (  2 \\le k_x < n_x  ). !! (order = polynomial degree + 1) integer , intent ( in ) :: ky !! the order of spline pieces in y !! (  2 \\le k_y < n_y  ). !! (order = polynomial degree + 1) integer , intent ( in ) :: kz !! the order of spline pieces in z !! (  2 \\le k_z < n_z  ). !! (order = polynomial degree + 1) integer , intent ( in ) :: kq !! the order of spline pieces in q !! (  2 \\le k_q < n_q  ). !! (order = polynomial degree + 1) real ( wp ), dimension (:), intent ( in ) :: x !! `(nx)` array of x abcissae. must be strictly increasing. real ( wp ), dimension (:), intent ( in ) :: y !! `(ny)` array of y abcissae. must be strictly increasing. real ( wp ), dimension (:), intent ( in ) :: z !! `(nz)` array of z abcissae. must be strictly increasing. real ( wp ), dimension (:), intent ( in ) :: q !! `(nq)` array of q abcissae. must be strictly increasing. real ( wp ), dimension (:,:,:,:), intent ( in ) :: fcn !! `(nx,ny,nz,nq)` matrix of function values to interpolate. `fcn(i,j,k,q)` should !! contain the function value at the point (`x(i)`,`y(j)`,`z(k)`,`q(l)`) integer , intent ( in ) :: iknot !! knot sequence flag: !! !! * 0 = knot sequence chosen by [[db4ink]]. !! * 1 = knot sequence chosen by user. real ( wp ), dimension (:), intent ( inout ) :: tx !! The `(nx+kx)` knots in the x direction for the spline interpolant. !! !! * If `iknot=0` these are chosen by [[db4ink]]. !! * If `iknot=1` these are specified by the user. !! !! Must be non-decreasing. real ( wp ), dimension (:), intent ( inout ) :: ty !! The `(ny+ky)` knots in the y direction for the spline interpolant. !! !! * If `iknot=0` these are chosen by [[db4ink]]. !! * If `iknot=1` these are specified by the user. !! !! Must be non-decreasing. real ( wp ), dimension (:), intent ( inout ) :: tz !! The `(nz+kz)` knots in the z direction for the spline interpolant. !! !! * If `iknot=0` these are chosen by [[db4ink]]. !! * If `iknot=1` these are specified by the user. !! !! Must be non-decreasing. real ( wp ), dimension (:), intent ( inout ) :: tq !! The `(nq+kq)` knots in the q direction for the spline interpolant. !! !! * If `iknot=0` these are chosen by [[db4ink]]. !! * If `iknot=1` these are specified by the user. !! !! Must be non-decreasing. real ( wp ), dimension (:,:,:,:), intent ( out ) :: bcoef !! `(nx,ny,nz,nq)` matrix of coefficients of the b-spline interpolant. integer , intent ( out ) :: iflag !! *  0 = successful execution. !! *  2 = `iknot` out of range. !! *  3 = `nx` out of range. !! *  4 = `kx` out of range. !! *  5 = `x` not strictly increasing. !! *  6 = `tx` not non-decreasing. !! *  7 = `ny` out of range. !! *  8 = `ky` out of range. !! *  9 = `y` not strictly increasing. !! * 10 = `ty` not non-decreasing. !! * 11 = `nz` out of range. !! * 12 = `kz` out of range. !! * 13 = `z` not strictly increasing. !! * 14 = `tz` not non-decreasing. !! * 15 = `nq` out of range. !! * 16 = `kq` out of range. !! * 17 = `q` not strictly increasing. !! * 18 = `tq` not non-decreasing. !! * 700 = `size(x)`   \\ne  `size(fcn,1)` !! * 701 = `size(y)`   \\ne  `size(fcn,2)` !! * 702 = `size(z)`   \\ne  `size(fcn,3)` !! * 703 = `size(q)`   \\ne  `size(fcn,4)` !! * 706 = `size(x)`   \\ne  `nx` !! * 707 = `size(y)`   \\ne  `ny` !! * 708 = `size(z)`   \\ne  `nz` !! * 709 = `size(q)`   \\ne  `nq` !! * 712 = `size(tx`)  \\ne  `nx+kx` !! * 713 = `size(ty`)  \\ne  `ny+ky` !! * 714 = `size(tz`)  \\ne  `nz+kz` !! * 715 = `size(tq`)  \\ne  `nq+kq` !! * 800 = `size(x)`   \\ne  `size(bcoef,1)` !! * 801 = `size(y)`   \\ne  `size(bcoef,2)` !! * 802 = `size(z)`   \\ne  `size(bcoef,3)` !! * 803 = `size(q)`   \\ne  `size(bcoef,4)` real ( wp ), dimension ( nx * ny * nz * nq ) :: temp real ( wp ), dimension ( max ( 2 * kx * ( nx + 1 ), 2 * ky * ( ny + 1 ), 2 * kz * ( nz + 1 ), 2 * kq * ( nq + 1 ))) :: work logical :: status_ok ! check validity of input call check_inputs ( 'db4ink' ,& iknot ,& iflag ,& nx = nx , ny = ny , nz = nz , nq = nq ,& kx = kx , ky = ky , kz = kz , kq = kq ,& x = x , y = y , z = z , q = q ,& tx = tx , ty = ty , tz = tz , tq = tq ,& f4 = fcn ,& bcoef4 = bcoef ,& status_ok = status_ok ) if ( status_ok ) then ! choose knots if ( iknot == 0 ) then call dbknot ( x , nx , kx , tx ) call dbknot ( y , ny , ky , ty ) call dbknot ( z , nz , kz , tz ) call dbknot ( q , nq , kq , tq ) end if ! construct b-spline coefficients call dbtpcf ( x , nx , fcn , nx , ny * nz * nq , tx , kx , temp , work , iflag ) if ( iflag == 0 ) call dbtpcf ( y , ny , temp , ny , nx * nz * nq , ty , ky , bcoef , work , iflag ) if ( iflag == 0 ) call dbtpcf ( z , nz , bcoef , nz , nx * ny * nq , tz , kz , temp , work , iflag ) if ( iflag == 0 ) call dbtpcf ( q , nq , temp , nq , nx * ny * nz , tq , kq , bcoef , work , iflag ) end if end subroutine db4ink !***************************************************************************************** !***************************************************************************************** !> !  Evaluates the tensor product piecewise polynomial !  interpolant constructed by the routine [[db4ink]] or one of its !  derivatives at the point (`xval`,`yval`,`zval`,`qval`). ! !  To evaluate the !  interpolant itself, set `idx=idy=idz=idq=0`, to evaluate the first !  partial with respect to `x`, set `idx=1,idy=idz=idq=0`, and so on. ! !  See [[db3val]] header for more information. ! !### History !  * Jacob Williams, 2/24/2015 : Created this routine. pure subroutine db4val ( xval , yval , zval , qval ,& idx , idy , idz , idq ,& tx , ty , tz , tq ,& nx , ny , nz , nq ,& kx , ky , kz , kq ,& bcoef , f , iflag ,& inbvx , inbvy , inbvz , inbvq ,& iloy , iloz , iloq , extrap ) implicit none integer , intent ( in ) :: idx !! x derivative of piecewise polynomial to evaluate. integer , intent ( in ) :: idy !! y derivative of piecewise polynomial to evaluate. integer , intent ( in ) :: idz !! z derivative of piecewise polynomial to evaluate. integer , intent ( in ) :: idq !! q derivative of piecewise polynomial to evaluate. integer , intent ( in ) :: nx !! the number of interpolation points in x. !! (same as in last call to [[db4ink]]) integer , intent ( in ) :: ny !! the number of interpolation points in y. !! (same as in last call to [[db4ink]]) integer , intent ( in ) :: nz !! the number of interpolation points in z. !! (same as in last call to [[db4ink]]) integer , intent ( in ) :: nq !! the number of interpolation points in q. !! (same as in last call to [[db4ink]]) integer , intent ( in ) :: kx !! order of polynomial pieces in x. !! (same as in last call to [[db4ink]]) integer , intent ( in ) :: ky !! order of polynomial pieces in y. !! (same as in last call to [[db4ink]]) integer , intent ( in ) :: kz !! order of polynomial pieces in z. !! (same as in last call to [[db4ink]]) integer , intent ( in ) :: kq !! order of polynomial pieces in q. !! (same as in last call to [[db4ink]]) real ( wp ), intent ( in ) :: xval !! x coordinate of evaluation point. real ( wp ), intent ( in ) :: yval !! y coordinate of evaluation point. real ( wp ), intent ( in ) :: zval !! z coordinate of evaluation point. real ( wp ), intent ( in ) :: qval !! q coordinate of evaluation point. real ( wp ), dimension ( nx + kx ), intent ( in ) :: tx !! sequence of knots defining the piecewise polynomial !! in the x direction. (same as in last call to [[db4ink]]) real ( wp ), dimension ( ny + ky ), intent ( in ) :: ty !! sequence of knots defining the piecewise polynomial !! in the y direction. (same as in last call to [[db4ink]]) real ( wp ), dimension ( nz + kz ), intent ( in ) :: tz !! sequence of knots defining the piecewise polynomial !! in the z direction. (same as in last call to [[db4ink]]) real ( wp ), dimension ( nq + kq ), intent ( in ) :: tq !! sequence of knots defining the piecewise polynomial !! in the q direction. (same as in last call to [[db4ink]]) real ( wp ), dimension ( nx , ny , nz , nq ), intent ( in ) :: bcoef !! the b-spline coefficients computed by [[db4ink]]. real ( wp ), intent ( out ) :: f !! interpolated value integer , intent ( out ) :: iflag !! status flag: !! !! *  = 0    : no errors !! *  \\ne 0  : error integer , intent ( inout ) :: inbvx !! initialization parameter which must be set !! to 1 the first time this routine is called, !! and must not be changed by the user. integer , intent ( inout ) :: inbvy !! initialization parameter which must be set !! to 1 the first time this routine is called, !! and must not be changed by the user. integer , intent ( inout ) :: inbvz !! initialization parameter which must be set !! to 1 the first time this routine is called, !! and must not be changed by the user. integer , intent ( inout ) :: inbvq !! initialization parameter which must be set !! to 1 the first time this routine is called, !! and must not be changed by the user. integer , intent ( inout ) :: iloy !! initialization parameter which must be set !! to 1 the first time this routine is called, !! and must not be changed by the user. integer , intent ( inout ) :: iloz !! initialization parameter which must be set !! to 1 the first time this routine is called, !! and must not be changed by the user. integer , intent ( inout ) :: iloq !! initialization parameter which must be set !! to 1 the first time this routine is called, !! and must not be changed by the user. logical , intent ( in ), optional :: extrap !! if extrapolation is allowed !! (if not present, default is False) real ( wp ), dimension ( ky , kz , kq ) :: temp1 real ( wp ), dimension ( kz , kq ) :: temp2 real ( wp ), dimension ( kq ) :: temp3 real ( wp ), dimension ( 3 * max ( kx , ky , kz , kq )) :: work integer :: lefty , leftz , leftq , mflag ,& kcoly , kcolz , kcolq , j , k , q f = 0.0_wp iflag = check_value ( xval , tx , 1 , extrap ); if ( iflag /= 0 ) return iflag = check_value ( yval , ty , 2 , extrap ); if ( iflag /= 0 ) return iflag = check_value ( zval , tz , 3 , extrap ); if ( iflag /= 0 ) return iflag = check_value ( qval , tq , 4 , extrap ); if ( iflag /= 0 ) return iflag = - 1 call dintrv ( ty , ny + ky , yval , iloy , lefty , mflag , extrap ); if ( mflag /= 0 ) return call dintrv ( tz , nz + kz , zval , iloz , leftz , mflag , extrap ); if ( mflag /= 0 ) return call dintrv ( tq , nq + kq , qval , iloq , leftq , mflag , extrap ); if ( mflag /= 0 ) return iflag = 0 ! x -> y, z, q kcolq = leftq - kq do q = 1 , kq kcolq = kcolq + 1 kcolz = leftz - kz do k = 1 , kz kcolz = kcolz + 1 kcoly = lefty - ky do j = 1 , ky kcoly = kcoly + 1 call dbvalu ( tx , bcoef (:, kcoly , kcolz , kcolq ),& nx , kx , idx , xval , inbvx , work , iflag ,& temp1 ( j , k , q ), extrap ) if ( iflag /= 0 ) return end do end do end do ! y -> z, q kcoly = lefty - ky + 1 do q = 1 , kq do k = 1 , kz call dbvalu ( ty ( kcoly :), temp1 (:, k , q ),& ky , ky , idy , yval , inbvy , work , iflag ,& temp2 ( k , q ), extrap ) if ( iflag /= 0 ) return end do end do ! z -> q kcolz = leftz - kz + 1 do q = 1 , kq call dbvalu ( tz ( kcolz :), temp2 (:, q ),& kz , kz , idz , zval , inbvz , work , iflag ,& temp3 ( q ), extrap ) if ( iflag /= 0 ) return end do ! q kcolq = leftq - kq + 1 call dbvalu ( tq ( kcolq :), temp3 , kq , kq , idq , qval , inbvq , work , iflag , f , extrap ) end subroutine db4val !***************************************************************************************** !***************************************************************************************** !> ! Determines the parameters of a function that interpolates ! the five-dimensional gridded data: ! !  [x(i),y(j),z(k),q(l),r(m),\\mathrm{fcn}(i,j,k,l,m)]  ! ! for: ! !  i=1,..,n_x ~\\mathrm{and}~ j=1,..,n_y, ~\\mathrm{and}~ k=1,..,n_z, !    ~\\mathrm{and}~ l=1,..,n_q, ~\\mathrm{and}~ m=1,..,n_r  ! ! The interpolating function and its derivatives may subsequently be evaluated ! by the function [[db5val]]. ! ! See [[db3ink]] header for more details. ! !### History !  * Jacob Williams, 2/24/2015 : Created this routine. pure subroutine db5ink ( x , nx , y , ny , z , nz , q , nq , r , nr ,& fcn ,& kx , ky , kz , kq , kr ,& iknot ,& tx , ty , tz , tq , tr ,& bcoef , iflag ) implicit none integer , intent ( in ) :: nx !! number of x abcissae (  \\ge 3  ) integer , intent ( in ) :: ny !! number of y abcissae (  \\ge 3  ) integer , intent ( in ) :: nz !! number of z abcissae (  \\ge 3  ) integer , intent ( in ) :: nq !! number of q abcissae (  \\ge 3  ) integer , intent ( in ) :: nr !! number of r abcissae (  \\ge 3  ) integer , intent ( in ) :: kx !! the order of spline pieces in x !! (  2 \\le k_x < n_x  ). !! (order = polynomial degree + 1) integer , intent ( in ) :: ky !! the order of spline pieces in y !! (  2 \\le k_y < n_y  ). !! (order = polynomial degree + 1) integer , intent ( in ) :: kz !! the order of spline pieces in z !! (  2 \\le k_z < n_z  ). !! (order = polynomial degree + 1) integer , intent ( in ) :: kq !! the order of spline pieces in q !! (  2 \\le k_q < n_q  ). !! (order = polynomial degree + 1) integer , intent ( in ) :: kr !! the order of spline pieces in r !! (  2 \\le k_r < n_r  ). !! (order = polynomial degree + 1) real ( wp ), dimension (:), intent ( in ) :: x !! `(nx)` array of x abcissae. must be strictly increasing. real ( wp ), dimension (:), intent ( in ) :: y !! `(ny)` array of y abcissae. must be strictly increasing. real ( wp ), dimension (:), intent ( in ) :: z !! `(nz)` array of z abcissae. must be strictly increasing. real ( wp ), dimension (:), intent ( in ) :: q !! `(nq)` array of q abcissae. must be strictly increasing. real ( wp ), dimension (:), intent ( in ) :: r !! `(nr)` array of r abcissae. must be strictly increasing. real ( wp ), dimension (:,:,:,:,:), intent ( in ) :: fcn !! `(nx,ny,nz,nq,nr)` matrix of function values to interpolate. `fcn(i,j,k,q,r)` should !! contain the function value at the point (`x(i)`,`y(j)`,`z(k)`,`q(l)`,`r(m)`) integer , intent ( in ) :: iknot !! knot sequence flag: !! !! * 0 = knot sequence chosen by [[db5ink]]. !! * 1 = knot sequence chosen by user. real ( wp ), dimension (:), intent ( inout ) :: tx !! The `(nx+kx)` knots in the x direction for the spline interpolant. !! !! * If `iknot=0` these are chosen by [[db5ink]]. !! * If `iknot=1` these are specified by the user. !! !! Must be non-decreasing. real ( wp ), dimension (:), intent ( inout ) :: ty !! The `(ny+ky)` knots in the y direction for the spline interpolant. !! !! * If `iknot=0` these are chosen by [[db5ink]]. !! * If `iknot=1` these are specified by the user. !! !! Must be non-decreasing. real ( wp ), dimension (:), intent ( inout ) :: tz !! The `(nz+kz)` knots in the z direction for the spline interpolant. !! !! * If `iknot=0` these are chosen by [[db5ink]]. !! * If `iknot=1` these are specified by the user. !! !! Must be non-decreasing. real ( wp ), dimension (:), intent ( inout ) :: tq !! The `(nq+kq)` knots in the q direction for the spline interpolant. !! !! * If `iknot=0` these are chosen by [[db5ink]]. !! * If `iknot=1` these are specified by the user. !! !! Must be non-decreasing. real ( wp ), dimension (:), intent ( inout ) :: tr !! The `(nr+kr)` knots in the r direction for the spline interpolant. !! !! * If `iknot=0` these are chosen by [[db5ink]]. !! * If `iknot=1` these are specified by the user. !! !! Must be non-decreasing. real ( wp ), dimension (:,:,:,:,:), intent ( out ) :: bcoef !! `(nx,ny,nz,nq,nr)` matrix of coefficients of the b-spline interpolant. integer , intent ( out ) :: iflag !! *  0 = successful execution. !! *  2 = `iknot` out of range. !! *  3 = `nx` out of range. !! *  4 = `kx` out of range. !! *  5 = `x` not strictly increasing. !! *  6 = `tx` not non-decreasing. !! *  7 = `ny` out of range. !! *  8 = `ky` out of range. !! *  9 = `y` not strictly increasing. !! * 10 = `ty` not non-decreasing. !! * 11 = `nz` out of range. !! * 12 = `kz` out of range. !! * 13 = `z` not strictly increasing. !! * 14 = `tz` not non-decreasing. !! * 15 = `nq` out of range. !! * 16 = `kq` out of range. !! * 17 = `q` not strictly increasing. !! * 18 = `tq` not non-decreasing. !! * 19 = `nr` out of range. !! * 20 = `kr` out of range. !! * 21 = `r` not strictly increasing. !! * 22 = `tr` not non-decreasing. !! * 700 = `size(x)`   \\ne  `size(fcn,1)` !! * 701 = `size(y)`   \\ne  `size(fcn,2)` !! * 702 = `size(z)`   \\ne  `size(fcn,3)` !! * 703 = `size(q)`   \\ne  `size(fcn,4)` !! * 704 = `size(r)`   \\ne  `size(fcn,5)` !! * 706 = `size(x)`   \\ne  `nx` !! * 707 = `size(y)`   \\ne  `ny` !! * 708 = `size(z)`   \\ne  `nz` !! * 709 = `size(q)`   \\ne  `nq` !! * 710 = `size(r)`   \\ne  `nr` !! * 712 = `size(tx)`  \\ne  `nx+kx` !! * 713 = `size(ty)`  \\ne  `ny+ky` !! * 714 = `size(tz)`  \\ne  `nz+kz` !! * 715 = `size(tq)`  \\ne  `nq+kq` !! * 716 = `size(tr)`  \\ne  `nr+kr` !! * 800 = `size(x)`   \\ne  `size(bcoef,1)` !! * 801 = `size(y)`   \\ne  `size(bcoef,2)` !! * 802 = `size(z)`   \\ne  `size(bcoef,3)` !! * 803 = `size(q)`   \\ne  `size(bcoef,4)` !! * 804 = `size(r)`   \\ne  `size(bcoef,5)` real ( wp ), dimension ( nx * ny * nz * nq * nr ) :: temp real ( wp ), dimension ( max ( 2 * kx * ( nx + 1 ),& 2 * ky * ( ny + 1 ),& 2 * kz * ( nz + 1 ),& 2 * kq * ( nq + 1 ),& 2 * kr * ( nr + 1 ) )) :: work logical :: status_ok !  check validity of input call check_inputs ( 'db5ink' ,& iknot ,& iflag ,& nx = nx , ny = ny , nz = nz , nq = nq , nr = nr ,& kx = kx , ky = ky , kz = kz , kq = kq , kr = kr ,& x = x , y = y , z = z , q = q , r = r ,& tx = tx , ty = ty , tz = tz , tq = tq , tr = tr ,& f5 = fcn ,& bcoef5 = bcoef ,& status_ok = status_ok ) if ( status_ok ) then !  choose knots if ( iknot == 0 ) then call dbknot ( x , nx , kx , tx ) call dbknot ( y , ny , ky , ty ) call dbknot ( z , nz , kz , tz ) call dbknot ( q , nq , kq , tq ) call dbknot ( r , nr , kr , tr ) end if ! copy fcn to work in packed for dbtpcf temp ( 1 : nx * ny * nz * nq * nr ) = reshape ( fcn , [ nx * ny * nz * nq * nr ] ) !  construct b-spline coefficients call dbtpcf ( x , nx , temp , nx , ny * nz * nq * nr , tx , kx , bcoef , work , iflag ) if ( iflag == 0 ) call dbtpcf ( y , ny , bcoef , ny , nx * nz * nq * nr , ty , ky , temp , work , iflag ) if ( iflag == 0 ) call dbtpcf ( z , nz , temp , nz , nx * ny * nq * nr , tz , kz , bcoef , work , iflag ) if ( iflag == 0 ) call dbtpcf ( q , nq , bcoef , nq , nx * ny * nz * nr , tq , kq , temp , work , iflag ) if ( iflag == 0 ) call dbtpcf ( r , nr , temp , nr , nx * ny * nz * nq , tr , kr , bcoef , work , iflag ) end if end subroutine db5ink !***************************************************************************************** !***************************************************************************************** !> !  Evaluates the tensor product piecewise polynomial !  interpolant constructed by the routine [[db5ink]] or one of its !  derivatives at the point (`xval`,`yval`,`zval`,`qval`,`rval`). ! !  To evaluate the !  interpolant itself, set `idx=idy=idz=idq=idr=0`, to evaluate the first !  partial with respect to `x`, set `idx=1,idy=idz=idq=idr=0,` and so on. ! !  See [[db3val]] header for more information. ! !### History !  * Jacob Williams, 2/24/2015 : Created this routine. pure subroutine db5val ( xval , yval , zval , qval , rval ,& idx , idy , idz , idq , idr ,& tx , ty , tz , tq , tr ,& nx , ny , nz , nq , nr ,& kx , ky , kz , kq , kr ,& bcoef , f , iflag ,& inbvx , inbvy , inbvz , inbvq , inbvr ,& iloy , iloz , iloq , ilor , extrap ) implicit none integer , intent ( in ) :: idx !! x derivative of piecewise polynomial to evaluate. integer , intent ( in ) :: idy !! y derivative of piecewise polynomial to evaluate. integer , intent ( in ) :: idz !! z derivative of piecewise polynomial to evaluate. integer , intent ( in ) :: idq !! q derivative of piecewise polynomial to evaluate. integer , intent ( in ) :: idr !! r derivative of piecewise polynomial to evaluate. integer , intent ( in ) :: nx !! the number of interpolation points in x. !! (same as in last call to [[db5ink]]) integer , intent ( in ) :: ny !! the number of interpolation points in y. !! (same as in last call to [[db5ink]]) integer , intent ( in ) :: nz !! the number of interpolation points in z. !! (same as in last call to [[db5ink]]) integer , intent ( in ) :: nq !! the number of interpolation points in q. !! (same as in last call to [[db5ink]]) integer , intent ( in ) :: nr !! the number of interpolation points in r. !! (same as in last call to [[db5ink]]) integer , intent ( in ) :: kx !! order of polynomial pieces in x. !! (same as in last call to [[db5ink]]) integer , intent ( in ) :: ky !! order of polynomial pieces in y. !! (same as in last call to [[db5ink]]) integer , intent ( in ) :: kz !! order of polynomial pieces in z. !! (same as in last call to [[db5ink]]) integer , intent ( in ) :: kq !! order of polynomial pieces in q. !! (same as in last call to [[db5ink]]) integer , intent ( in ) :: kr !! order of polynomial pieces in r. !! (same as in last call to [[db5ink]]) real ( wp ), intent ( in ) :: xval !! x coordinate of evaluation point. real ( wp ), intent ( in ) :: yval !! y coordinate of evaluation point. real ( wp ), intent ( in ) :: zval !! z coordinate of evaluation point. real ( wp ), intent ( in ) :: qval !! q coordinate of evaluation point. real ( wp ), intent ( in ) :: rval !! r coordinate of evaluation point. real ( wp ), dimension ( nx + kx ), intent ( in ) :: tx !! sequence of knots defining the piecewise polynomial !! in the x direction. !! (same as in last call to [[db5ink]]) real ( wp ), dimension ( ny + ky ), intent ( in ) :: ty !! sequence of knots defining the piecewise polynomial !! in the y direction. !! (same as in last call to [[db5ink]]) real ( wp ), dimension ( nz + kz ), intent ( in ) :: tz !! sequence of knots defining the piecewise polynomial !! in the z direction. !! (same as in last call to [[db5ink]]) real ( wp ), dimension ( nq + kq ), intent ( in ) :: tq !! sequence of knots defining the piecewise polynomial !! in the q direction. !! (same as in last call to [[db5ink]]) real ( wp ), dimension ( nr + kr ), intent ( in ) :: tr !! sequence of knots defining the piecewise polynomial !! in the r direction. !! (same as in last call to [[db5ink]]) real ( wp ), dimension ( nx , ny , nz , nq , nr ), intent ( in ) :: bcoef !! the b-spline coefficients computed by [[db5ink]]. real ( wp ), intent ( out ) :: f !! interpolated value integer , intent ( out ) :: iflag !! status flag: !! !! *  = 0    : no errors !! *  \\ne 0  : error integer , intent ( inout ) :: inbvx !! initialization parameter which must be set !! to 1 the first time this routine is called, !! and must not be changed by the user. integer , intent ( inout ) :: inbvy !! initialization parameter which must be set !! to 1 the first time this routine is called, !! and must not be changed by the user. integer , intent ( inout ) :: inbvz !! initialization parameter which must be set !! to 1 the first time this routine is called, !! and must not be changed by the user. integer , intent ( inout ) :: inbvq !! initialization parameter which must be set !! to 1 the first time this routine is called, !! and must not be changed by the user. integer , intent ( inout ) :: inbvr !! initialization parameter which must be set !! to 1 the first time this routine is called, !! and must not be changed by the user. integer , intent ( inout ) :: iloy !! initialization parameter which must be set !! to 1 the first time this routine is called, !! and must not be changed by the user. integer , intent ( inout ) :: iloz !! initialization parameter which must be set !! to 1 the first time this routine is called, !! and must not be changed by the user. integer , intent ( inout ) :: iloq !! initialization parameter which must be set !! to 1 the first time this routine is called, !! and must not be changed by the user. integer , intent ( inout ) :: ilor !! initialization parameter which must be set !! to 1 the first time this routine is called, !! and must not be changed by the user. logical , intent ( in ), optional :: extrap !! if extrapolation is allowed !! (if not present, default is False) real ( wp ), dimension ( ky , kz , kq , kr ) :: temp1 real ( wp ), dimension ( kz , kq , kr ) :: temp2 real ( wp ), dimension ( kq , kr ) :: temp3 real ( wp ), dimension ( kr ) :: temp4 real ( wp ), dimension ( 3 * max ( kx , ky , kz , kq , kr )) :: work integer :: lefty , leftz , leftq , leftr , mflag ,& kcoly , kcolz , kcolq , kcolr , j , k , q , r f = 0.0_wp iflag = check_value ( xval , tx , 1 , extrap ); if ( iflag /= 0 ) return iflag = check_value ( yval , ty , 2 , extrap ); if ( iflag /= 0 ) return iflag = check_value ( zval , tz , 3 , extrap ); if ( iflag /= 0 ) return iflag = check_value ( qval , tq , 4 , extrap ); if ( iflag /= 0 ) return iflag = check_value ( rval , tr , 5 , extrap ); if ( iflag /= 0 ) return iflag = - 1 call dintrv ( ty , ny + ky , yval , iloy , lefty , mflag , extrap ); if ( mflag /= 0 ) return call dintrv ( tz , nz + kz , zval , iloz , leftz , mflag , extrap ); if ( mflag /= 0 ) return call dintrv ( tq , nq + kq , qval , iloq , leftq , mflag , extrap ); if ( mflag /= 0 ) return call dintrv ( tr , nr + kr , rval , ilor , leftr , mflag , extrap ); if ( mflag /= 0 ) return iflag = 0 ! x -> y, z, q, r kcolr = leftr - kr do r = 1 , kr kcolr = kcolr + 1 kcolq = leftq - kq do q = 1 , kq kcolq = kcolq + 1 kcolz = leftz - kz do k = 1 , kz kcolz = kcolz + 1 kcoly = lefty - ky do j = 1 , ky kcoly = kcoly + 1 call dbvalu ( tx , bcoef (:, kcoly , kcolz , kcolq , kcolr ),& nx , kx , idx , xval , inbvx , work , iflag , temp1 ( j , k , q , r ),& extrap ) if ( iflag /= 0 ) return end do end do end do end do ! y -> z, q, r kcoly = lefty - ky + 1 do r = 1 , kr do q = 1 , kq do k = 1 , kz call dbvalu ( ty ( kcoly :), temp1 (:, k , q , r ), ky , ky , idy , yval , inbvy ,& work , iflag , temp2 ( k , q , r ), extrap ) if ( iflag /= 0 ) return end do end do end do ! z -> q, r kcolz = leftz - kz + 1 do r = 1 , kr do q = 1 , kq call dbvalu ( tz ( kcolz :), temp2 (:, q , r ), kz , kz , idz , zval , inbvz ,& work , iflag , temp3 ( q , r ), extrap ) if ( iflag /= 0 ) return end do end do ! q -> r kcolq = leftq - kq + 1 do r = 1 , kr call dbvalu ( tq ( kcolq :), temp3 (:, r ), kq , kq , idq , qval , inbvq ,& work , iflag , temp4 ( r ), extrap ) if ( iflag /= 0 ) return end do ! r kcolr = leftr - kr + 1 call dbvalu ( tr ( kcolr :), temp4 , kr , kr , idr , rval , inbvr , work , iflag , f , extrap ) end subroutine db5val !***************************************************************************************** !***************************************************************************************** !> !  Determines the parameters of a function that interpolates !  the six-dimensional gridded data: ! !   [x(i),y(j),z(k),q(l),r(m),s(n),\\mathrm{fcn}(i,j,k,l,m,n)]  ! !  for: ! !   i=1,..,n_x, j=1,..,n_y, k=1,..,n_z, l=1,..,n_q, m=1,..,n_r, n=1,..,n_s  ! !  the interpolating function and its derivatives may subsequently be evaluated !  by the function [[db6val]]. ! !  See [[db3ink]] header for more details. ! !### History !  * Jacob Williams, 2/24/2015 : Created this routine. pure subroutine db6ink ( x , nx , y , ny , z , nz , q , nq , r , nr , s , ns ,& fcn ,& kx , ky , kz , kq , kr , ks ,& iknot ,& tx , ty , tz , tq , tr , ts ,& bcoef , iflag ) implicit none integer , intent ( in ) :: nx !! number of x abcissae (  \\ge 3  ) integer , intent ( in ) :: ny !! number of y abcissae (  \\ge 3  ) integer , intent ( in ) :: nz !! number of z abcissae (  \\ge 3  ) integer , intent ( in ) :: nq !! number of q abcissae (  \\ge 3  ) integer , intent ( in ) :: nr !! number of r abcissae (  \\ge 3  ) integer , intent ( in ) :: ns !! number of s abcissae (  \\ge 3  ) integer , intent ( in ) :: kx !! the order of spline pieces in x !! (  2 \\le k_x < n_x  ) !! (order = polynomial degree + 1) integer , intent ( in ) :: ky !! the order of spline pieces in y !! (  2 \\le k_y < n_y  ) !! (order = polynomial degree + 1) integer , intent ( in ) :: kz !! the order of spline pieces in z !! (  2 \\le k_z < n_z  ) !! (order = polynomial degree + 1) integer , intent ( in ) :: kq !! the order of spline pieces in q !! (  2 \\le k_q < n_q  ) !! (order = polynomial degree + 1) integer , intent ( in ) :: kr !! the order of spline pieces in r !! (  2 \\le k_r < n_r  ) !! (order = polynomial degree + 1) integer , intent ( in ) :: ks !! the order of spline pieces in s !! (  2 \\le k_s < n_s  ) !! (order = polynomial degree + 1) real ( wp ), dimension (:), intent ( in ) :: x !! `(nx)` array of x abcissae. !! must be strictly increasing. real ( wp ), dimension (:), intent ( in ) :: y !! `(ny)` array of y abcissae. !! must be strictly increasing. real ( wp ), dimension (:), intent ( in ) :: z !! `(nz)` array of z abcissae. !! must be strictly increasing. real ( wp ), dimension (:), intent ( in ) :: q !! `(nq)` array of q abcissae. !! must be strictly increasing. real ( wp ), dimension (:), intent ( in ) :: r !! `(nr)` array of r abcissae. !! must be strictly increasing. real ( wp ), dimension (:), intent ( in ) :: s !! `(ns)` array of s abcissae. !! must be strictly increasing. real ( wp ), dimension (:,:,:,:,:,:), intent ( in ) :: fcn !! `(nx,ny,nz,nq,nr,ns)` matrix of function values to interpolate. !! `fcn(i,j,k,q,r,s)` should contain the function value !! at the point (`x(i)`,`y(j)`,`z(k)`,`q(l)`,`r(m)`,`s(n)`) integer , intent ( in ) :: iknot !! knot sequence flag: !! !! * 0 = knot sequence chosen by [[db6ink]]. !! * 1 = knot sequence chosen by user. real ( wp ), dimension (:), intent ( inout ) :: tx !! The `(nx+kx)` knots in the x direction for the spline interpolant. !! !! * f `iknot=0` these are chosen by [[db6ink]]. !! * f `iknot=1` these are specified by the user. !! !! Must be non-decreasing. real ( wp ), dimension (:), intent ( inout ) :: ty !! The `(ny+ky)` knots in the y direction for the spline interpolant. !! !! * If `iknot=0` these are chosen by [[db6ink]]. !! * If `iknot=1` these are specified by the user. !! !! Must be non-decreasing. real ( wp ), dimension (:), intent ( inout ) :: tz !! The `(nz+kz)` knots in the z direction for the spline interpolant. !! !! * If `iknot=0` these are chosen by [[db6ink]]. !! * If `iknot=1` these are specified by the user. !! !! Must be non-decreasing. real ( wp ), dimension (:), intent ( inout ) :: tq !! The `(nq+kq)` knots in the q direction for the spline interpolant. !! !! * If `iknot=0` these are chosen by [[db6ink]]. !! * If `iknot=1` these are specified by the user. !! !! Must be non-decreasing. real ( wp ), dimension (:), intent ( inout ) :: tr !! The `(nr+kr)` knots in the r direction for the spline interpolant. !! !! * If `iknot=0` these are chosen by [[db6ink]]. !! * If `iknot=1` these are specified by the user. !! !! Must be non-decreasing. real ( wp ), dimension (:), intent ( inout ) :: ts !! The `(ns+ks)` knots in the s direction for the spline interpolant. !! !! * If `iknot=0` these are chosen by [[db6ink]]. !! * If `iknot=1` these are specified by the user. !! !! Must be non-decreasing. real ( wp ), dimension (:,:,:,:,:,:), intent ( out ) :: bcoef !! `(nx,ny,nz,nq,nr,ns)` matrix of coefficients of the b-spline interpolant. integer , intent ( out ) :: iflag !! *  0 = successful execution. !! *  2 = `iknot` out of range. !! *  3 = `nx` out of range. !! *  4 = `kx` out of range. !! *  5 = `x` not strictly increasing. !! *  6 = `tx` not non-decreasing. !! *  7 = `ny` out of range. !! *  8 = `ky` out of range. !! *  9 = `y` not strictly increasing. !! * 10 = `ty` not non-decreasing. !! * 11 = `nz` out of range. !! * 12 = `kz` out of range. !! * 13 = `z` not strictly increasing. !! * 14 = `tz` not non-decreasing. !! * 15 = `nq` out of range. !! * 16 = `kq` out of range. !! * 17 = `q` not strictly increasing. !! * 18 = `tq` not non-decreasing. !! * 19 = `nr` out of range. !! * 20 = `kr` out of range. !! * 21 = `r` not strictly increasing. !! * 22 = `tr` not non-decreasing. !! * 23 = `ns` out of range. !! * 24 = `ks` out of range. !! * 25 = `s` not strictly increasing. !! * 26 = `ts` not non-decreasing. !! * 700 = `size(x) `  \\ne  `size(fcn,1)` !! * 701 = `size(y) `  \\ne  `size(fcn,2)` !! * 702 = `size(z) `  \\ne  `size(fcn,3)` !! * 703 = `size(q) `  \\ne  `size(fcn,4)` !! * 704 = `size(r) `  \\ne  `size(fcn,5)` !! * 705 = `size(s) `  \\ne  `size(fcn,6)` !! * 706 = `size(x) `  \\ne  `nx` !! * 707 = `size(y) `  \\ne  `ny` !! * 708 = `size(z) `  \\ne  `nz` !! * 709 = `size(q) `  \\ne  `nq` !! * 710 = `size(r) `  \\ne  `nr` !! * 711 = `size(s) `  \\ne  `ns` !! * 712 = `size(tx)`  \\ne  `nx+kx` !! * 713 = `size(ty)`  \\ne  `ny+ky` !! * 714 = `size(tz)`  \\ne  `nz+kz` !! * 715 = `size(tq)`  \\ne  `nq+kq` !! * 716 = `size(tr)`  \\ne  `nr+kr` !! * 717 = `size(ts)`  \\ne  `ns+ks` !! * 800 = `size(x) `  \\ne  `size(bcoef,1)` !! * 801 = `size(y) `  \\ne  `size(bcoef,2)` !! * 802 = `size(z) `  \\ne  `size(bcoef,3)` !! * 803 = `size(q) `  \\ne  `size(bcoef,4)` !! * 804 = `size(r) `  \\ne  `size(bcoef,5)` !! * 805 = `size(s) `  \\ne  `size(bcoef,6)` real ( wp ), dimension ( nx * ny * nz * nq * nr * ns ) :: temp real ( wp ), dimension ( max ( 2 * kx * ( nx + 1 ),& 2 * ky * ( ny + 1 ),& 2 * kz * ( nz + 1 ),& 2 * kq * ( nq + 1 ),& 2 * kr * ( nr + 1 ),& 2 * ks * ( ns + 1 ))) :: work logical :: status_ok ! check validity of input call check_inputs ( 'db6ink' ,& iknot ,& iflag ,& nx = nx , ny = ny , nz = nz , nq = nq , nr = nr , ns = ns ,& kx = kx , ky = ky , kz = kz , kq = kq , kr = kr , ks = ks ,& x = x , y = y , z = z , q = q , r = r , s = s ,& tx = tx , ty = ty , tz = tz , tq = tq , tr = tr , ts = ts ,& f6 = fcn ,& bcoef6 = bcoef ,& status_ok = status_ok ) if ( status_ok ) then ! choose knots if ( iknot == 0 ) then call dbknot ( x , nx , kx , tx ) call dbknot ( y , ny , ky , ty ) call dbknot ( z , nz , kz , tz ) call dbknot ( q , nq , kq , tq ) call dbknot ( r , nr , kr , tr ) call dbknot ( s , ns , ks , ts ) end if ! construct b-spline coefficients call dbtpcf ( x , nx , fcn , nx , ny * nz * nq * nr * ns , tx , kx , temp , work , iflag ) if ( iflag == 0 ) call dbtpcf ( y , ny , temp , ny , nx * nz * nq * nr * ns , ty , ky , bcoef , work , iflag ) if ( iflag == 0 ) call dbtpcf ( z , nz , bcoef , nz , nx * ny * nq * nr * ns , tz , kz , temp , work , iflag ) if ( iflag == 0 ) call dbtpcf ( q , nq , temp , nq , nx * ny * nz * nr * ns , tq , kq , bcoef , work , iflag ) if ( iflag == 0 ) call dbtpcf ( r , nr , bcoef , nr , nx * ny * nz * nq * ns , tr , kr , temp , work , iflag ) if ( iflag == 0 ) call dbtpcf ( s , ns , temp , ns , nx * ny * nz * nq * nr , ts , ks , bcoef , work , iflag ) end if end subroutine db6ink !***************************************************************************************** !***************************************************************************************** !> !  Evaluates the tensor product piecewise polynomial !  interpolant constructed by the routine [[db6ink]] or one of its !  derivatives at the point (`xval`,`yval`,`zval`,`qval`,`rval`,`sval`). ! !  To evaluate the !  interpolant itself, set `idx=idy=idz=idq=idr=ids=0`, to evaluate the first !  partial with respect to `x`, set `idx=1,idy=idz=idq=idr=ids=0`, and so on. ! !  See [[db3val]] header for more information. ! !### History !  * Jacob Williams, 2/24/2015 : Created this routine. pure subroutine db6val ( xval , yval , zval , qval , rval , sval ,& idx , idy , idz , idq , idr , ids ,& tx , ty , tz , tq , tr , ts ,& nx , ny , nz , nq , nr , ns ,& kx , ky , kz , kq , kr , ks ,& bcoef , f , iflag ,& inbvx , inbvy , inbvz , inbvq , inbvr , inbvs ,& iloy , iloz , iloq , ilor , ilos , extrap ) implicit none integer , intent ( in ) :: idx !! x derivative of piecewise polynomial to evaluate. integer , intent ( in ) :: idy !! y derivative of piecewise polynomial to evaluate. integer , intent ( in ) :: idz !! z derivative of piecewise polynomial to evaluate. integer , intent ( in ) :: idq !! q derivative of piecewise polynomial to evaluate. integer , intent ( in ) :: idr !! r derivative of piecewise polynomial to evaluate. integer , intent ( in ) :: ids !! s derivative of piecewise polynomial to evaluate. integer , intent ( in ) :: nx !! the number of interpolation points in x. !! (same as in last call to [[db6ink]]) integer , intent ( in ) :: ny !! the number of interpolation points in y. !! (same as in last call to [[db6ink]]) integer , intent ( in ) :: nz !! the number of interpolation points in z. !! (same as in last call to [[db6ink]]) integer , intent ( in ) :: nq !! the number of interpolation points in q. !! (same as in last call to [[db6ink]]) integer , intent ( in ) :: nr !! the number of interpolation points in r. !! (same as in last call to [[db6ink]]) integer , intent ( in ) :: ns !! the number of interpolation points in s. !! (same as in last call to [[db6ink]]) integer , intent ( in ) :: kx !! order of polynomial pieces in x. !! (same as in last call to [[db6ink]]) integer , intent ( in ) :: ky !! order of polynomial pieces in y. !! (same as in last call to [[db6ink]]) integer , intent ( in ) :: kz !! order of polynomial pieces in z. !! (same as in last call to [[db6ink]]) integer , intent ( in ) :: kq !! order of polynomial pieces in q. !! (same as in last call to [[db6ink]]) integer , intent ( in ) :: kr !! order of polynomial pieces in r. !! (same as in last call to [[db6ink]]) integer , intent ( in ) :: ks !! order of polynomial pieces in s. !! (same as in last call to [[db6ink]]) real ( wp ), intent ( in ) :: xval !! x coordinate of evaluation point. real ( wp ), intent ( in ) :: yval !! y coordinate of evaluation point. real ( wp ), intent ( in ) :: zval !! z coordinate of evaluation point. real ( wp ), intent ( in ) :: qval !! q coordinate of evaluation point. real ( wp ), intent ( in ) :: rval !! r coordinate of evaluation point. real ( wp ), intent ( in ) :: sval !! s coordinate of evaluation point. real ( wp ), dimension ( nx + kx ), intent ( in ) :: tx !! sequence of knots defining the piecewise polynomial !! in the x direction. !! (same as in last call to [[db6ink]]) real ( wp ), dimension ( ny + ky ), intent ( in ) :: ty !! sequence of knots defining the piecewise polynomial !! in the y direction. !! (same as in last call to [[db6ink]]) real ( wp ), dimension ( nz + kz ), intent ( in ) :: tz !! sequence of knots defining the piecewise polynomial !! in the z direction. !! (same as in last call to [[db6ink]]) real ( wp ), dimension ( nq + kq ), intent ( in ) :: tq !! sequence of knots defining the piecewise polynomial !! in the q direction. !! (same as in last call to [[db6ink]]) real ( wp ), dimension ( nr + kr ), intent ( in ) :: tr !! sequence of knots defining the piecewise polynomial !! in the r direction. !! (same as in last call to [[db6ink]]) real ( wp ), dimension ( ns + ks ), intent ( in ) :: ts !! sequence of knots defining the piecewise polynomial !! in the s direction. !! (same as in last call to [[db6ink]]) real ( wp ), dimension ( nx , ny , nz , nq , nr , ns ), intent ( in ) :: bcoef !! the b-spline coefficients computed by [[db6ink]]. real ( wp ), intent ( out ) :: f !! interpolated value integer , intent ( out ) :: iflag !! status flag: !! !! *  = 0    : no errors !! *  \\ne 0  : error integer , intent ( inout ) :: inbvx !! initialization parameter which must be set !! to 1 the first time this routine is called, !! and must not be changed by the user. integer , intent ( inout ) :: inbvy !! initialization parameter which must be set !! to 1 the first time this routine is called, !! and must not be changed by the user. integer , intent ( inout ) :: inbvz !! initialization parameter which must be set !! to 1 the first time this routine is called, !! and must not be changed by the user. integer , intent ( inout ) :: inbvq !! initialization parameter which must be set !! to 1 the first time this routine is called, !! and must not be changed by the user. integer , intent ( inout ) :: inbvr !! initialization parameter which must be set !! to 1 the first time this routine is called, !! and must not be changed by the user. integer , intent ( inout ) :: inbvs !! initialization parameter which must be set !! to 1 the first time this routine is called, !! and must not be changed by the user. integer , intent ( inout ) :: iloy !! initialization parameter which must be set !! to 1 the first time this routine is called, !! and must not be changed by the user. integer , intent ( inout ) :: iloz !! initialization parameter which must be set !! to 1 the first time this routine is called, !! and must not be changed by the user. integer , intent ( inout ) :: iloq !! initialization parameter which must be set !! to 1 the first time this routine is called, !! and must not be changed by the user. integer , intent ( inout ) :: ilor !! initialization parameter which must be set !! to 1 the first time this routine is called, !! and must not be changed by the user. integer , intent ( inout ) :: ilos !! initialization parameter which must be set !! to 1 the first time this routine is called, !! and must not be changed by the user. logical , intent ( in ), optional :: extrap !! if extrapolation is allowed !! (if not present, default is False) real ( wp ), dimension ( ky , kz , kq , kr , ks ) :: temp1 real ( wp ), dimension ( kz , kq , kr , ks ) :: temp2 real ( wp ), dimension ( kq , kr , ks ) :: temp3 real ( wp ), dimension ( kr , ks ) :: temp4 real ( wp ), dimension ( ks ) :: temp5 real ( wp ), dimension ( 3 * max ( kx , ky , kz , kq , kr , ks )) :: work integer :: lefty , leftz , leftq , leftr , lefts ,& mflag ,& kcoly , kcolz , kcolq , kcolr , kcols ,& j , k , q , r , s f = 0.0_wp iflag = check_value ( xval , tx , 1 , extrap ); if ( iflag /= 0 ) return iflag = check_value ( yval , ty , 2 , extrap ); if ( iflag /= 0 ) return iflag = check_value ( zval , tz , 3 , extrap ); if ( iflag /= 0 ) return iflag = check_value ( qval , tq , 4 , extrap ); if ( iflag /= 0 ) return iflag = check_value ( rval , tr , 5 , extrap ); if ( iflag /= 0 ) return iflag = check_value ( sval , ts , 6 , extrap ); if ( iflag /= 0 ) return iflag = - 1 call dintrv ( ty , ny + ky , yval , iloy , lefty , mflag , extrap ); if ( mflag /= 0 ) return call dintrv ( tz , nz + kz , zval , iloz , leftz , mflag , extrap ); if ( mflag /= 0 ) return call dintrv ( tq , nq + kq , qval , iloq , leftq , mflag , extrap ); if ( mflag /= 0 ) return call dintrv ( tr , nr + kr , rval , ilor , leftr , mflag , extrap ); if ( mflag /= 0 ) return call dintrv ( ts , ns + ks , sval , ilos , lefts , mflag , extrap ); if ( mflag /= 0 ) return iflag = 0 ! x -> y, z, q, r, s kcols = lefts - ks do s = 1 , ks kcols = kcols + 1 kcolr = leftr - kr do r = 1 , kr kcolr = kcolr + 1 kcolq = leftq - kq do q = 1 , kq kcolq = kcolq + 1 kcolz = leftz - kz do k = 1 , kz kcolz = kcolz + 1 kcoly = lefty - ky do j = 1 , ky kcoly = kcoly + 1 call dbvalu ( tx , bcoef (:, kcoly , kcolz , kcolq , kcolr , kcols ),& nx , kx , idx , xval , inbvx , work , iflag ,& temp1 ( j , k , q , r , s ), extrap ) if ( iflag /= 0 ) return end do end do end do end do end do ! y -> z, q, r, s kcoly = lefty - ky + 1 do s = 1 , ks do r = 1 , kr do q = 1 , kq do k = 1 , kz call dbvalu ( ty ( kcoly :), temp1 (:, k , q , r , s ),& ky , ky , idy , yval , inbvy , work , iflag ,& temp2 ( k , q , r , s ), extrap ) if ( iflag /= 0 ) return end do end do end do end do ! z -> q, r, s kcolz = leftz - kz + 1 do s = 1 , ks do r = 1 , kr do q = 1 , kq call dbvalu ( tz ( kcolz :), temp2 (:, q , r , s ),& kz , kz , idz , zval , inbvz , work , iflag ,& temp3 ( q , r , s ), extrap ) if ( iflag /= 0 ) return end do end do end do ! q -> r, s kcolq = leftq - kq + 1 do s = 1 , ks do r = 1 , kr call dbvalu ( tq ( kcolq :), temp3 (:, r , s ),& kq , kq , idq , qval , inbvq , work , iflag ,& temp4 ( r , s ), extrap ) if ( iflag /= 0 ) return end do end do ! r -> s kcolr = leftr - kr + 1 do s = 1 , ks call dbvalu ( tr ( kcolr :), temp4 (:, s ),& kr , kr , idr , rval , inbvr , work , iflag ,& temp5 ( s ), extrap ) if ( iflag /= 0 ) return end do ! s kcols = lefts - ks + 1 call dbvalu ( ts ( kcols :), temp5 , ks , ks , ids , sval , inbvs , work , iflag , f , extrap ) end subroutine db6val !***************************************************************************************** !***************************************************************************************** !> !  Checks if the value is withing the range of the knot vectors. !  This is called by the various `db*val` routines. pure function check_value ( x , t , i , extrap ) result ( iflag ) implicit none integer :: iflag !! returns 0 if value is OK, otherwise returns `600+i` real ( wp ), intent ( in ) :: x !! the value to check integer , intent ( in ) :: i !! 1=x, 2=y, 3=z, 4=q, 5=r, 6=s real ( wp ), dimension (:), intent ( in ) :: t !! the knot vector logical , intent ( in ), optional :: extrap !! if extrapolation is allowed !! (if not present, default is False) logical :: allow_extrapolation !! if extrapolation is allowed if ( present ( extrap )) then allow_extrapolation = extrap else allow_extrapolation = . false . end if if ( allow_extrapolation ) then ! in this case all values are OK iflag = 0 else if ( x < t ( 1 ) . or . x > t ( size ( t ))) then iflag = 600 + i ! value out of bounds (601, 602, etc.) else iflag = 0 end if end if end function check_value !***************************************************************************************** !***************************************************************************************** !> !  Check the validity of the inputs to the `db*ink` routines. !  Prints warning message if there is an error, !  and also sets iflag and status_ok. ! !  Supports up to 6D: `x`,`y`,`z`,`q`,`r`,`s` ! !### Notes ! !  The code is new, but the logic is based on the original !  logic in the CMLIB routines `db2ink` and `db3ink`. ! !### History !  * Jacob Williams, 2/24/2015 : Created this routine. pure subroutine check_inputs ( routine ,& iknot ,& iflag ,& nx , ny , nz , nq , nr , ns ,& kx , ky , kz , kq , kr , ks ,& x , y , z , q , r , s ,& tx , ty , tz , tq , tr , ts ,& f1 , f2 , f3 , f4 , f5 , f6 ,& bcoef1 , bcoef2 , bcoef3 , bcoef4 , bcoef5 , bcoef6 ,& status_ok ) implicit none character ( len =* ), intent ( in ) :: routine integer , intent ( in ) :: iknot !! = 0 if the `INK` routine is computing the knots. integer , intent ( out ) :: iflag integer , intent ( in ), optional :: nx , ny , nz , nq , nr , ns integer , intent ( in ), optional :: kx , ky , kz , kq , kr , ks real ( wp ), dimension (:), intent ( in ), optional :: x , y , z , q , r , s real ( wp ), dimension (:), intent ( in ), optional :: tx , ty , tz , tq , tr , ts real ( wp ), dimension (:), intent ( in ), optional :: f1 , bcoef1 real ( wp ), dimension (:,:), intent ( in ), optional :: f2 , bcoef2 real ( wp ), dimension (:,:,:), intent ( in ), optional :: f3 , bcoef3 real ( wp ), dimension (:,:,:,:), intent ( in ), optional :: f4 , bcoef4 real ( wp ), dimension (:,:,:,:,:), intent ( in ), optional :: f5 , bcoef5 real ( wp ), dimension (:,:,:,:,:,:), intent ( in ), optional :: f6 , bcoef6 logical , intent ( out ) :: status_ok logical :: error status_ok = . false . if (( iknot < 0 ) . or . ( iknot > 1 )) then !write(error_unit,'(A,1X,I5)') & !    trim(routine)//' - iknot is out of range: ',iflag iflag = 2 else call check ( 'x' , nx , kx , x , tx ,[ 3 , 4 , 5 , 6 , 706 , 712 ], iflag , error ); if ( error ) return call check ( 'y' , ny , ky , y , ty ,[ 7 , 8 , 9 , 10 , 707 , 713 ], iflag , error ); if ( error ) return call check ( 'z' , nz , kz , z , tz ,[ 11 , 12 , 13 , 14 , 708 , 714 ], iflag , error ); if ( error ) return call check ( 'q' , nq , kq , q , tq ,[ 15 , 16 , 17 , 18 , 709 , 715 ], iflag , error ); if ( error ) return call check ( 'r' , nr , kr , r , tr ,[ 19 , 20 , 21 , 22 , 710 , 716 ], iflag , error ); if ( error ) return call check ( 's' , ns , ks , s , ts ,[ 23 , 24 , 25 , 26 , 711 , 717 ], iflag , error ); if ( error ) return if ( present ( x ) . and . present ( f1 ) . and . present ( bcoef1 )) then if ( size ( x ) /= size ( f1 , 1 )) then ; iflag = 700 ; return ; end if if ( size ( x ) /= size ( bcoef1 , 1 )) then ; iflag = 800 ; return ; end if end if if ( present ( x ) . and . present ( y ) . and . present ( f2 ) . and . present ( bcoef2 )) then if ( size ( x ) /= size ( f2 , 1 )) then ; iflag = 700 ; return ; end if if ( size ( y ) /= size ( f2 , 2 )) then ; iflag = 701 ; return ; end if if ( size ( x ) /= size ( bcoef2 , 1 )) then ; iflag = 800 ; return ; end if if ( size ( y ) /= size ( bcoef2 , 2 )) then ; iflag = 801 ; return ; end if end if if ( present ( x ) . and . present ( y ) . and . present ( z ) . and . present ( f3 ) . and . & present ( bcoef3 )) then if ( size ( x ) /= size ( f3 , 1 )) then ; iflag = 700 ; return ; end if if ( size ( y ) /= size ( f3 , 2 )) then ; iflag = 701 ; return ; end if if ( size ( z ) /= size ( f3 , 3 )) then ; iflag = 702 ; return ; end if if ( size ( x ) /= size ( bcoef3 , 1 )) then ; iflag = 800 ; return ; end if if ( size ( y ) /= size ( bcoef3 , 2 )) then ; iflag = 801 ; return ; end if if ( size ( z ) /= size ( bcoef3 , 3 )) then ; iflag = 802 ; return ; end if end if if ( present ( x ) . and . present ( y ) . and . present ( z ) . and . present ( q ) . and . & present ( f4 ) . and . present ( bcoef4 )) then if ( size ( x ) /= size ( f4 , 1 )) then ; iflag = 700 ; return ; end if if ( size ( y ) /= size ( f4 , 2 )) then ; iflag = 701 ; return ; end if if ( size ( z ) /= size ( f4 , 3 )) then ; iflag = 702 ; return ; end if if ( size ( q ) /= size ( f4 , 4 )) then ; iflag = 703 ; return ; end if if ( size ( x ) /= size ( bcoef4 , 1 )) then ; iflag = 800 ; return ; end if if ( size ( y ) /= size ( bcoef4 , 2 )) then ; iflag = 801 ; return ; end if if ( size ( z ) /= size ( bcoef4 , 3 )) then ; iflag = 802 ; return ; end if if ( size ( q ) /= size ( bcoef4 , 4 )) then ; iflag = 803 ; return ; end if end if if ( present ( x ) . and . present ( y ) . and . present ( z ) . and . present ( q ) . and . & present ( r ) . and . present ( f5 ) . and . present ( bcoef5 )) then if ( size ( x ) /= size ( f5 , 1 )) then ; iflag = 700 ; return ; end if if ( size ( y ) /= size ( f5 , 2 )) then ; iflag = 701 ; return ; end if if ( size ( z ) /= size ( f5 , 3 )) then ; iflag = 702 ; return ; end if if ( size ( q ) /= size ( f5 , 4 )) then ; iflag = 703 ; return ; end if if ( size ( r ) /= size ( f5 , 5 )) then ; iflag = 704 ; return ; end if if ( size ( x ) /= size ( bcoef5 , 1 )) then ; iflag = 800 ; return ; end if if ( size ( y ) /= size ( bcoef5 , 2 )) then ; iflag = 801 ; return ; end if if ( size ( z ) /= size ( bcoef5 , 3 )) then ; iflag = 802 ; return ; end if if ( size ( q ) /= size ( bcoef5 , 4 )) then ; iflag = 803 ; return ; end if if ( size ( r ) /= size ( bcoef5 , 5 )) then ; iflag = 804 ; return ; end if end if if ( present ( x ) . and . present ( y ) . and . present ( z ) . and . present ( q ) . and . & present ( r ) . and . present ( s ) . and . present ( f6 ) . and . present ( bcoef6 )) then if ( size ( x ) /= size ( f6 , 1 )) then ; iflag = 700 ; return ; end if if ( size ( y ) /= size ( f6 , 2 )) then ; iflag = 701 ; return ; end if if ( size ( z ) /= size ( f6 , 3 )) then ; iflag = 702 ; return ; end if if ( size ( q ) /= size ( f6 , 4 )) then ; iflag = 703 ; return ; end if if ( size ( r ) /= size ( f6 , 5 )) then ; iflag = 704 ; return ; end if if ( size ( s ) /= size ( f6 , 6 )) then ; iflag = 705 ; return ; end if if ( size ( x ) /= size ( bcoef6 , 1 )) then ; iflag = 800 ; return ; end if if ( size ( y ) /= size ( bcoef6 , 2 )) then ; iflag = 801 ; return ; end if if ( size ( z ) /= size ( bcoef6 , 3 )) then ; iflag = 802 ; return ; end if if ( size ( q ) /= size ( bcoef6 , 4 )) then ; iflag = 803 ; return ; end if if ( size ( r ) /= size ( bcoef6 , 5 )) then ; iflag = 804 ; return ; end if if ( size ( s ) /= size ( bcoef6 , 6 )) then ; iflag = 805 ; return ; end if end if status_ok = . true . iflag = 0 end if contains pure subroutine check ( s , n , k , x , t , ierrs , iflag , error ) !! check `t`,`x`,`n`,`k` for validity implicit none character ( len = 1 ), intent ( in ) :: s !! coordinate string: 'x','y','z','q','r','s' integer , intent ( in ) , optional :: n !! size of `x` integer , intent ( in ) , optional :: k !! order real ( wp ), dimension (:), intent ( in ), optional :: x !! abcissae vector real ( wp ), dimension (:), intent ( in ), optional :: t !! knot vector `size(n+k)` integer , dimension (:), intent ( in ) :: ierrs !! int error codes for `n`,`k`,`x`,`t`, !! `size(x)`,`size(t)` checks integer , intent ( out ) :: iflag !! status return code logical , intent ( out ) :: error !! true if there was an error if ( present ( n ) . and . present ( k ) . and . present ( x ) . and . present ( t )) then call check_n ( 'n' // s , n , x ,[ ierrs ( 1 ), ierrs ( 5 )], iflag , error ); if ( error ) return call check_k ( 'k' // s , k , n , ierrs ( 2 ), iflag , error ); if ( error ) return call check_x ( s , n , x , ierrs ( 3 ), iflag , error ); if ( error ) return if ( iknot /= 0 ) then call check_t ( 't' // s , n , k , t ,[ ierrs ( 4 ), ierrs ( 6 )], iflag , error ); if ( error ) return end if end if end subroutine check pure subroutine check_n ( s , n , x , ierr , iflag , error ) implicit none character ( len =* ), intent ( in ) :: s integer , intent ( in ) :: n real ( wp ), dimension (:), intent ( in ) :: x !! abcissae vector integer , dimension ( 2 ), intent ( in ) :: ierr !! [n<3 check, size(x)==n check] integer , intent ( out ) :: iflag !! status return code logical , intent ( out ) :: error if ( n < 3 ) then !write(error_unit,'(A,1X,I5)') & !    trim(routine)//' - '//trim(s)//' is out of range: ',n iflag = ierr ( 1 ) error = . true . else if ( size ( x ) /= n ) then !write(error_unit,'(A,1X,I5)') & !    trim(routine)//' - '//trim(s)//' is not abscissa vector size' iflag = ierr ( 2 ) error = . true . else error = . false . end if end if end subroutine check_n pure subroutine check_k ( s , k , n , ierr , iflag , error ) implicit none character ( len =* ), intent ( in ) :: s integer , intent ( in ) :: k integer , intent ( in ) :: n integer , intent ( in ) :: ierr integer , intent ( out ) :: iflag !! status return code logical , intent ( out ) :: error if (( k < 2 ) . or . ( k >= n )) then !write(error_unit,'(A,1X,I5)') & !    trim(routine)//' - '//trim(s)//' is out of range: ',k iflag = ierr error = . true . else error = . false . end if end subroutine check_k pure subroutine check_x ( s , n , x , ierr , iflag , error ) implicit none character ( len =* ), intent ( in ) :: s integer , intent ( in ) :: n real ( wp ), dimension (:), intent ( in ) :: x integer , intent ( in ) :: ierr integer , intent ( out ) :: iflag !! status return code logical , intent ( out ) :: error integer :: i error = . true . do i = 2 , n if ( x ( i ) <= x ( i - 1 )) then iflag = ierr !write(error_unit,'(A)') trim(routine)//' - '//trim(s)//& !            ' array must be strictly increasing' return end if end do error = . false . end subroutine check_x pure subroutine check_t ( s , n , k , t , ierr , iflag , error ) implicit none character ( len =* ), intent ( in ) :: s integer , intent ( in ) :: n integer , intent ( in ) :: k real ( wp ), dimension (:), intent ( in ) :: t integer , dimension ( 2 ), intent ( in ) :: ierr !! [non-decreasing check, size check] integer , intent ( out ) :: iflag !! status return code logical , intent ( out ) :: error integer :: i error = . true . if ( size ( t ) /= ( n + k )) then !write(error_unit,'(A)') trim(routine)//' - '//trim(s)//& !            ' array is not the correct size' iflag = ierr ( 2 ) return end if do i = 2 , n + k if ( t ( i ) < t ( i - 1 )) then iflag = ierr ( 1 ) !write(error_unit,'(A)') trim(routine)//' - '//trim(s)//& !            ' array must be non-decreasing' return end if end do error = . false . end subroutine check_t end subroutine check_inputs !***************************************************************************************** !***************************************************************************************** !> !  dbknot chooses a knot sequence for interpolation of order k at the !  data points x(i), i=1,..,n.  the n+k knots are placed in the array !  t.  k knots are placed at each endpoint and not-a-knot end !  conditions are used.  the remaining knots are placed at data points !  if n is even and between data points if n is odd.  the rightmost !  knot is shifted slightly to the right to insure proper interpolation !  at x(n) (see page 350 of the reference). ! !### History !  * Jacob Williams, 2/24/2015 : Refactored this routine. pure subroutine dbknot ( x , n , k , t ) implicit none integer , intent ( in ) :: n integer , intent ( in ) :: k real ( wp ), dimension ( n ), intent ( in ) :: x real ( wp ), dimension (:), intent ( out ) :: t integer :: i , j , ipj , npj , ip1 , jstrt real ( wp ) :: rnot !put k knots at each endpoint !(shift right endpoints slightly -- see pg 350 of reference) rnot = x ( n ) + 0.1_wp * ( x ( n ) - x ( n - 1 ) ) do j = 1 , k t ( j ) = x ( 1 ) npj = n + j t ( npj ) = rnot end do !distribute remaining knots if ( mod ( k , 2 ) == 1 ) then !case of odd k --  knots between data points i = ( k - 1 ) / 2 - k ip1 = i + 1 jstrt = k + 1 do j = jstrt , n ipj = i + j t ( j ) = 0.5_wp * ( x ( ipj ) + x ( ipj + 1 ) ) end do else !case of even k --  knots at data points i = ( k / 2 ) - k jstrt = k + 1 do j = jstrt , n ipj = i + j t ( j ) = x ( ipj ) end do end if end subroutine dbknot !***************************************************************************************** !***************************************************************************************** !> !  dbtpcf computes b-spline interpolation coefficients for nf sets !  of data stored in the columns of the array fcn. the b-spline !  coefficients are stored in the rows of bcoef however. !  each interpolation is based on the n abcissa stored in the !  array x, and the n+k knots stored in the array t. the order !  of each interpolation is k. ! !### History !  * Jacob Williams, 2/24/2015 : Refactored this routine. pure subroutine dbtpcf ( x , n , fcn , ldf , nf , t , k , bcoef , work , iflag ) integer , intent ( in ) :: n integer , intent ( in ) :: nf integer , intent ( in ) :: ldf integer , intent ( in ) :: k real ( wp ), dimension ( n ), intent ( in ) :: x real ( wp ), dimension ( ldf , nf ), intent ( in ) :: fcn real ( wp ), dimension ( * ), intent ( in ) :: t real ( wp ), dimension ( nf , n ), intent ( out ) :: bcoef real ( wp ), dimension ( * ), intent ( out ) :: work !! work array of size >= `2*k*(n+1)` integer , intent ( out ) :: iflag !!   0: no errors !! 301: n should be >0 integer :: i , j , m1 , m2 , iq , iw ! check for null input if ( nf > 0 ) then ! partition work array m1 = k - 1 m2 = m1 + k iq = 1 + n iw = iq + m2 * n + 1 ! compute b-spline coefficients ! first data set call dbintk ( x , fcn , t , n , k , work , work ( iq ), work ( iw ), iflag ) if ( iflag == 0 ) then do i = 1 , n bcoef ( 1 , i ) = work ( i ) end do !  all remaining data sets by back-substitution if ( nf == 1 ) return do j = 2 , nf do i = 1 , n work ( i ) = fcn ( i , j ) end do call dbnslv ( work ( iq ), m2 , n , m1 , m1 , work ) do i = 1 , n bcoef ( j , i ) = work ( i ) end do end do end if else !write(error_unit,'(A)') 'dbtpcf - n should be >0' iflag = 301 end if end subroutine dbtpcf !***************************************************************************************** !***************************************************************************************** !> !  dbintk produces the b-spline coefficients, bcoef, of the !  b-spline of order k with knots t(i), i=1,...,n+k, which !  takes on the value y(i) at x(i), i=1,...,n.  the spline or !  any of its derivatives can be evaluated by calls to [[dbvalu]]. ! !  the i-th equation of the linear system a*bcoef = b for the !  coefficients of the interpolant enforces interpolation at !  x(i), i=1,...,n.  hence, b(i) = y(i), for all i, and a is !  a band matrix with 2k-1 bands if a is invertible.  the matrix !  a is generated row by row and stored, diagonal by diagonal, !  in the rows of q, with the main diagonal going into row k. !  the banded system is then solved by a call to dbnfac (which !  constructs the triangular factorization for a and stores it !  again in q), followed by a call to dbnslv (which then !  obtains the solution bcoef by substitution).  dbnfac does no !  pivoting, since the total positivity of the matrix a makes !  this unnecessary.  the linear system to be solved is !  (theoretically) invertible if and only if !          t(i) < x(i) < t(i+k),        for all i. !  equality is permitted on the left for i=1 and on the right !  for i=n when k knots are used at x(1) or x(n).  otherwise, !  violation of this condition is certain to lead to an error. ! !# Error conditions ! !  * improper input !  * singular system of equations ! !### History !  * splint written by carl de boor [5] !  * dbintk author: amos, d. e., (snla) : date written 800901 !  * revision date 820801 !  * 000330 modified array declarations. (jec) !  * Jacob Williams, 5/10/2015 : converted to free-form Fortran. pure subroutine dbintk ( x , y , t , n , k , bcoef , q , work , iflag ) implicit none integer , intent ( in ) :: n !! number of data points, n >= k real ( wp ), dimension ( n ), intent ( in ) :: x !! vector of length n containing data point abscissa !! in strictly increasing order. real ( wp ), dimension ( n ), intent ( in ) :: y !! corresponding vector of length n containing data !! point ordinates. real ( wp ), dimension ( * ), intent ( in ) :: t !! knot vector of length n+k !! since t(1),..,t(k) <= x(1) and t(n+1),..,t(n+k) !! >= x(n), this leaves only n-k knots (not !! necessarily x(i) values) interior to (x(1),x(n)) integer , intent ( in ) :: k !! order of the spline, k >= 1 real ( wp ), dimension ( n ), intent ( out ) :: bcoef !! a vector of length n containing the b-spline coefficients real ( wp ), dimension ( * ), intent ( out ) :: q !! a work vector of length (2*k-1)*n, containing !! the triangular factorization of the coefficient !! matrix of the linear system being solved.  the !! coefficients for the interpolant of an !! additional data set (x(i),yy(i)), i=1,...,n !! with the same abscissa can be obtained by loading !! yy into bcoef and then executing !! call dbnslv(q,2k-1,n,k-1,k-1,bcoef) real ( wp ), dimension ( * ), intent ( out ) :: work !! work vector of length 2*k integer , intent ( out ) :: iflag !! *   0: no errors. !! * 100: k does not satisfy k>=1. !! * 101: n does not satisfy n>=k. !! * 102: x(i) does not satisfy x(i)<x(i+1) for some i. !! * 103: some abscissa was not in the support of the. !! corresponding basis function and the system is singular. !! * 104: the system of solver detects a singular system. !! although the theoretical conditions for a solution were satisfied. integer :: iwork , i , ilp1mx , j , jj , km1 , kpkm2 , left , lenq , np1 real ( wp ) :: xi logical :: found if ( k < 1 ) then !write(error_unit,'(A)') 'dbintk - k does not satisfy k>=1' iflag = 100 return end if if ( n < k ) then !write(error_unit,'(A)') 'dbintk - n does not satisfy n>=k' iflag = 101 return end if jj = n - 1 if ( jj /= 0 ) then do i = 1 , jj if ( x ( i ) >= x ( i + 1 )) then !write(error_unit,'(A)') 'dbintk - x(i) does not satisfy x(i)<x(i+1) for some i' iflag = 102 return end if end do end if np1 = n + 1 km1 = k - 1 kpkm2 = 2 * km1 left = k ! zero out all entries of q lenq = n * ( k + km1 ) do i = 1 , lenq q ( i ) = 0.0_wp end do ! loop over i to construct the n interpolation equations do i = 1 , n xi = x ( i ) ilp1mx = min ( i + k , np1 ) ! find left in the closed interval (i,i+k-1) such that !         t(left) <= x(i) < t(left+1) ! matrix is singular if this is not possible left = max ( left , i ) if ( xi < t ( left )) then !write(error_unit,'(A)') 'dbintk - some abscissa was not in the support of the'//& !             ' corresponding basis function and the system is singular' iflag = 103 return end if found = . false . do found = ( xi < t ( left + 1 )) if ( found ) exit left = left + 1 if ( left >= ilp1mx ) exit end do if (. not . found ) then left = left - 1 if ( xi > t ( left + 1 )) then !write(error_unit,'(A)') 'dbintk - some abscissa was not in the support of the'//& !             ' corresponding basis function and the system is singular' iflag = 103 return end if end if ! the i-th equation enforces interpolation at xi, hence ! a(i,j) = b(j,k,t)(xi), all j. only the  k  entries with  j = ! left-k+1,...,left actually might be nonzero. these  k  numbers ! are returned, in  bcoef (used for temp.storage here), by the ! following call dbspvn ( t , k , k , 1 , xi , left , bcoef , work , iwork , iflag ) if ( iflag /= 0 ) return ! we therefore want  bcoef(j) = b(left-k+j)(xi) to go into ! a(i,left-k+j), i.e., into  q(i-(left+j)+2*k,(left+j)-k) since ! a(i+j,j)  is to go into  q(i+k,j), all i,j,  if we consider  q ! as a two-dim. array , with  2*k-1  rows (see comments in ! dbnfac). in the present program, we treat  q  as an equivalent ! one-dimensional array (because of fortran restrictions on ! dimension statements) . we therefore want  bcoef(j) to go into ! entry !     i -(left+j) + 2*k + ((left+j) - k-1)*(2*k-1) !            = i-left+1 + (left -k)*(2*k-1) + (2*k-2)*j ! of q. jj = i - left + 1 + ( left - k ) * ( k + km1 ) do j = 1 , k jj = jj + kpkm2 q ( jj ) = bcoef ( j ) end do end do ! obtain factorization of a, stored again in q. call dbnfac ( q , k + km1 , n , km1 , km1 , iflag ) if ( iflag == 1 ) then !success ! solve  a*bcoef = y  by backsubstitution do i = 1 , n bcoef ( i ) = y ( i ) end do call dbnslv ( q , k + km1 , n , km1 , km1 , bcoef ) iflag = 0 else !failure !write(error_unit,'(A)') 'dbintk - the system of solver detects a singular system'//& !             ' although the theoretical conditions for a solution were satisfied' iflag = 104 end if end subroutine dbintk !***************************************************************************************** !***************************************************************************************** !> !  Returns in w the LU-factorization (without pivoting) of the banded !  matrix a of order nrow with (nbandl + 1 + nbandu) bands or diagonals !  in the work array w . ! !  gauss elimination without pivoting is used. the routine is !  intended for use with matrices a which do not require row inter- !  changes during factorization, especially for the totally !  positive matrices which occur in spline calculations. !  the routine should not be used for an arbitrary banded matrix. ! !### Work array ! ! **Input** ! !        w array of size (nroww,nrow) contains the interesting !        part of a banded matrix  a , with the diagonals or bands of  a !        stored in the rows of  w , while columns of  a  correspond to !        columns of  w . this is the storage mode used in  linpack  and !        results in efficient innermost loops. !           explicitly,  a  has  nbandl  bands below the diagonal !                            +     1     (main) diagonal !                            +   nbandu  bands above the diagonal !        and thus, with    middle = nbandu + 1, !          a(i+j,j)  is in  w(i+middle,j)  for i=-nbandu,...,nbandl !                                              j=1,...,nrow . !        for example, the interesting entries of a (1,2)-banded matrix !        of order  9  would appear in the first  1+1+2 = 4  rows of  w !        as follows. !                          13 24 35 46 57 68 79 !                       12 23 34 45 56 67 78 89 !                    11 22 33 44 55 66 77 88 99 !                    21 32 43 54 65 76 87 98 ! !        all other entries of  w  not identified in this way with an en- !        try of  a  are never referenced . ! ! **Output** ! !  * if  iflag = 1, then !        w contains the lu-factorization of  a  into a unit lower triangu- !        lar matrix  l  and an upper triangular matrix  u (both banded) !        and stored in customary fashion over the corresponding entries !        of  a . this makes it possible to solve any particular linear !        system  a*x = b  for  x  by a !              call dbnslv ( w, nroww, nrow, nbandl, nbandu, b ) !        with the solution x  contained in  b  on return . !  * if  iflag = 2, then !        one of  nrow-1, nbandl,nbandu failed to be nonnegative, or else !        one of the potential pivots was found to be zero indicating !        that  a  does not have an lu-factorization. this implies that !        a  is singular in case it is totally positive . ! !### History !  * banfac written by carl de boor [5] !  * dbnfac from CMLIB [1] !  * Jacob Williams, 5/10/2015 : converted to free-form Fortran. pure subroutine dbnfac ( w , nroww , nrow , nbandl , nbandu , iflag ) integer , intent ( in ) :: nroww !! row dimension of the work array w. must be >= nbandl + 1 + nbandu. integer , intent ( in ) :: nrow !! matrix order integer , intent ( in ) :: nbandl !! number of bands of a below the main diagonal integer , intent ( in ) :: nbandu !! number of bands of a above the main diagonal integer , intent ( out ) :: iflag !! indicating success(=1) or failure (=2) real ( wp ), dimension ( nroww , nrow ), intent ( inout ) :: w !! work array. See header for details. integer :: i , ipk , j , jmax , k , kmax , middle , midmk , nrowm1 real ( wp ) :: factor , pivot iflag = 1 middle = nbandu + 1 ! w(middle,.) contains the main diagonal of a. nrowm1 = nrow - 1 if ( nrowm1 < 0 ) then iflag = 2 return else if ( nrowm1 == 0 ) then if ( w ( middle , nrow ) == 0.0_wp ) iflag = 2 return end if if ( nbandl <= 0 ) then ! a is upper triangular. check that diagonal is nonzero . do i = 1 , nrowm1 if ( w ( middle , i ) == 0.0_wp ) then iflag = 2 return end if end do if ( w ( middle , nrow ) == 0.0_wp ) iflag = 2 return end if if ( nbandu <= 0 ) then ! a is lower triangular. check that diagonal is nonzero and ! divide each column by its diagonal. do i = 1 , nrowm1 pivot = w ( middle , i ) if ( pivot == 0.0_wp ) then iflag = 2 return end if jmax = min ( nbandl , nrow - i ) do j = 1 , jmax w ( middle + j , i ) = w ( middle + j , i ) / pivot end do end do return end if ! a is not just a triangular matrix. construct lu factorization do i = 1 , nrowm1 ! w(middle,i)  is pivot for i-th step . pivot = w ( middle , i ) if ( pivot == 0.0_wp ) then iflag = 2 return end if ! jmax is the number of (nonzero) entries in column i ! below the diagonal. jmax = min ( nbandl , nrow - i ) ! divide each entry in column i below diagonal by pivot. do j = 1 , jmax w ( middle + j , i ) = w ( middle + j , i ) / pivot end do ! kmax is the number of (nonzero) entries in row i to ! the right of the diagonal. kmax = min ( nbandu , nrow - i ) ! subtract a(i,i+k)*(i-th column) from (i+k)-th column ! (below row i). do k = 1 , kmax ipk = i + k midmk = middle - k factor = w ( midmk , ipk ) do j = 1 , jmax w ( midmk + j , ipk ) = w ( midmk + j , ipk ) - w ( middle + j , i ) * factor end do end do end do ! check the last diagonal entry. if ( w ( middle , nrow ) == 0.0_wp ) iflag = 2 end subroutine dbnfac !***************************************************************************************** !***************************************************************************************** !> !  Companion routine to [[dbnfac]]. it returns the solution x of the !  linear system a*x = b in place of b, given the lu-factorization !  for a in the work array w from dbnfac. ! !  (with  a = l*u , as stored in w), the unit lower triangular system !   l(u*x) = b  is solved for  y = u*x , and y stored in b. then the !  upper triangular system u*x = y  is solved for x. the calculations !  are so arranged that the innermost loops stay within columns. ! !### History !  * banslv written by carl de boor [5] !  * dbnslv from SLATEC library [1] !  * Jacob Williams, 5/10/2015 : converted to free-form Fortran. pure subroutine dbnslv ( w , nroww , nrow , nbandl , nbandu , b ) integer , intent ( in ) :: nroww !! describes the lu-factorization of a banded matrix a of order `nrow` as constructed in [[dbnfac]]. integer , intent ( in ) :: nrow !! describes the lu-factorization of a banded matrix a of order `nrow` as constructed in [[dbnfac]]. integer , intent ( in ) :: nbandl !! describes the lu-factorization of a banded matrix a of order `nrow` as constructed in [[dbnfac]]. integer , intent ( in ) :: nbandu !! describes the lu-factorization of a banded matrix a of order `nrow` as constructed in [[dbnfac]]. real ( wp ), dimension ( nroww , nrow ), intent ( in ) :: w !! describes the lu-factorization of a banded matrix a of order `nrow` as constructed in [[dbnfac]]. real ( wp ), dimension ( nrow ), intent ( inout ) :: b !! * **in**: right side of the system to be solved !! * **out**: the solution x, of order nrow integer :: i , j , jmax , middle , nrowm1 middle = nbandu + 1 if ( nrow /= 1 ) then nrowm1 = nrow - 1 if ( nbandl /= 0 ) then ! forward pass ! for i=1,2,...,nrow-1, subtract right side(i)*(i-th column of l) !                       from right side (below i-th row). do i = 1 , nrowm1 jmax = min ( nbandl , nrow - i ) do j = 1 , jmax b ( i + j ) = b ( i + j ) - b ( i ) * w ( middle + j , i ) end do end do end if ! backward pass ! for i=nrow,nrow-1,...,1, divide right side(i) by i-th diagonal !                          entry of u, then subtract right side(i)*(i-th column !                          of u) from right side (above i-th row). if ( nbandu <= 0 ) then ! a is lower triangular. do i = 1 , nrow b ( i ) = b ( i ) / w ( 1 , i ) end do return end if i = nrow do b ( i ) = b ( i ) / w ( middle , i ) jmax = min ( nbandu , i - 1 ) do j = 1 , jmax b ( i - j ) = b ( i - j ) - b ( i ) * w ( middle - j , i ) end do i = i - 1 if ( i <= 1 ) exit end do end if b ( 1 ) = b ( 1 ) / w ( middle , 1 ) end subroutine dbnslv !***************************************************************************************** !***************************************************************************************** !> !  Calculates the value of all (possibly) nonzero basis !  functions at x of order max(jhigh,(j+1)*(index-1)), where t(k) !  <= x <= t(n+1) and j=iwork is set inside the routine on !  the first call when index=1.  ileft is such that t(ileft) <= !  x < t(ileft+1).  a call to dintrv(t,n+1,x,ilo,ileft,mflag) !  produces the proper ileft.  dbspvn calculates using the basic !  algorithm needed in dbspvd.  if only basis functions are !  desired, setting jhigh=k and index=1 can be faster than !  calling dbspvd, but extra coding is required for derivatives !  (index=2) and dbspvd is set up for this purpose. ! !  left limiting values are set up as described in dbspvd. ! !### Error Conditions ! !  * improper input ! !### History !  * bsplvn written by carl de boor [5] !  * dbspvn author: amos, d. e., (snla) : date written 800901 !  * revision date 820801 !  * 000330 modified array declarations.  (jec) !  * Jacob Williams, 2/24/2015 : extensive refactoring of CMLIB routine. pure subroutine dbspvn ( t , jhigh , k , index , x , ileft , vnikx , work , iwork , iflag ) implicit none real ( wp ), dimension ( * ), intent ( in ) :: t !! knot vector of length n+k, where !! n = number of b-spline basis functions !! n = sum of knot multiplicities-k !! dimension t(ileft+jhigh) integer , intent ( in ) :: jhigh !! order of b-spline, 1 <= jhigh <= k integer , intent ( in ) :: k !! highest possible order integer , intent ( in ) :: index !! index = 1 gives basis functions of order jhigh !!       = 2 denotes previous entry with work, iwork !!         values saved for subsequent calls to !!         dbspvn. real ( wp ), intent ( in ) :: x !! argument of basis functions, t(k) <= x <= t(n+1) integer , intent ( in ) :: ileft !! largest integer such that t(ileft) <= x < t(ileft+1) real ( wp ), dimension ( k ), intent ( out ) :: vnikx !! vector of length k for spline values. real ( wp ), dimension ( * ), intent ( out ) :: work !! a work vector of length 2*k integer , intent ( out ) :: iwork !! a work parameter.  both work and iwork contain !! information necessary to continue for index = 2. !! when index = 1 exclusively, these are scratch !! variables and can be used for other purposes. integer , intent ( out ) :: iflag !!   0: no errors !! 201: k does not satisfy k>=1 !! 202: jhigh does not satisfy 1<=jhigh<=k !! 203: index is not 1 or 2 !! 204: x does not satisfy t(ileft)<=x<=t(ileft+1) integer :: imjp1 , ipj , jp1 , jp1ml , l real ( wp ) :: vm , vmprev ! content of j, deltam, deltap is expected unchanged between calls. ! work(i) = deltap(i), ! work(k+i) = deltam(i), i = 1,k if ( k < 1 ) then !write(error_unit,'(A)') 'dbspvn - k does not satisfy k>=1' iflag = 201 return end if if ( jhigh > k . or . jhigh < 1 ) then !write(error_unit,'(A)') 'dbspvn - jhigh does not satisfy 1<=jhigh<=k' iflag = 202 return end if if ( index < 1 . or . index > 2 ) then !write(error_unit,'(A)') 'dbspvn - index is not 1 or 2' iflag = 203 return end if if ( x < t ( ileft ) . or . x > t ( ileft + 1 )) then !write(error_unit,'(A)') 'dbspvn - x does not satisfy t(ileft)<=x<=t(ileft+1)' iflag = 204 return end if iflag = 0 if ( index == 1 ) then iwork = 1 vnikx ( 1 ) = 1.0_wp if ( iwork >= jhigh ) return end if do ipj = ileft + iwork work ( iwork ) = t ( ipj ) - x imjp1 = ileft - iwork + 1 work ( k + iwork ) = x - t ( imjp1 ) vmprev = 0.0_wp jp1 = iwork + 1 do l = 1 , iwork jp1ml = jp1 - l vm = vnikx ( l ) / ( work ( l ) + work ( k + jp1ml )) vnikx ( l ) = vm * work ( l ) + vmprev vmprev = vm * work ( k + jp1ml ) end do vnikx ( jp1 ) = vmprev iwork = jp1 if ( iwork >= jhigh ) exit end do end subroutine dbspvn !***************************************************************************************** !***************************************************************************************** !> !  Evaluates the b-representation (`t`,`a`,`n`,`k`) of a b-spline !  at `x` for the function value on `ideriv=0` or any of its !  derivatives on `ideriv=1,2,...,k-1`.  right limiting values !  (right derivatives) are returned except at the right end !  point `x=t(n+1)` where left limiting values are computed.  the !  spline is defined on `t(k)`  \\le  `x`  \\le  `t(n+1)`. !  dbvalu returns a fatal error message when `x` is outside of this !  interval. ! !  To compute left derivatives or left limiting values at a !  knot `t(i)`, replace `n` by `i-1` and set `x=t(i), i=k+1,n+1`. ! !### Error Conditions ! !  * improper input ! !### History !  * bvalue written by carl de boor [5] !  * dbvalu author: amos, d. e., (snla) : date written 800901 !  * revision date 820801 !  * 000330 modified array declarations.  (jec) !  * Jacob Williams, 2/24/2015 : extensive refactoring of CMLIB routine. pure subroutine dbvalu ( t , a , n , k , ideriv , x , inbv , work , iflag , val , extrap ) implicit none real ( wp ), intent ( out ) :: val !! the interpolated value integer , intent ( in ) :: n !! number of b-spline coefficients. !! (sum of knot multiplicities-`k`) real ( wp ), dimension (:), intent ( in ) :: t !! knot vector of length `n+k` real ( wp ), dimension ( n ), intent ( in ) :: a !! b-spline coefficient vector of length `n` integer , intent ( in ) :: k !! order of the b-spline, `k >= 1` integer , intent ( in ) :: ideriv !! order of the derivative, `0 <= ideriv <= k-1`. !! `ideriv = 0` returns the b-spline value real ( wp ), intent ( in ) :: x !! argument, `t(k) <= x <= t(n+1)` integer , intent ( inout ) :: inbv !! an initialization parameter which must be set !! to 1 the first time [[dbvalu]] is called. !! `inbv` contains information for efficient processing !! after the initial call and `inbv` must not !! be changed by the user.  distinct splines require !! distinct `inbv` parameters. real ( wp ), dimension (:), intent ( inout ) :: work !! work vector of length at least `3*k` integer , intent ( out ) :: iflag !! status flag: !! !! * 0: no errors !! * 401: `k` does not satisfy `k`  \\ge  1 !! * 402: `n` does not satisfy `n`  \\ge  `k` !! * 403: `ideriv` does not satisfy 0  \\le  `ideriv` < `k` !! * 404: `x` is not greater than or equal to `t(k)` !! * 405: `x` is not less than or equal to `t(n+1)` !! * 406: a left limiting value cannot be obtained at `t(k)` logical , intent ( in ), optional :: extrap !! if extrapolation is allowed !! (if not present, default is False) integer :: i , iderp1 , ihi , ihmkmj , ilo , imk , imkpj , ipj ,& ip1 , ip1mj , j , jj , j1 , j2 , kmider , kmj , km1 , kpk , mflag real ( wp ) :: fkmj real ( wp ) :: xt logical :: extrapolation_allowed !! if extrapolation is allowed if ( present ( extrap )) then extrapolation_allowed = extrap else extrapolation_allowed = . false . end if ! make a temp copy of x (for computing the ! interval) in case extrapolation is allowed if ( extrapolation_allowed ) then if ( x < t ( 1 )) then xt = t ( 1 ) else if ( x > t ( n + k )) then xt = t ( n + k ) else xt = x end if else xt = x end if val = 0.0_wp if ( k < 1 ) then iflag = 401 ! dbvalu - k does not satisfy k>=1 return end if if ( n < k ) then iflag = 402 ! dbvalu - n does not satisfy n>=k return end if if ( ideriv < 0 . or . ideriv >= k ) then iflag = 403 ! dbvalu - ideriv does not satisfy 0<=ideriv<k return end if kmider = k - ideriv ! find *i* in (k,n) such that t(i) <= x < t(i+1) ! (or, <= t(i+1) if t(i) < t(i+1) = t(n+1)). km1 = k - 1 call dintrv ( t , n + 1 , xt , inbv , i , mflag ) if ( xt < t ( k )) then iflag = 404 ! dbvalu - x is not greater than or equal to t(k) return end if if ( mflag /= 0 ) then if ( xt > t ( i )) then iflag = 405 ! dbvalu - x is not less than or equal to t(n+1) return end if do if ( i == k ) then iflag = 406 ! dbvalu - a left limiting value cannot be obtained at t(k) return end if i = i - 1 if ( xt /= t ( i )) exit end do end if ! difference the coefficients *ideriv* times ! work(i) = aj(i), work(k+i) = dp(i), work(k+k+i) = dm(i), i=1.k imk = i - k do j = 1 , k imkpj = imk + j work ( j ) = a ( imkpj ) end do if ( ideriv /= 0 ) then do j = 1 , ideriv kmj = k - j fkmj = real ( kmj , wp ) do jj = 1 , kmj ihi = i + jj ihmkmj = ihi - kmj work ( jj ) = ( work ( jj + 1 ) - work ( jj )) / ( t ( ihi ) - t ( ihmkmj )) * fkmj end do end do end if ! compute value at *x* in (t(i),(t(i+1)) of ideriv-th derivative, ! given its relevant b-spline coeff. in aj(1),...,aj(k-ideriv). if ( ideriv /= km1 ) then ip1 = i + 1 kpk = k + k j1 = k + 1 j2 = kpk + 1 do j = 1 , kmider ipj = i + j work ( j1 ) = t ( ipj ) - x ip1mj = ip1 - j work ( j2 ) = x - t ( ip1mj ) j1 = j1 + 1 j2 = j2 + 1 end do iderp1 = ideriv + 1 do j = iderp1 , km1 kmj = k - j ilo = kmj do jj = 1 , kmj work ( jj ) = ( work ( jj + 1 ) * work ( kpk + ilo ) + work ( jj ) * & work ( k + jj )) / ( work ( kpk + ilo ) + work ( k + jj )) ilo = ilo - 1 end do end do end if iflag = 0 val = work ( 1 ) end subroutine dbvalu !***************************************************************************************** !***************************************************************************************** !> !  Computes the largest integer `ileft` in 1  \\le  `ileft`  \\le  `lxt` !  such that `xt(ileft)`  \\le  `x` where `xt(*)` is a subdivision of !  the `x` interval. !  precisely, ! !```fortran !         if            x < xt(1)   then ileft=1,   mflag=-1 !         if   xt(i) <= x < xt(i+1) then ileft=i,   mflag=0 !         if xt(lxt) <= x           then ileft=lxt, mflag=1 !``` ! !  that is, when multiplicities are present in the break point !  to the left of `x`, the largest index is taken for `ileft`. ! !### History !  * interv written by carl de boor [5] !  * dintrv author: amos, d. e., (snla) : date written 800901 !  * revision date 820801 !  * Jacob Williams, 2/24/2015 : updated to free-form Fortran. !  * Jacob Williams, 2/17/2016 : additional refactoring (eliminated GOTOs). !  * Jacob Williams, 3/4/2017 : added extrapolation option. pure subroutine dintrv ( xt , lxt , xx , ilo , ileft , mflag , extrap ) implicit none integer , intent ( in ) :: lxt !! length of the `xt` vector real ( wp ), dimension ( lxt ), intent ( in ) :: xt !! a knot or break point vector of length `lxt` real ( wp ), intent ( in ) :: xx !! argument integer , intent ( inout ) :: ilo !! an initialization parameter which must be set !! to 1 the first time the spline array `xt` is !! processed by dintrv. `ilo` contains information for !! efficient processing after the initial call and `ilo` !! must not be changed by the user.  distinct splines !! require distinct `ilo` parameters. integer , intent ( out ) :: ileft !! largest integer satisfying `xt(ileft)`  \\le  `x` integer , intent ( out ) :: mflag !! signals when `x` lies out of bounds logical , intent ( in ), optional :: extrap !! if extrapolation is allowed !! (if not present, default is False) integer :: ihi , istep , middle real ( wp ) :: x x = get_temp_x_for_extrap ( xx , xt , extrap ) ihi = ilo + 1 if ( ihi >= lxt ) then if ( x >= xt ( lxt ) ) then mflag = 1 ileft = lxt return end if if ( lxt <= 1 ) then mflag = - 1 ileft = 1 return end if ilo = lxt - 1 ihi = lxt end if if ( x >= xt ( ihi ) ) then ! now x >= xt(ilo). find upper bound istep = 1 do ilo = ihi ihi = ilo + istep if ( ihi >= lxt ) then if ( x >= xt ( lxt ) ) then mflag = 1 ileft = lxt return end if ihi = lxt else if ( x >= xt ( ihi ) ) then istep = istep * 2 cycle end if exit end do else if ( x >= xt ( ilo ) ) then mflag = 0 ileft = ilo return end if ! now x <= xt(ihi). find lower bound istep = 1 do ihi = ilo ilo = ihi - istep if ( ilo <= 1 ) then ilo = 1 if ( x < xt ( 1 ) ) then mflag = - 1 ileft = 1 return end if else if ( x < xt ( ilo ) ) then istep = istep * 2 cycle end if exit end do end if ! now xt(ilo) <= x < xt(ihi). narrow the interval do middle = ( ilo + ihi ) / 2 if ( middle == ilo ) then mflag = 0 ileft = ilo return end if ! note. it is assumed that middle = ilo in case ihi = ilo+1 if ( x < xt ( middle ) ) then ihi = middle else ilo = middle end if end do end subroutine dintrv !***************************************************************************************** !***************************************************************************************** !> !  DBSQAD computes the integral on `(X1,X2)` of a `K`-th order !  B-spline using the B-representation `(T,BCOEF,N,K)`.  Orders !  `K` as high as 20 are permitted by applying a 2, 6, or 10 !  point Gauss formula on subintervals of `(X1,X2)` which are !  formed by included (distinct) knots. ! !  If orders `K` greater than 20 are needed, use [[dbfqad]] with !  `F(X) = 1`. ! !### Note !  * The maximum number of significant digits obtainable in !    DBSQAD is the smaller of 18 and the number of digits !    carried in `real(wp)` arithmetic. ! !### References !  * D. E. Amos, \"Quadrature subroutines for splines and !    B-splines\", Report SAND79-1825, Sandia Laboratories, !    December 1979. ! !### History !  * Author: Amos, D. E., (SNLA) !  * 800901  DATE WRITTEN !  * 890531  Changed all specific intrinsics to generic.  (WRB) !  * 890531  REVISION DATE from Version 3.2 !  * 891214  Prologue converted to Version 4.0 format.  (BAB) !  * 900315  CALLs to XERROR changed to CALLs to XERMSG.  (THJ) !  * 900326  Removed duplicate information from DESCRIPTION section. (WRB) !  * 920501  Reformatted the REFERENCES section.  (WRB) !  * Jacob Williams, 9/6/2017 : refactored to modern Fortran. ! !@note Extrapolation is not enabled for this routine. pure subroutine dbsqad ( t , bcoef , n , k , x1 , x2 , bquad , work , iflag ) implicit none real ( wp ), dimension (:), intent ( in ) :: t !! knot array of length `n+k` real ( wp ), dimension (:), intent ( in ) :: bcoef !! b-spline coefficient array of length `n` integer , intent ( in ) :: n !! length of coefficient array integer , intent ( in ) :: k !! order of b-spline, `1 <= k <= 20` real ( wp ), intent ( in ) :: x1 !! end point of quadrature interval in `t(k) <= x <= t(n+1)` real ( wp ), intent ( in ) :: x2 !! end point of quadrature interval in `t(k) <= x <= t(n+1)` real ( wp ), intent ( out ) :: bquad !! integral of the b-spline over (`x1`,`x2`) real ( wp ), dimension (:), intent ( inout ) :: work !! work vector of length `3*k` integer , intent ( out ) :: iflag !! status flag: !! !! * 0: no errors !! * 901: `k` does not satisfy `1<=k<=20` !! * 902: `n` does not satisfy `n>=k` !! * 903: `x1` or `x2` or both do not satisfy `t(k)<=x<=t(n+1)` integer :: i , il1 , il2 , ilo , inbv , jf , left , m , mf , mflag , npk , np1 real ( wp ) :: a , aa , b , bb , bma , bpa , c1 , gx , q , ta , tb , y1 , y2 real ( wp ), dimension ( 5 ) :: s !! sum real ( wp ), dimension ( 9 ), parameter :: gpts = [ & 5.77350269189625764e-01_wp , 2.38619186083196909e-01_wp , 6.61209386466264514e-01_wp , & 9.32469514203152028e-01_wp , 1.48874338981631211e-01_wp , 4.33395394129247191e-01_wp , & 6.79409568299024406e-01_wp , 8.65063366688984511e-01_wp , 9.73906528517171720e-01_wp ] real ( wp ), dimension ( 9 ), parameter :: gwts = [ & 1.00000000000000000e+00_wp , 4.67913934572691047e-01_wp , 3.60761573048138608e-01_wp , & 1.71324492379170345e-01_wp , 2.95524224714752870e-01_wp , 2.69266719309996355e-01_wp , & 2.19086362515982044e-01_wp , 1.49451349150580593e-01_wp , 6.66713443086881376e-02_wp ] iflag = 0 bquad = 0.0_wp if ( k < 1 . or . k > 20 ) then iflag = 901 ! error return else if ( n < k ) then iflag = 902 ! error return else aa = min ( x1 , x2 ) bb = max ( x1 , x2 ) if ( aa >= t ( k ) ) then np1 = n + 1 if ( bb <= t ( np1 ) ) then if ( aa == bb ) return npk = n + k ! selection of 2, 6, or 10 point gauss formula jf = 0 mf = 1 if ( k > 4 ) then jf = 1 mf = 3 if ( k > 12 ) then jf = 4 mf = 5 end if end if do i = 1 , mf s ( i ) = 0.0_wp end do ilo = 1 inbv = 1 call dintrv ( t , npk , aa , ilo , il1 , mflag ) call dintrv ( t , npk , bb , ilo , il2 , mflag ) if ( il2 >= np1 ) il2 = n do left = il1 , il2 ta = t ( left ) tb = t ( left + 1 ) if ( ta /= tb ) then a = max ( aa , ta ) b = min ( bb , tb ) bma = 0.5_wp * ( b - a ) bpa = 0.5_wp * ( b + a ) do m = 1 , mf c1 = bma * gpts ( jf + m ) gx = - c1 + bpa call dbvalu ( t , bcoef , n , k , 0 , gx , inbv , work , iflag , y2 ) if ( iflag /= 0 ) return gx = c1 + bpa call dbvalu ( t , bcoef , n , k , 0 , gx , inbv , work , iflag , y1 ) if ( iflag /= 0 ) return s ( m ) = s ( m ) + ( y1 + y2 ) * bma end do end if end do q = 0.0_wp do m = 1 , mf q = q + gwts ( jf + m ) * s ( m ) end do if ( x1 > x2 ) q = - q bquad = q return end if end if iflag = 903 ! error return end if end subroutine dbsqad !***************************************************************************************** !***************************************************************************************** !> !  dbfqad computes the integral on `(x1,x2)` of a product of a !  function `f` and the `id`-th derivative of a `k`-th order b-spline, !  using the b-representation `(t,bcoef,n,k)`.  `(x1,x2)` must be a !  subinterval of `t(k) <= x <= t(n+1)`.  an integration routine, !  [[dbsgq8]] (a modification of `gaus8`), integrates the product !  on subintervals of `(x1,x2)` formed by included (distinct) knots ! !### Reference !  * D. E. Amos, \"Quadrature subroutines for splines and !    B-splines\", Report SAND79-1825, Sandia Laboratories, !    December 1979. ! !### History !  * 800901  Amos, D. E., (SNLA) !  * 890531  Changed all specific intrinsics to generic.  (WRB) !  * 890531  REVISION DATE from Version 3.2 !  * 891214  Prologue converted to Version 4.0 format.  (BAB) !  * 900315  CALLs to XERROR changed to CALLs to XERMSG.  (THJ) !  * 900326  Removed duplicate information from DESCRIPTION section. (WRB) !  * 920501  Reformatted the REFERENCES section.  (WRB) !  * Jacob Williams, 9/6/2017 : refactored to modern Fortran. Some changes. ! !@note the maximum number of significant digits obtainable in !      dbsqad is the smaller of 18 and the number of digits !      carried in real(wp) arithmetic. subroutine dbfqad ( f , t , bcoef , n , k , id , x1 , x2 , tol , quad , iflag , work ) implicit none procedure ( b1fqad_func ) :: f !! external function of one argument for the !! integrand `bf(x)=f(x)*dbvalu(t,bcoef,n,k,id,x,inbv,work)` integer , intent ( in ) :: n !! length of coefficient array integer , intent ( in ) :: k !! order of b-spline, `k >= 1` real ( wp ), dimension ( n + k ), intent ( in ) :: t !! knot array real ( wp ), dimension ( n ), intent ( in ) :: bcoef !! coefficient array integer , intent ( in ) :: id !! order of the spline derivative, `0 <= id <= k-1` !! `id=0` gives the spline function real ( wp ), intent ( in ) :: x1 !! left point of quadrature interval in `t(k) <= x <= t(n+1)` real ( wp ), intent ( in ) :: x2 !! right point of quadrature interval in `t(k) <= x <= t(n+1)` real ( wp ), intent ( in ) :: tol !! desired accuracy for the quadrature, suggest !! `10*dtol < tol <= 0.1` where `dtol` is the maximum !! of `1.0e-18` and real(wp) unit roundoff for !! the machine real ( wp ), intent ( out ) :: quad !! integral of `bf(x)` on `(x1,x2)` real ( wp ), dimension (:), intent ( inout ) :: work !! work vector of length `3*k` integer , intent ( out ) :: iflag !! status flag: !! !! * 0: no errors !! * 1001: `k` does not satisfy `k>=1` !! * 1002: `n` does not satisfy `n>=k` !! * 1003: `d` does not satisfy `0<=id<k` !! * 1004: `x1` or `x2` or both do not !!   satisfy `t(k)<=x<=t(n+1)` !! * 1005: `tol` is less than machine !!   epsilon or greater than 0.1 integer :: inbv , ilo , il1 , il2 , left , mflag , npk , np1 real ( wp ) :: a , aa , ans , b , bb , q , ta , tb , err real ( wp ), parameter :: eps = epsilon ( 1.0_wp ) !! replaced `d1mach(4)` in original code. iflag = 0 quad = 0.0_wp err = tol if ( k < 1 ) then iflag = 1001 ! error elseif ( n < k ) then iflag = 1002 ! error elseif ( id < 0 . or . id >= k ) then iflag = 1003 ! error else if ( tol >= eps . and . tol <= 0.1_wp ) then aa = min ( x1 , x2 ) bb = max ( x1 , x2 ) if ( aa >= t ( k ) ) then np1 = n + 1 if ( bb <= t ( np1 ) ) then if ( aa == bb ) return npk = n + k ilo = 1 call dintrv ( t , npk , aa , ilo , il1 , mflag ) call dintrv ( t , npk , bb , ilo , il2 , mflag ) if ( il2 >= np1 ) il2 = n inbv = 1 q = 0.0_wp do left = il1 , il2 ta = t ( left ) tb = t ( left + 1 ) if ( ta /= tb ) then a = max ( aa , ta ) b = min ( bb , tb ) call dbsgq8 ( f , t , bcoef , n , k , id , a , b , inbv , err , ans , iflag , work ) if ( iflag /= 0 . and . iflag /= 1101 ) return q = q + ans end if end do if ( x1 > x2 ) q = - q quad = q end if else iflag = 1004 ! error end if else iflag = 1005 ! error end if end if end subroutine dbfqad !***************************************************************************************** !***************************************************************************************** !> !  DBSGQ8, a modification of [gaus8](http://netlib.sandia.gov/slatec/src/gaus8.f), !  integrates the product of `fun(x)` by the `id`-th derivative of a spline !  [[dbvalu]] between limits `a` and `b` using an adaptive 8-point Legendre-Gauss !  algorithm. ! !### See also !  * [[dbfqad]] ! !### History !  * 800901  Jones, R. E., (SNLA) !  * 890531  Changed all specific intrinsics to generic.  (WRB) !  * 890911  Removed unnecessary intrinsics.  (WRB) !  * 891214  Prologue converted to Version 4.0 format.  (BAB) !  * 900315  CALLs to XERROR changed to CALLs to XERMSG.  (THJ) !  * 900326  Removed duplicate information from DESCRIPTION section. (WRB) !  * 900328  Added TYPE section.  (WRB) !  * 910408  Updated the AUTHOR section.  (WRB) !  * Jacob Williams, 9/6/2017 : refactored to modern Fortran. Some changes. subroutine dbsgq8 ( fun , xt , bc , n , kk , id , a , b , inbv , err , ans , iflag , work ) implicit none procedure ( b1fqad_func ) :: fun !! name of external function of one !! argument which multiplies [[dbvalu]]. integer , intent ( in ) :: n !! number of b-coefficients for [[dbvalu]] integer , intent ( in ) :: kk !! order of the spline, `kk>=1` real ( wp ), dimension (:), intent ( in ) :: xt !! knot array for [[dbvalu]] real ( wp ), dimension ( n ), intent ( in ) :: bc !! b-coefficient array for [[dbvalu]] integer , intent ( in ) :: id !! Order of the spline derivative, `0<=id<=kk-1` real ( wp ), intent ( in ) :: a !! lower limit of integral real ( wp ), intent ( in ) :: b !! upper limit of integral (may be less than `a`) integer , intent ( inout ) :: inbv !! initialization parameter for [[dbvalu]] real ( wp ), intent ( inout ) :: err !! **IN:** is a requested pseudorelative error !! tolerance.  normally pick a value of !! `abs(err)<1e-3`.  `ans` will normally !! have no more error than `abs(err)` times !! the integral of the absolute value of !! `fun(x)*[[dbvalu]]()`. !! !! **OUT:** will be an estimate of the absolute !! error in ans if the input value of `err` !! was negative.  (`err` is unchanged if !! the input value of `err` was nonnegative.) !! the estimated error is solely for information !! to the user and should not be used as a !! correction to the computed integral. real ( wp ), intent ( out ) :: ans !! computed value of integral integer , intent ( out ) :: iflag !! a status code: !! !! * 0: `ans` most likely meets requested !!   error tolerance, or `a=b`. !! * 1101: `a` and `b` are too nearly equal !!   to allow normal integration. !!   `ans` is set to zero. !! * 1102: `ans` probably does not meet !!   requested error tolerance. real ( wp ), dimension (:), intent ( inout ) :: work !! work vector of length `3*k` for [[dbvalu]] integer :: k , l , lmn , lmx , mxl , nbits , nib , nlmx real ( wp ) :: ae , anib , area , c , ce , ee , ef , eps , est , gl , glr , tol , vr , x , h integer , dimension ( 60 ) :: lr real ( wp ), dimension ( 60 ) :: aa , hh , vl , gr integer , parameter :: i1mach14 = digits ( 1.0_wp ) !! i1mach(14) real ( wp ), parameter :: d1mach5 = log10 ( real ( radix ( x ), wp )) !! d1mach(5) real ( wp ), parameter :: ln2 = log ( 2.0_wp ) !! 0.69314718d0 real ( wp ), parameter :: sq2 = sqrt ( 2.0_wp ) integer , parameter :: nlmn = 1 integer , parameter :: kmx = 5000 integer , parameter :: kml = 6 ! initialize inbv = 1 iflag = 0 k = i1mach14 anib = d1mach5 * k / 0.30102000_wp nbits = int ( anib ) nlmx = min (( nbits * 5 ) / 8 , 60 ) ans = 0.0_wp ce = 0.0_wp if ( a == b ) then if ( err < 0.0_wp ) err = ce else lmx = nlmx lmn = nlmn if ( b /= 0.0_wp ) then if ( sign ( 1.0_wp , b ) * a > 0.0_wp ) then c = abs ( 1.0_wp - a / b ) if ( c <= 0.1_wp ) then if ( c <= 0.0_wp ) then if ( err < 0.0_wp ) err = ce return else anib = 0.5_wp - log ( c ) / ln2 nib = int ( anib ) lmx = min ( nlmx , nbits - nib - 7 ) if ( lmx < 1 ) then ! a and b are too nearly equal ! to allow normal integration iflag = 1101 if ( err < 0.0_wp ) err = ce return else lmn = min ( lmn , lmx ) end if end if end if end if end if tol = max ( abs ( err ), 2.0_wp ** ( 5 - nbits )) / 2.0_wp if ( err == 0.0_wp ) tol = sqrt ( epsilon ( 1.0_wp )) eps = tol hh ( 1 ) = ( b - a ) / 4.0_wp aa ( 1 ) = a lr ( 1 ) = 1 l = 1 call g8 ( aa ( l ) + 2.0_wp * hh ( l ), 2.0_wp * hh ( l ), est , iflag ) if ( iflag /= 0 ) return k = 8 area = abs ( est ) ef = 0.5_wp mxl = 0 end if do ! compute refined estimates, estimate the error, etc. call g8 ( aa ( l ) + hh ( l ), hh ( l ), gl , iflag ) if ( iflag /= 0 ) return call g8 ( aa ( l ) + 3.0_wp * hh ( l ), hh ( l ), gr ( l ), iflag ) if ( iflag /= 0 ) return k = k + 16 area = area + ( abs ( gl ) + abs ( gr ( l )) - abs ( est )) glr = gl + gr ( l ) ee = abs ( est - glr ) * ef ae = max ( eps * area , tol * abs ( glr )) if ( ee > ae ) then ! consider the left half of this level if ( k > kmx ) lmx = kml if ( l >= lmx ) then mxl = 1 else l = l + 1 eps = eps * 0.5_wp ef = ef / sq2 hh ( l ) = hh ( l - 1 ) * 0.5_wp lr ( l ) = - 1 aa ( l ) = aa ( l - 1 ) est = gl cycle end if end if ce = ce + ( est - glr ) if ( lr ( l ) <= 0 ) then ! proceed to right half at this level vl ( l ) = glr else ! return one level vr = glr do if ( l <= 1 ) then ! exit ans = vr if ( ( mxl /= 0 ) . and . ( abs ( ce ) > 2.0_wp * tol * area ) ) then iflag = 1102 end if if ( err < 0.0_wp ) err = ce return else l = l - 1 eps = eps * 2.0_wp ef = ef * sq2 if ( lr ( l ) <= 0 ) then vl ( l ) = vl ( l + 1 ) + vr exit else vr = vl ( l + 1 ) + vr end if end if end do end if est = gr ( l - 1 ) lr ( l ) = 1 aa ( l ) = aa ( l ) + 4.0_wp * hh ( l ) end do contains subroutine g8 ( x , h , res , iflag ) !! 8-point formula. !! !!@note If greater than double precision desired, !!      would have to replace the abscissa and weight !!      coefficients with higher precision versions. !!      (e.g., from here: http://pomax.github.io/bezierinfo/legendre-gauss.html) implicit none real ( wp ), intent ( in ) :: x real ( wp ), intent ( in ) :: h real ( wp ), intent ( out ) :: res integer , intent ( out ) :: iflag real ( wp ), dimension ( 8 ) :: f real ( wp ), dimension ( 8 ) :: v real ( wp ), parameter :: x1 = 1.83434642495649805e-01_wp real ( wp ), parameter :: x2 = 5.25532409916328986e-01_wp real ( wp ), parameter :: x3 = 7.96666477413626740e-01_wp real ( wp ), parameter :: x4 = 9.60289856497536232e-01_wp real ( wp ), parameter :: w1 = 3.62683783378361983e-01_wp real ( wp ), parameter :: w2 = 3.13706645877887287e-01_wp real ( wp ), parameter :: w3 = 2.22381034453374471e-01_wp real ( wp ), parameter :: w4 = 1.01228536290376259e-01_wp res = 0.0_wp v ( 1 ) = x - x1 * h v ( 2 ) = x + x1 * h v ( 3 ) = x - x2 * h v ( 4 ) = x + x2 * h v ( 5 ) = x - x3 * h v ( 6 ) = x + x3 * h v ( 7 ) = x - x4 * h v ( 8 ) = x + x4 * h call dbvalu ( xt , bc , n , kk , id , v ( 1 ), inbv , work , iflag , f ( 1 )); if ( iflag /= 0 ) return call dbvalu ( xt , bc , n , kk , id , v ( 2 ), inbv , work , iflag , f ( 2 )); if ( iflag /= 0 ) return call dbvalu ( xt , bc , n , kk , id , v ( 3 ), inbv , work , iflag , f ( 3 )); if ( iflag /= 0 ) return call dbvalu ( xt , bc , n , kk , id , v ( 4 ), inbv , work , iflag , f ( 4 )); if ( iflag /= 0 ) return call dbvalu ( xt , bc , n , kk , id , v ( 5 ), inbv , work , iflag , f ( 5 )); if ( iflag /= 0 ) return call dbvalu ( xt , bc , n , kk , id , v ( 6 ), inbv , work , iflag , f ( 6 )); if ( iflag /= 0 ) return call dbvalu ( xt , bc , n , kk , id , v ( 7 ), inbv , work , iflag , f ( 7 )); if ( iflag /= 0 ) return call dbvalu ( xt , bc , n , kk , id , v ( 8 ), inbv , work , iflag , f ( 8 )); if ( iflag /= 0 ) return res = h * (( w1 * ( fun ( v ( 1 )) * f ( 1 ) + fun ( v ( 2 )) * f ( 2 )) + & w2 * ( fun ( v ( 3 )) * f ( 3 ) + fun ( v ( 4 )) * f ( 4 ))) + & ( w3 * ( fun ( v ( 5 )) * f ( 5 ) + fun ( v ( 6 )) * f ( 6 )) + & w4 * ( fun ( v ( 7 )) * f ( 7 ) + fun ( v ( 8 )) * f ( 8 )))) end subroutine g8 end subroutine dbsgq8 !***************************************************************************************** !***************************************************************************************** !> !  Returns the value of `x` to use for computing the interval !  in `t`, depending on if extrapolation is allowed or not. ! !  If extrapolation is allowed and x is > t(1) or < t(n), then either !  t(1) or t(n) is returned. Otherwise, `x` is returned. pure function get_temp_x_for_extrap ( x , t , extrap ) result ( xt ) implicit none real ( wp ), intent ( in ) :: x !! variable value real ( wp ), dimension (:), intent ( in ) :: t !! knot vector for b-splines real ( wp ) :: xt !! The value returned (it will either !! be `t(1)`, `x`, or `t(n)`) logical , intent ( in ), optional :: extrap !! if extrapolation is allowed !! (if not present, default is False) integer :: n !! size of `t` logical :: extrapolation_allowed !! if extrapolation is allowed if ( present ( extrap )) then extrapolation_allowed = extrap else extrapolation_allowed = . false . end if n = size ( t ) if ( extrapolation_allowed ) then if ( x < t ( 1 )) then xt = t ( 1 ) else if ( x > t ( n )) then xt = t ( n ) else xt = x end if else xt = x end if end function get_temp_x_for_extrap !***************************************************************************************** !***************************************************************************************** !> !  Returns a message string associated with the status code. pure function get_status_message ( iflag ) result ( msg ) implicit none integer , intent ( in ) :: iflag !! return code from one of the routines character ( len = :), allocatable :: msg !! status message associated with the flag character ( len = 10 ) :: istr !! for integer to string conversion integer :: istat !! for write statement select case ( iflag ) case ( 0 ); msg = 'Successful execution' case ( 1 ); msg = 'Error in evaluate_*d: class is not initialized' case ( 2 ); msg = 'Error in db*ink: iknot out of range' case ( 3 ); msg = 'Error in db*ink: nx out of range' case ( 4 ); msg = 'Error in db*ink: kx out of range' case ( 5 ); msg = 'Error in db*ink: x not strictly increasing' case ( 6 ); msg = 'Error in db*ink: tx not non-decreasing' case ( 7 ); msg = 'Error in db*ink: ny out of range' case ( 8 ); msg = 'Error in db*ink: ky out of range' case ( 9 ); msg = 'Error in db*ink: y not strictly increasing' case ( 10 ); msg = 'Error in db*ink: ty not non-decreasing' case ( 11 ); msg = 'Error in db*ink: nz out of range' case ( 12 ); msg = 'Error in db*ink: kz out of range' case ( 13 ); msg = 'Error in db*ink: z not strictly increasing' case ( 14 ); msg = 'Error in db*ink: tz not non-decreasing' case ( 15 ); msg = 'Error in db*ink: nq out of range' case ( 16 ); msg = 'Error in db*ink: kq out of range' case ( 17 ); msg = 'Error in db*ink: q not strictly increasing' case ( 18 ); msg = 'Error in db*ink: tq not non-decreasing' case ( 19 ); msg = 'Error in db*ink: nr out of range' case ( 20 ); msg = 'Error in db*ink: kr out of range' case ( 21 ); msg = 'Error in db*ink: r not strictly increasing' case ( 22 ); msg = 'Error in db*ink: tr not non-decreasing' case ( 23 ); msg = 'Error in db*ink: ns out of range' case ( 24 ); msg = 'Error in db*ink: ks out of range' case ( 25 ); msg = 'Error in db*ink: s not strictly increasing' case ( 26 ); msg = 'Error in db*ink: ts not non-decreasing' case ( 700 ); msg = 'Error in db*ink: size(x) /= size(fcn,1)' case ( 701 ); msg = 'Error in db*ink: size(y) /= size(fcn,2)' case ( 702 ); msg = 'Error in db*ink: size(z) /= size(fcn,3)' case ( 703 ); msg = 'Error in db*ink: size(q) /= size(fcn,4)' case ( 704 ); msg = 'Error in db*ink: size(r) /= size(fcn,5)' case ( 705 ); msg = 'Error in db*ink: size(s) /= size(fcn,6)' case ( 706 ); msg = 'Error in db*ink: size(x) /= nx' case ( 707 ); msg = 'Error in db*ink: size(y) /= ny' case ( 708 ); msg = 'Error in db*ink: size(z) /= nz' case ( 709 ); msg = 'Error in db*ink: size(q) /= nq' case ( 710 ); msg = 'Error in db*ink: size(r) /= nr' case ( 711 ); msg = 'Error in db*ink: size(s) /= ns' case ( 712 ); msg = 'Error in db*ink: size(tx) /= nx+kx' case ( 713 ); msg = 'Error in db*ink: size(ty) /= ny+ky' case ( 714 ); msg = 'Error in db*ink: size(tz) /= nz+kz' case ( 715 ); msg = 'Error in db*ink: size(tq) /= nq+kq' case ( 716 ); msg = 'Error in db*ink: size(tr) /= nr+kr' case ( 717 ); msg = 'Error in db*ink: size(ts) /= ns+ks' case ( 800 ); msg = 'Error in db*ink: size(x) /= size(bcoef,1)' case ( 801 ); msg = 'Error in db*ink: size(y) /= size(bcoef,2)' case ( 802 ); msg = 'Error in db*ink: size(z) /= size(bcoef,3)' case ( 803 ); msg = 'Error in db*ink: size(q) /= size(bcoef,4)' case ( 804 ); msg = 'Error in db*ink: size(r) /= size(bcoef,5)' case ( 805 ); msg = 'Error in db*ink: size(s) /= size(bcoef,6)' case ( 100 ); msg = 'Error in dbintk: k does not satisfy k>=1' case ( 101 ); msg = 'Error in dbintk: n does not satisfy n>=k' case ( 102 ); msg = 'Error in dbintk: x(i) does not satisfy x(i)<x(i+1) for some i' case ( 103 ); msg = 'Error in dbintk: some abscissa was not in the support of the ' // & 'corresponding basis function and the system is singular' case ( 104 ); msg = 'Error in dbintk: the system of solver detects a singular system ' // & 'although the theoretical conditions for a solution were satisfied' case ( 201 ); msg = 'Error in dbspvn: k does not satisfy k>=1' case ( 202 ); msg = 'Error in dbspvn: jhigh does not satisfy 1<=jhigh<=k' case ( 203 ); msg = 'Error in dbspvn: index is not 1 or 2' case ( 204 ); msg = 'Error in dbspvn: x does not satisfy t(ileft)<=x<=t(ileft+1)' case ( 301 ); msg = 'Error in dbtpcf: n should be > 0' case ( 401 ); msg = 'Error in dbvalu: k does not satisfy k>=1' case ( 402 ); msg = 'Error in dbvalu: n does not satisfy n>=k' case ( 403 ); msg = 'Error in dbvalu: ideriv does not satisfy 0<=ideriv<k' case ( 404 ); msg = 'Error in dbvalu: x is not greater than or equal to t(k)' case ( 405 ); msg = 'Error in dbvalu: x is not less than or equal to t(n+1)' case ( 406 ); msg = 'Error in dbvalu: a left limiting value cannot be obtained at t(k)' case ( 501 ); msg = 'Error in initialize_*d_specify_knots: tx is not the correct size (kx+nx)' case ( 502 ); msg = 'Error in initialize_*d_specify_knots: ty is not the correct size (ky+ny)' case ( 503 ); msg = 'Error in initialize_*d_specify_knots: tz is not the correct size (kz+nz)' case ( 504 ); msg = 'Error in initialize_*d_specify_knots: tq is not the correct size (kq+nq)' case ( 505 ); msg = 'Error in initialize_*d_specify_knots: tr is not the correct size (kr+nr)' case ( 506 ); msg = 'Error in initialize_*d_specify_knots: ts is not the correct size (ks+ns)' case ( 601 ); msg = 'Error in db*val: x value out of bounds' case ( 602 ); msg = 'Error in db*val: y value out of bounds' case ( 603 ); msg = 'Error in db*val: z value out of bounds' case ( 604 ); msg = 'Error in db*val: q value out of bounds' case ( 605 ); msg = 'Error in db*val: r value out of bounds' case ( 606 ); msg = 'Error in db*val: s value out of bounds' case ( 901 ); msg = 'Error in dbsqad: k does not satisfy 1<=k<=20' case ( 902 ); msg = 'Error in dbsqad: n does not satisfy n>=k' case ( 903 ); msg = 'Error in dbsqad: x1 or x2 or both do not satisfy t(k)<=x<=t(n+1)' case ( 1001 ); msg = 'Error in dbfqad: k does not satisfy k>=1' case ( 1002 ); msg = 'Error in dbfqad: n does not satisfy n>=k' case ( 1003 ); msg = 'Error in dbfqad: d does not satisfy 0<=id<k' case ( 1004 ); msg = 'Error in dbfqad: x1 or x2 or both do not satisfy t(k)<=x<=t(n+1)' case ( 1005 ); msg = 'Error in dbfqad: is less than machine epsilon or greater than 0.1' case ( 1101 ); msg = 'Warning in dbsgq8: a and b are too nearly equal to allow normal integration.' case ( 1102 ); msg = 'Error in dbsgq8: ans is probably insufficiently accurate.' case default write ( istr , fmt = '(I10)' , iostat = istat ) iflag msg = 'Unknown status flag: ' // trim ( adjustl ( istr )) end select end function get_status_message !***************************************************************************************** !***************************************************************************************** end module bspline_sub_module !*****************************************************************************************","tags":"","loc":"sourcefile/bspline_sub_module.f90.html","title":"bspline_sub_module.f90 â€“ bspline-fortran"},{"text":"This File Depends On sourcefile~~bspline_module.f90~~EfferentGraph sourcefile~bspline_module.f90 bspline_module.f90 sourcefile~bspline_oo_module.f90 bspline_oo_module.f90 sourcefile~bspline_oo_module.f90->sourcefile~bspline_module.f90 sourcefile~bspline_sub_module.f90 bspline_sub_module.f90 sourcefile~bspline_sub_module.f90->sourcefile~bspline_module.f90 sourcefile~bspline_sub_module.f90->sourcefile~bspline_oo_module.f90 Help Ã— Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which depends upon it. A file \n    is dependent upon another if the latter must be compiled before the former\n    can be. Files Dependent On This One sourcefile~~bspline_module.f90~~AfferentGraph sourcefile~bspline_module.f90 bspline_module.f90 sourcefile~test_regrid.f90 test_regrid.f90 sourcefile~bspline_module.f90->sourcefile~test_regrid.f90 sourcefile~speed_test_oo.f90 speed_test_oo.f90 sourcefile~bspline_module.f90->sourcefile~speed_test_oo.f90 sourcefile~test.f90 test.f90 sourcefile~bspline_module.f90->sourcefile~test.f90 sourcefile~test_integrate.f90 test_integrate.f90 sourcefile~bspline_module.f90->sourcefile~test_integrate.f90 sourcefile~speed_test.f90 speed_test.f90 sourcefile~bspline_module.f90->sourcefile~speed_test.f90 sourcefile~bspline_extrap_test.f90 bspline_extrap_test.f90 sourcefile~bspline_module.f90->sourcefile~bspline_extrap_test.f90 sourcefile~test_oo.f90 test_oo.f90 sourcefile~bspline_module.f90->sourcefile~test_oo.f90 sourcefile~knot_tests.f90 knot_tests.f90 sourcefile~bspline_module.f90->sourcefile~knot_tests.f90 Help Ã— Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which depends upon it. A file \n    is dependent upon another if the latter must be compiled before the former\n    can be. Modules bspline_module Source Code bspline_module.f90 Source Code !***************************************************************************************** !> author: Jacob Williams !  license: BSD ! !### Description ! !  Multidimensional (1D-6D) B-Spline interpolation of data on a regular grid. !  This module uses both the subroutine and object-oriented modules. module bspline_module use bspline_oo_module use bspline_sub_module implicit none public !***************************************************************************************** end module bspline_module !*****************************************************************************************","tags":"","loc":"sourcefile/bspline_module.f90.html","title":"bspline_module.f90 â€“ bspline-fortran"},{"text":"This File Depends On sourcefile~~bspline_oo_module.f90~~EfferentGraph sourcefile~bspline_oo_module.f90 bspline_oo_module.f90 sourcefile~bspline_sub_module.f90 bspline_sub_module.f90 sourcefile~bspline_sub_module.f90->sourcefile~bspline_oo_module.f90 Help Ã— Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which depends upon it. A file \n    is dependent upon another if the latter must be compiled before the former\n    can be. Files Dependent On This One sourcefile~~bspline_oo_module.f90~~AfferentGraph sourcefile~bspline_oo_module.f90 bspline_oo_module.f90 sourcefile~bspline_module.f90 bspline_module.f90 sourcefile~bspline_oo_module.f90->sourcefile~bspline_module.f90 sourcefile~test_regrid.f90 test_regrid.f90 sourcefile~bspline_module.f90->sourcefile~test_regrid.f90 sourcefile~speed_test_oo.f90 speed_test_oo.f90 sourcefile~bspline_module.f90->sourcefile~speed_test_oo.f90 sourcefile~test.f90 test.f90 sourcefile~bspline_module.f90->sourcefile~test.f90 sourcefile~test_integrate.f90 test_integrate.f90 sourcefile~bspline_module.f90->sourcefile~test_integrate.f90 sourcefile~speed_test.f90 speed_test.f90 sourcefile~bspline_module.f90->sourcefile~speed_test.f90 sourcefile~bspline_extrap_test.f90 bspline_extrap_test.f90 sourcefile~bspline_module.f90->sourcefile~bspline_extrap_test.f90 sourcefile~test_oo.f90 test_oo.f90 sourcefile~bspline_module.f90->sourcefile~test_oo.f90 sourcefile~knot_tests.f90 knot_tests.f90 sourcefile~bspline_module.f90->sourcefile~knot_tests.f90 Help Ã— Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which depends upon it. A file \n    is dependent upon another if the latter must be compiled before the former\n    can be. Modules bspline_oo_module Source Code bspline_oo_module.f90 Source Code !***************************************************************************************** !> author: Jacob Williams !  license: BSD !  date: 12/6/2015 ! !  Object-oriented style wrappers to [[bspline_sub_module]]. !  This module provides classes ([[bspline_1d(type)]], [[bspline_2d(type)]], !  [[bspline_3d(type)]], [[bspline_4d(type)]], [[bspline_5d(type)]], and [[bspline_6d(type)]]) !  which can be used instead of the main subroutine interface. module bspline_oo_module use , intrinsic :: iso_fortran_env , only : wp => real64 use , intrinsic :: iso_fortran_env , only : error_unit use bspline_sub_module implicit none private integer , parameter :: int_size = storage_size ( 1 ) !! size of a default integer [bits] integer , parameter :: logical_size = storage_size (. true .) !! size of a default logical [bits] integer , parameter :: real_size = storage_size ( 1.0_wp ) !! size of a `real(wp)` [bits] type , public , abstract :: bspline_class !! Base class for the b-spline types private integer :: inbvx = 1 !! internal variable used by [[dbvalu]] for efficient processing integer :: iflag = 1 !! saved `iflag` from the list routine call. logical :: initialized = . false . !! true if the class is initialized and ready to use logical :: extrap = . false . !! if true, then extrapolation is allowed during evaluation contains private procedure , non_overridable :: destroy_base !! destructor for the abstract type procedure , non_overridable :: set_extrap_flag !! internal routine to set the `extrap` flag procedure ( destroy_func ), deferred , public :: destroy !! destructor procedure ( size_func ), deferred , public :: size_of !! size of the structure in bits procedure , public , non_overridable :: status_ok !! returns true if the last `iflag` status code was `=0`. procedure , public , non_overridable :: status_message => get_bspline_status_message !! retrieve the last status message procedure , public , non_overridable :: clear_flag => clear_bspline_flag !! to reset the `iflag` saved in the class. end type bspline_class abstract interface pure subroutine destroy_func ( me ) !! interface for bspline destructor routines import :: bspline_class implicit none class ( bspline_class ), intent ( inout ) :: me end subroutine destroy_func pure function size_func ( me ) result ( s ) !! interface for size routines import :: bspline_class implicit none class ( bspline_class ), intent ( in ) :: me integer :: s !! size of the structure in bits end function size_func end interface type , extends ( bspline_class ), public :: bspline_1d !! Class for 1d b-spline interpolation. private integer :: nx = 0 !! Number of x abcissae integer :: kx = 0 !! The order of spline pieces in x real ( wp ), dimension (:), allocatable :: bcoef !! array of coefficients of the b-spline interpolant real ( wp ), dimension (:), allocatable :: tx !! The knots in the x direction for the spline interpolant contains private generic , public :: initialize => initialize_1d_auto_knots , initialize_1d_specify_knots procedure :: initialize_1d_auto_knots procedure :: initialize_1d_specify_knots procedure , public :: evaluate => evaluate_1d procedure , public :: destroy => destroy_1d procedure , public :: size_of => size_1d procedure , public :: integral => integral_1d procedure , public :: fintegral => fintegral_1d final :: finalize_1d end type bspline_1d type , extends ( bspline_class ), public :: bspline_2d !! Class for 2d b-spline interpolation. private integer :: nx = 0 !! Number of x abcissae integer :: ny = 0 !! Number of y abcissae integer :: kx = 0 !! The order of spline pieces in x integer :: ky = 0 !! The order of spline pieces in y real ( wp ), dimension (:,:), allocatable :: bcoef !! array of coefficients of the b-spline interpolant real ( wp ), dimension (:), allocatable :: tx !! The knots in the x direction for the spline interpolant real ( wp ), dimension (:), allocatable :: ty !! The knots in the y direction for the spline interpolant integer :: inbvy = 1 !! internal variable used for efficient processing integer :: iloy = 1 !! internal variable used for efficient processing contains private generic , public :: initialize => initialize_2d_auto_knots , initialize_2d_specify_knots procedure :: initialize_2d_auto_knots procedure :: initialize_2d_specify_knots procedure , public :: evaluate => evaluate_2d procedure , public :: destroy => destroy_2d procedure , public :: size_of => size_2d final :: finalize_2d end type bspline_2d type , extends ( bspline_class ), public :: bspline_3d !! Class for 3d b-spline interpolation. private integer :: nx = 0 !! Number of x abcissae integer :: ny = 0 !! Number of y abcissae integer :: nz = 0 !! Number of z abcissae integer :: kx = 0 !! The order of spline pieces in x integer :: ky = 0 !! The order of spline pieces in y integer :: kz = 0 !! The order of spline pieces in z real ( wp ), dimension (:,:,:), allocatable :: bcoef !! array of coefficients of the b-spline interpolant real ( wp ), dimension (:), allocatable :: tx !! The knots in the x direction for the spline interpolant real ( wp ), dimension (:), allocatable :: ty !! The knots in the y direction for the spline interpolant real ( wp ), dimension (:), allocatable :: tz !! The knots in the z direction for the spline interpolant integer :: inbvy = 1 !! internal variable used for efficient processing integer :: inbvz = 1 !! internal variable used for efficient processing integer :: iloy = 1 !! internal variable used for efficient processing integer :: iloz = 1 !! internal variable used for efficient processing contains private generic , public :: initialize => initialize_3d_auto_knots , initialize_3d_specify_knots procedure :: initialize_3d_auto_knots procedure :: initialize_3d_specify_knots procedure , public :: evaluate => evaluate_3d procedure , public :: destroy => destroy_3d procedure , public :: size_of => size_3d final :: finalize_3d end type bspline_3d type , extends ( bspline_class ), public :: bspline_4d !! Class for 4d b-spline interpolation. private integer :: nx = 0 !! Number of x abcissae integer :: ny = 0 !! Number of y abcissae integer :: nz = 0 !! Number of z abcissae integer :: nq = 0 !! Number of q abcissae integer :: kx = 0 !! The order of spline pieces in x integer :: ky = 0 !! The order of spline pieces in y integer :: kz = 0 !! The order of spline pieces in z integer :: kq = 0 !! The order of spline pieces in q real ( wp ), dimension (:,:,:,:), allocatable :: bcoef !! array of coefficients of the b-spline interpolant real ( wp ), dimension (:), allocatable :: tx !! The knots in the x direction for the spline interpolant real ( wp ), dimension (:), allocatable :: ty !! The knots in the y direction for the spline interpolant real ( wp ), dimension (:), allocatable :: tz !! The knots in the z direction for the spline interpolant real ( wp ), dimension (:), allocatable :: tq !! The knots in the q direction for the spline interpolant integer :: inbvy = 1 !! internal variable used for efficient processing integer :: inbvz = 1 !! internal variable used for efficient processing integer :: inbvq = 1 !! internal variable used for efficient processing integer :: iloy = 1 !! internal variable used for efficient processing integer :: iloz = 1 !! internal variable used for efficient processing integer :: iloq = 1 !! internal variable used for efficient processing contains private generic , public :: initialize => initialize_4d_auto_knots , initialize_4d_specify_knots procedure :: initialize_4d_auto_knots procedure :: initialize_4d_specify_knots procedure , public :: evaluate => evaluate_4d procedure , public :: destroy => destroy_4d procedure , public :: size_of => size_4d final :: finalize_4d end type bspline_4d type , extends ( bspline_class ), public :: bspline_5d !! Class for 5d b-spline interpolation. private integer :: nx = 0 !! Number of x abcissae integer :: ny = 0 !! Number of y abcissae integer :: nz = 0 !! Number of z abcissae integer :: nq = 0 !! Number of q abcissae integer :: nr = 0 !! Number of r abcissae integer :: kx = 0 !! The order of spline pieces in x integer :: ky = 0 !! The order of spline pieces in y integer :: kz = 0 !! The order of spline pieces in z integer :: kq = 0 !! The order of spline pieces in q integer :: kr = 0 !! The order of spline pieces in r real ( wp ), dimension (:,:,:,:,:), allocatable :: bcoef !! array of coefficients of the b-spline interpolant real ( wp ), dimension (:), allocatable :: tx !! The knots in the x direction for the spline interpolant real ( wp ), dimension (:), allocatable :: ty !! The knots in the y direction for the spline interpolant real ( wp ), dimension (:), allocatable :: tz !! The knots in the z direction for the spline interpolant real ( wp ), dimension (:), allocatable :: tq !! The knots in the q direction for the spline interpolant real ( wp ), dimension (:), allocatable :: tr !! The knots in the r direction for the spline interpolant integer :: inbvy = 1 !! internal variable used for efficient processing integer :: inbvz = 1 !! internal variable used for efficient processing integer :: inbvq = 1 !! internal variable used for efficient processing integer :: inbvr = 1 !! internal variable used for efficient processing integer :: iloy = 1 !! internal variable used for efficient processing integer :: iloz = 1 !! internal variable used for efficient processing integer :: iloq = 1 !! internal variable used for efficient processing integer :: ilor = 1 !! internal variable used for efficient processing contains private generic , public :: initialize => initialize_5d_auto_knots , initialize_5d_specify_knots procedure :: initialize_5d_auto_knots procedure :: initialize_5d_specify_knots procedure , public :: evaluate => evaluate_5d procedure , public :: destroy => destroy_5d procedure , public :: size_of => size_5d final :: finalize_5d end type bspline_5d type , extends ( bspline_class ), public :: bspline_6d !! Class for 6d b-spline interpolation. private integer :: nx = 0 !! Number of x abcissae integer :: ny = 0 !! Number of y abcissae integer :: nz = 0 !! Number of z abcissae integer :: nq = 0 !! Number of q abcissae integer :: nr = 0 !! Number of r abcissae integer :: ns = 0 !! Number of s abcissae integer :: kx = 0 !! The order of spline pieces in x integer :: ky = 0 !! The order of spline pieces in y integer :: kz = 0 !! The order of spline pieces in z integer :: kq = 0 !! The order of spline pieces in q integer :: kr = 0 !! The order of spline pieces in r integer :: ks = 0 !! The order of spline pieces in s real ( wp ), dimension (:,:,:,:,:,:), allocatable :: bcoef !! array of coefficients of the b-spline interpolant real ( wp ), dimension (:), allocatable :: tx !! The knots in the x direction for the spline interpolant real ( wp ), dimension (:), allocatable :: ty !! The knots in the y direction for the spline interpolant real ( wp ), dimension (:), allocatable :: tz !! The knots in the z direction for the spline interpolant real ( wp ), dimension (:), allocatable :: tq !! The knots in the q direction for the spline interpolant real ( wp ), dimension (:), allocatable :: tr !! The knots in the r direction for the spline interpolant real ( wp ), dimension (:), allocatable :: ts !! The knots in the s direction for the spline interpolant integer :: inbvy = 1 !! internal variable used for efficient processing integer :: inbvz = 1 !! internal variable used for efficient processing integer :: inbvq = 1 !! internal variable used for efficient processing integer :: inbvr = 1 !! internal variable used for efficient processing integer :: inbvs = 1 !! internal variable used for efficient processing integer :: iloy = 1 !! internal variable used for efficient processing integer :: iloz = 1 !! internal variable used for efficient processing integer :: iloq = 1 !! internal variable used for efficient processing integer :: ilor = 1 !! internal variable used for efficient processing integer :: ilos = 1 !! internal variable used for efficient processing contains private generic , public :: initialize => initialize_6d_auto_knots , initialize_6d_specify_knots procedure :: initialize_6d_auto_knots procedure :: initialize_6d_specify_knots procedure , public :: evaluate => evaluate_6d procedure , public :: destroy => destroy_6d procedure , public :: size_of => size_6d final :: finalize_6d end type bspline_6d interface bspline_1d !! Constructor for [[bspline_1d(type)]] procedure :: bspline_1d_constructor_empty ,& bspline_1d_constructor_auto_knots ,& bspline_1d_constructor_specify_knots end interface interface bspline_2d !! Constructor for [[bspline_2d(type)]] procedure :: bspline_2d_constructor_empty ,& bspline_2d_constructor_auto_knots ,& bspline_2d_constructor_specify_knots end interface interface bspline_3d !! Constructor for [[bspline_3d(type)]] procedure :: bspline_3d_constructor_empty ,& bspline_3d_constructor_auto_knots ,& bspline_3d_constructor_specify_knots end interface interface bspline_4d !! Constructor for [[bspline_4d(type)]] procedure :: bspline_4d_constructor_empty ,& bspline_4d_constructor_auto_knots ,& bspline_4d_constructor_specify_knots end interface interface bspline_5d !! Constructor for [[bspline_5d(type)]] procedure :: bspline_5d_constructor_empty ,& bspline_5d_constructor_auto_knots ,& bspline_5d_constructor_specify_knots end interface interface bspline_6d !! Constructor for [[bspline_6d(type)]] procedure :: bspline_6d_constructor_empty ,& bspline_6d_constructor_auto_knots ,& bspline_6d_constructor_specify_knots end interface contains !***************************************************************************************** !***************************************************************************************** !> !  This routines returns true if the `iflag` code from the last !  routine called was `=0`. Maybe of the routines have output `iflag` !  variables, so they can be checked explicitly, or this routine !  can be used. ! !  If the class is initialized using a function constructor, then !  this is the only way to know if it was properly initialized, !  since those are pure functions with not output `iflag` arguments. ! !  If `status_ok=.false.`, then the error message can be !  obtained from the [[get_bspline_status_message]] routine. ! !  Note: after an error condition, the [[clear_bspline_flag]] routine !  can be called to reset the `iflag` to 0. elemental function status_ok ( me ) result ( ok ) implicit none class ( bspline_class ), intent ( in ) :: me logical :: ok ok = ( me % iflag == 0 ) end function status_ok !***************************************************************************************** !***************************************************************************************** !> !  This sets the `iflag` variable in the class to `0` !  (which indicates that everything is OK). It can be used !  after an error is encountered. elemental subroutine clear_bspline_flag ( me ) implicit none class ( bspline_class ), intent ( inout ) :: me me % iflag = 0 end subroutine clear_bspline_flag !***************************************************************************************** !***************************************************************************************** !> !  Get the status message from a [[bspline_class]] routine call. ! !  If `iflag` is not included, then the one in the class is used (which !  corresponds to the last routine called.) !  Otherwise, it will convert the !  input `iflag` argument into the appropriate message. ! !  This is a wrapper for [[get_status_message]]. pure function get_bspline_status_message ( me , iflag ) result ( msg ) implicit none class ( bspline_class ), intent ( in ) :: me character ( len = :), allocatable :: msg !! status message associated with the flag integer , intent ( in ), optional :: iflag !! the corresponding status code if ( present ( iflag )) then msg = get_status_message ( iflag ) else msg = get_status_message ( me % iflag ) end if end function get_bspline_status_message !***************************************************************************************** !***************************************************************************************** !> !  Actual size of a [[bspline_1d]] structure in bits. pure function size_1d ( me ) result ( s ) implicit none class ( bspline_1d ), intent ( in ) :: me integer :: s !! size of the structure in bits s = 2 * int_size + logical_size + 2 * int_size if ( allocated ( me % bcoef )) s = s + real_size * size ( me % bcoef ) if ( allocated ( me % tx )) s = s + real_size * size ( me % tx ) end function size_1d !***************************************************************************************** !***************************************************************************************** !> !  Actual size of a [[bspline_2d]] structure in bits. pure function size_2d ( me ) result ( s ) implicit none class ( bspline_2d ), intent ( in ) :: me integer :: s !! size of the structure in bits s = 2 * int_size + logical_size + 6 * int_size if ( allocated ( me % bcoef )) s = s + real_size * size ( me % bcoef , 1 ) * & size ( me % bcoef , 2 ) if ( allocated ( me % tx )) s = s + real_size * size ( me % tx ) if ( allocated ( me % ty )) s = s + real_size * size ( me % ty ) end function size_2d !***************************************************************************************** !***************************************************************************************** !> !  Actual size of a [[bspline_3d]] structure in bits. pure function size_3d ( me ) result ( s ) implicit none class ( bspline_3d ), intent ( in ) :: me integer :: s !! size of the structure in bits s = 2 * int_size + logical_size + 10 * int_size if ( allocated ( me % bcoef )) s = s + real_size * size ( me % bcoef , 1 ) * & size ( me % bcoef , 2 ) * & size ( me % bcoef , 3 ) if ( allocated ( me % tx )) s = s + real_size * size ( me % tx ) if ( allocated ( me % ty )) s = s + real_size * size ( me % ty ) if ( allocated ( me % tz )) s = s + real_size * size ( me % tz ) end function size_3d !***************************************************************************************** !***************************************************************************************** !> !  Actual size of a [[bspline_4d]] structure in bits. pure function size_4d ( me ) result ( s ) implicit none class ( bspline_4d ), intent ( in ) :: me integer :: s !! size of the structure in bits s = 2 * int_size + logical_size + 14 * int_size if ( allocated ( me % bcoef )) s = s + real_size * size ( me % bcoef , 1 ) * & size ( me % bcoef , 2 ) * & size ( me % bcoef , 3 ) * & size ( me % bcoef , 4 ) if ( allocated ( me % tx )) s = s + real_size * size ( me % tx ) if ( allocated ( me % ty )) s = s + real_size * size ( me % ty ) if ( allocated ( me % tz )) s = s + real_size * size ( me % tz ) if ( allocated ( me % tq )) s = s + real_size * size ( me % tq ) end function size_4d !***************************************************************************************** !***************************************************************************************** !> !  Actual size of a [[bspline_5d]] structure in bits. pure function size_5d ( me ) result ( s ) implicit none class ( bspline_5d ), intent ( in ) :: me integer :: s !! size of the structure in bits s = 2 * int_size + logical_size + 18 * int_size if ( allocated ( me % bcoef )) s = s + real_size * size ( me % bcoef , 1 ) * & size ( me % bcoef , 2 ) * & size ( me % bcoef , 3 ) * & size ( me % bcoef , 4 ) * & size ( me % bcoef , 5 ) if ( allocated ( me % tx )) s = s + real_size * size ( me % tx ) if ( allocated ( me % ty )) s = s + real_size * size ( me % ty ) if ( allocated ( me % tz )) s = s + real_size * size ( me % tz ) if ( allocated ( me % tq )) s = s + real_size * size ( me % tq ) if ( allocated ( me % tr )) s = s + real_size * size ( me % tr ) end function size_5d !***************************************************************************************** !***************************************************************************************** !> !  Actual size of a [[bspline_6d]] structure in bits. pure function size_6d ( me ) result ( s ) implicit none class ( bspline_6d ), intent ( in ) :: me integer :: s !! size of the structure in bits s = 2 * int_size + logical_size + 22 * int_size if ( allocated ( me % bcoef )) s = s + real_size * size ( me % bcoef , 1 ) * & size ( me % bcoef , 2 ) * & size ( me % bcoef , 3 ) * & size ( me % bcoef , 4 ) * & size ( me % bcoef , 5 ) * & size ( me % bcoef , 6 ) if ( allocated ( me % tx )) s = s + real_size * size ( me % tx ) if ( allocated ( me % ty )) s = s + real_size * size ( me % ty ) if ( allocated ( me % tz )) s = s + real_size * size ( me % tz ) if ( allocated ( me % tq )) s = s + real_size * size ( me % tq ) if ( allocated ( me % tr )) s = s + real_size * size ( me % tr ) if ( allocated ( me % ts )) s = s + real_size * size ( me % ts ) end function size_6d !***************************************************************************************** !***************************************************************************************** !> !  Destructor for contents of the base [[bspline_class]] class. !  (this routine is called by the extended classes). pure subroutine destroy_base ( me ) implicit none class ( bspline_class ), intent ( inout ) :: me me % inbvx = 1 me % iflag = 1 me % initialized = . false . me % extrap = . false . end subroutine destroy_base !***************************************************************************************** !***************************************************************************************** !> !  Destructor for [[bspline_1d]] class. pure subroutine destroy_1d ( me ) implicit none class ( bspline_1d ), intent ( inout ) :: me call me % destroy_base () me % nx = 0 me % kx = 0 if ( allocated ( me % bcoef )) deallocate ( me % bcoef ) if ( allocated ( me % tx )) deallocate ( me % tx ) end subroutine destroy_1d !***************************************************************************************** !***************************************************************************************** !> !  Destructor for [[bspline_2d]] class. pure subroutine destroy_2d ( me ) implicit none class ( bspline_2d ), intent ( inout ) :: me call me % destroy_base () me % nx = 0 me % ny = 0 me % kx = 0 me % ky = 0 me % inbvy = 1 me % iloy = 1 if ( allocated ( me % bcoef )) deallocate ( me % bcoef ) if ( allocated ( me % tx )) deallocate ( me % tx ) if ( allocated ( me % ty )) deallocate ( me % ty ) end subroutine destroy_2d !***************************************************************************************** !***************************************************************************************** !> !  Destructor for [[bspline_3d]] class. pure subroutine destroy_3d ( me ) implicit none class ( bspline_3d ), intent ( inout ) :: me call me % destroy_base () me % nx = 0 me % ny = 0 me % nz = 0 me % kx = 0 me % ky = 0 me % kz = 0 me % inbvy = 1 me % inbvz = 1 me % iloy = 1 me % iloz = 1 if ( allocated ( me % bcoef )) deallocate ( me % bcoef ) if ( allocated ( me % tx )) deallocate ( me % tx ) if ( allocated ( me % ty )) deallocate ( me % ty ) if ( allocated ( me % tz )) deallocate ( me % tz ) end subroutine destroy_3d !***************************************************************************************** !***************************************************************************************** !> !  Destructor for [[bspline_4d]] class. pure subroutine destroy_4d ( me ) implicit none class ( bspline_4d ), intent ( inout ) :: me me % nx = 0 me % ny = 0 me % nz = 0 me % nq = 0 me % kx = 0 me % ky = 0 me % kz = 0 me % kq = 0 me % inbvy = 1 me % inbvz = 1 me % inbvq = 1 me % iloy = 1 me % iloz = 1 me % iloq = 1 if ( allocated ( me % bcoef )) deallocate ( me % bcoef ) if ( allocated ( me % tx )) deallocate ( me % tx ) if ( allocated ( me % ty )) deallocate ( me % ty ) if ( allocated ( me % tz )) deallocate ( me % tz ) if ( allocated ( me % tq )) deallocate ( me % tq ) end subroutine destroy_4d !***************************************************************************************** !***************************************************************************************** !> !  Destructor for [[bspline_5d]] class. pure subroutine destroy_5d ( me ) implicit none class ( bspline_5d ), intent ( inout ) :: me me % nx = 0 me % ny = 0 me % nz = 0 me % nq = 0 me % nr = 0 me % kx = 0 me % ky = 0 me % kz = 0 me % kq = 0 me % kr = 0 me % inbvy = 1 me % inbvz = 1 me % inbvq = 1 me % inbvr = 1 me % iloy = 1 me % iloz = 1 me % iloq = 1 me % ilor = 1 if ( allocated ( me % bcoef )) deallocate ( me % bcoef ) if ( allocated ( me % tx )) deallocate ( me % tx ) if ( allocated ( me % ty )) deallocate ( me % ty ) if ( allocated ( me % tz )) deallocate ( me % tz ) if ( allocated ( me % tq )) deallocate ( me % tq ) if ( allocated ( me % tr )) deallocate ( me % tr ) end subroutine destroy_5d !***************************************************************************************** !***************************************************************************************** !> !  Destructor for [[bspline_6d]] class. pure subroutine destroy_6d ( me ) implicit none class ( bspline_6d ), intent ( inout ) :: me me % nx = 0 me % ny = 0 me % nz = 0 me % nq = 0 me % nr = 0 me % ns = 0 me % kx = 0 me % ky = 0 me % kz = 0 me % kq = 0 me % kr = 0 me % ks = 0 me % inbvy = 1 me % inbvz = 1 me % inbvq = 1 me % inbvr = 1 me % inbvs = 1 me % iloy = 1 me % iloz = 1 me % iloq = 1 me % ilor = 1 me % ilos = 1 if ( allocated ( me % bcoef )) deallocate ( me % bcoef ) if ( allocated ( me % tx )) deallocate ( me % tx ) if ( allocated ( me % ty )) deallocate ( me % ty ) if ( allocated ( me % tz )) deallocate ( me % tz ) if ( allocated ( me % tq )) deallocate ( me % tq ) if ( allocated ( me % tr )) deallocate ( me % tr ) if ( allocated ( me % ts )) deallocate ( me % ts ) end subroutine destroy_6d !***************************************************************************************** !***************************************************************************************** !> !  Finalizer for [[bspline_1d]] class. Just a wrapper for [[destroy_1d]]. pure elemental subroutine finalize_1d ( me ) type ( bspline_1d ), intent ( inout ) :: me ; call me % destroy () end subroutine finalize_1d !***************************************************************************************** !***************************************************************************************** !> !  Finalizer for [[bspline_2d]] class. Just a wrapper for [[destroy_2d]]. pure elemental subroutine finalize_2d ( me ) type ( bspline_2d ), intent ( inout ) :: me ; call me % destroy () end subroutine finalize_2d !***************************************************************************************** !***************************************************************************************** !> !  Finalizer for [[bspline_3d]] class. Just a wrapper for [[destroy_3d]]. pure elemental subroutine finalize_3d ( me ) type ( bspline_3d ), intent ( inout ) :: me ; call me % destroy () end subroutine finalize_3d !***************************************************************************************** !***************************************************************************************** !> !  Finalizer for [[bspline_4d]] class. Just a wrapper for [[destroy_4d]]. pure elemental subroutine finalize_4d ( me ) type ( bspline_4d ), intent ( inout ) :: me ; call me % destroy () end subroutine finalize_4d !***************************************************************************************** !***************************************************************************************** !> !  Finalizer for [[bspline_5d]] class. Just a wrapper for [[destroy_5d]]. pure elemental subroutine finalize_5d ( me ) type ( bspline_5d ), intent ( inout ) :: me ; call me % destroy () end subroutine finalize_5d !***************************************************************************************** !***************************************************************************************** !> !  Finalizer for [[bspline_6d]] class. Just a wrapper for [[destroy_6d]]. pure elemental subroutine finalize_6d ( me ) type ( bspline_6d ), intent ( inout ) :: me ; call me % destroy () end subroutine finalize_6d !***************************************************************************************** !***************************************************************************************** !> !  Sets the `extrap` flag in the class. pure subroutine set_extrap_flag ( me , extrap ) implicit none class ( bspline_class ), intent ( inout ) :: me logical , intent ( in ), optional :: extrap !! if not present, then False is used if ( present ( extrap )) then me % extrap = extrap else me % extrap = . false . end if end subroutine set_extrap_flag !***************************************************************************************** !***************************************************************************************** !> !  It returns an empty [[bspline_1d]] type. Note that INITIALIZE still !  needs to be called before it can be used. !  Not really that useful except perhaps in some OpenMP applications. pure elemental function bspline_1d_constructor_empty () result ( me ) implicit none type ( bspline_1d ) :: me end function bspline_1d_constructor_empty !***************************************************************************************** !***************************************************************************************** !> !  Constructor for a [[bspline_1d]] type (auto knots). !  This is a wrapper for [[initialize_1d_auto_knots]]. pure function bspline_1d_constructor_auto_knots ( x , fcn , kx , extrap ) result ( me ) implicit none type ( bspline_1d ) :: me real ( wp ), dimension (:), intent ( in ) :: x !! `(nx)` array of x abcissae. Must be strictly increasing. real ( wp ), dimension (:), intent ( in ) :: fcn !! `(nx)` array of function values to interpolate. `fcn(i)` should !! contain the function value at the point `x(i)` integer , intent ( in ) :: kx !! The order of spline pieces in x !! (  2 \\le k_x < n_x  ) !! (order = polynomial degree + 1) logical , intent ( in ), optional :: extrap !! if true, then extrapolation is allowed !! (default is false) call initialize_1d_auto_knots ( me , x , fcn , kx , me % iflag , extrap ) end function bspline_1d_constructor_auto_knots !***************************************************************************************** !***************************************************************************************** !> !  Constructor for a [[bspline_1d]] type (user-specified knots). !  This is a wrapper for [[initialize_1d_specify_knots]]. pure function bspline_1d_constructor_specify_knots ( x , fcn , kx , tx , extrap ) result ( me ) implicit none type ( bspline_1d ) :: me real ( wp ), dimension (:), intent ( in ) :: x !! `(nx)` array of x abcissae. Must be strictly increasing. real ( wp ), dimension (:), intent ( in ) :: fcn !! `(nx)` array of function values to interpolate. `fcn(i)` should !! contain the function value at the point `x(i)` integer , intent ( in ) :: kx !! The order of spline pieces in x !! (  2 \\le k_x < n_x  ) !! (order = polynomial degree + 1) real ( wp ), dimension (:), intent ( in ) :: tx !! The `(nx+kx)` knots in the x direction !! for the spline interpolant. !! Must be non-decreasing. logical , intent ( in ), optional :: extrap !! if true, then extrapolation is allowed !! (default is false) call initialize_1d_specify_knots ( me , x , fcn , kx , tx , me % iflag , extrap ) end function bspline_1d_constructor_specify_knots !***************************************************************************************** !***************************************************************************************** !> !  Initialize a [[bspline_1d]] type (with automatically-computed knots). !  This is a wrapper for [[db1ink]]. pure subroutine initialize_1d_auto_knots ( me , x , fcn , kx , iflag , extrap ) implicit none class ( bspline_1d ), intent ( inout ) :: me real ( wp ), dimension (:), intent ( in ) :: x !! `(nx)` array of x abcissae. Must be strictly increasing. real ( wp ), dimension (:), intent ( in ) :: fcn !! `(nx)` array of function values to interpolate. `fcn(i)` should !! contain the function value at the point `x(i)` integer , intent ( in ) :: kx !! The order of spline pieces in x !! (  2 \\le k_x < n_x  ) !! (order = polynomial degree + 1) integer , intent ( out ) :: iflag !! status flag (see [[db1ink]]) logical , intent ( in ), optional :: extrap !! if true, then extrapolation is allowed !! (default is false) integer :: iknot integer :: nx call me % destroy () nx = size ( x ) me % nx = nx me % kx = kx allocate ( me % tx ( nx + kx )) allocate ( me % bcoef ( nx )) iknot = 0 !knot sequence chosen by db1ink call db1ink ( x , nx , fcn , kx , iknot , me % tx , me % bcoef , iflag ) if ( iflag == 0 ) then call me % set_extrap_flag ( extrap ) end if me % initialized = iflag == 0 me % iflag = iflag end subroutine initialize_1d_auto_knots !***************************************************************************************** !***************************************************************************************** !> !  Initialize a [[bspline_1d]] type (with user-specified knots). !  This is a wrapper for [[db1ink]]. pure subroutine initialize_1d_specify_knots ( me , x , fcn , kx , tx , iflag , extrap ) implicit none class ( bspline_1d ), intent ( inout ) :: me real ( wp ), dimension (:), intent ( in ) :: x !! `(nx)` array of x abcissae. Must be strictly increasing. real ( wp ), dimension (:), intent ( in ) :: fcn !! `(nx)` array of function values to interpolate. `fcn(i)` should !! contain the function value at the point `x(i)` integer , intent ( in ) :: kx !! The order of spline pieces in x !! (  2 \\le k_x < n_x  ) !! (order = polynomial degree + 1) real ( wp ), dimension (:), intent ( in ) :: tx !! The `(nx+kx)` knots in the x direction !! for the spline interpolant. !! Must be non-decreasing. integer , intent ( out ) :: iflag !! status flag (see [[db1ink]]) logical , intent ( in ), optional :: extrap !! if true, then extrapolation is allowed !! (default is false) integer :: nx call me % destroy () nx = size ( x ) call check_knot_vectors_sizes ( nx = nx , kx = kx , tx = tx , iflag = iflag ) if ( iflag == 0 ) then me % nx = nx me % kx = kx allocate ( me % tx ( nx + kx )) allocate ( me % bcoef ( nx )) me % tx = tx call db1ink ( x , nx , fcn , kx , 1 , me % tx , me % bcoef , iflag ) call me % set_extrap_flag ( extrap ) end if me % initialized = iflag == 0 me % iflag = iflag end subroutine initialize_1d_specify_knots !***************************************************************************************** !***************************************************************************************** !> !  Evaluate a [[bspline_1d]] interpolate.  This is a wrapper for [[db1val]]. pure subroutine evaluate_1d ( me , xval , idx , f , iflag ) implicit none class ( bspline_1d ), intent ( inout ) :: me real ( wp ), intent ( in ) :: xval !! x coordinate of evaluation point. integer , intent ( in ) :: idx !! x derivative of piecewise polynomial to evaluate. real ( wp ), intent ( out ) :: f !! interpolated value integer , intent ( out ) :: iflag !! status flag (see [[db1val]]) if ( me % initialized ) then call db1val ( xval , idx , me % tx , me % nx , me % kx , me % bcoef , f , iflag , me % inbvx , me % extrap ) else iflag = 1 end if me % iflag = iflag end subroutine evaluate_1d !***************************************************************************************** !***************************************************************************************** !> !  Evaluate a [[bspline_1d]] definite integral.  This is a wrapper for [[db1sqad]]. pure subroutine integral_1d ( me , x1 , x2 , f , iflag ) implicit none class ( bspline_1d ), intent ( inout ) :: me real ( wp ), intent ( in ) :: x1 !! left point of interval real ( wp ), intent ( in ) :: x2 !! right point of interval real ( wp ), intent ( out ) :: f !! integral of the b-spline over  [x_1, x_2]  integer , intent ( out ) :: iflag !! status flag (see [[db1sqad]]) if ( me % initialized ) then call db1sqad ( me % tx , me % bcoef , me % nx , me % kx , x1 , x2 , f , iflag ) else iflag = 1 end if me % iflag = iflag end subroutine integral_1d !***************************************************************************************** !***************************************************************************************** !> !  Evaluate a [[bspline_1d]] definite integral.  This is a wrapper for [[db1fqad]]. subroutine fintegral_1d ( me , fun , idx , x1 , x2 , tol , f , iflag ) implicit none class ( bspline_1d ), intent ( inout ) :: me procedure ( b1fqad_func ) :: fun !! external function of one argument for the !! integrand `bf(x)=fun(x)*dbvalu(tx,bcoef,nx,kx,idx,x,inbv)` integer , intent ( in ) :: idx !! order of the spline derivative, `0 <= idx <= k-1` !! `idx=0` gives the spline function real ( wp ), intent ( in ) :: x1 !! left point of interval real ( wp ), intent ( in ) :: x2 !! right point of interval real ( wp ), intent ( in ) :: tol !! desired accuracy for the quadrature real ( wp ), intent ( out ) :: f !! integral of `bf(x)` over  [x_1, x_2]  integer , intent ( out ) :: iflag !! status flag (see [[db1sqad]]) if ( me % initialized ) then call db1fqad ( fun , me % tx , me % bcoef , me % nx , me % kx , idx , x1 , x2 , tol , f , iflag ) else iflag = 1 end if me % iflag = iflag end subroutine fintegral_1d !***************************************************************************************** !***************************************************************************************** !> !  It returns an empty [[bspline_2d]] type. Note that INITIALIZE still !  needs to be called before it can be used. !  Not really that useful except perhaps in some OpenMP applications. elemental function bspline_2d_constructor_empty () result ( me ) implicit none type ( bspline_2d ) :: me end function bspline_2d_constructor_empty !***************************************************************************************** !***************************************************************************************** !> !  Constructor for a [[bspline_2d]] type (auto knots). !  This is a wrapper for [[initialize_2d_auto_knots]]. pure function bspline_2d_constructor_auto_knots ( x , y , fcn , kx , ky , extrap ) result ( me ) implicit none type ( bspline_2d ) :: me real ( wp ), dimension (:), intent ( in ) :: x !! `(nx)` array of x abcissae. Must be strictly increasing. real ( wp ), dimension (:), intent ( in ) :: y !! `(ny)` array of y abcissae. Must be strictly increasing. real ( wp ), dimension (:,:), intent ( in ) :: fcn !! `(nx,ny)` matrix of function values to interpolate. !! `fcn(i,j)` should contain the function value at the !! point (`x(i)`,`y(j)`) integer , intent ( in ) :: kx !! The order of spline pieces in x !! (  2 \\le k_x < n_x  ) !! (order = polynomial degree + 1) integer , intent ( in ) :: ky !! The order of spline pieces in y !! (  2 \\le k_y < n_y  ) !! (order = polynomial degree + 1) logical , intent ( in ), optional :: extrap !! if true, then extrapolation is allowed !! (default is false) call initialize_2d_auto_knots ( me , x , y , fcn , kx , ky , me % iflag , extrap ) end function bspline_2d_constructor_auto_knots !***************************************************************************************** !***************************************************************************************** !> !  Constructor for a [[bspline_2d]] type (user-specified knots). !  This is a wrapper for [[initialize_2d_specify_knots]]. pure function bspline_2d_constructor_specify_knots ( x , y , fcn , kx , ky , tx , ty , extrap ) result ( me ) implicit none type ( bspline_2d ) :: me real ( wp ), dimension (:), intent ( in ) :: x !! `(nx)` array of x abcissae. Must be strictly increasing. real ( wp ), dimension (:), intent ( in ) :: y !! `(ny)` array of y abcissae. Must be strictly increasing. real ( wp ), dimension (:,:), intent ( in ) :: fcn !! `(nx,ny)` matrix of function values to interpolate. !! `fcn(i,j)` should contain the function value at the !! point (`x(i)`,`y(j)`) integer , intent ( in ) :: kx !! The order of spline pieces in x !! (  2 \\le k_x < n_x  ) !! (order = polynomial degree + 1) integer , intent ( in ) :: ky !! The order of spline pieces in y !! (  2 \\le k_y < n_y  ) !! (order = polynomial degree + 1) real ( wp ), dimension (:), intent ( in ) :: tx !! The `(nx+kx)` knots in the x direction !! for the spline interpolant. !! Must be non-decreasing. real ( wp ), dimension (:), intent ( in ) :: ty !! The `(ny+ky)` knots in the y direction !! for the spline interpolant. !! Must be non-decreasing. logical , intent ( in ), optional :: extrap !! if true, then extrapolation is allowed !! (default is false) call initialize_2d_specify_knots ( me , x , y , fcn , kx , ky , tx , ty , me % iflag , extrap ) end function bspline_2d_constructor_specify_knots !***************************************************************************************** !***************************************************************************************** !> !  Initialize a [[bspline_2d]] type (with automatically-computed knots). !  This is a wrapper for [[db2ink]]. pure subroutine initialize_2d_auto_knots ( me , x , y , fcn , kx , ky , iflag , extrap ) implicit none class ( bspline_2d ), intent ( inout ) :: me real ( wp ), dimension (:), intent ( in ) :: x !! `(nx)` array of x abcissae. Must be strictly increasing. real ( wp ), dimension (:), intent ( in ) :: y !! `(ny)` array of y abcissae. Must be strictly increasing. real ( wp ), dimension (:,:), intent ( in ) :: fcn !! `(nx,ny)` matrix of function values to interpolate. !! `fcn(i,j)` should contain the function value at the !! point (`x(i)`,`y(j)`) integer , intent ( in ) :: kx !! The order of spline pieces in x !! (  2 \\le k_x < n_x  ) !! (order = polynomial degree + 1) integer , intent ( in ) :: ky !! The order of spline pieces in y !! (  2 \\le k_y < n_y  ) !! (order = polynomial degree + 1) integer , intent ( out ) :: iflag !! status flag (see [[db2ink]]) logical , intent ( in ), optional :: extrap !! if true, then extrapolation is allowed !! (default is false) integer :: iknot integer :: nx , ny call me % destroy () nx = size ( x ) ny = size ( y ) me % nx = nx me % ny = ny me % kx = kx me % ky = ky allocate ( me % tx ( nx + kx )) allocate ( me % ty ( ny + ky )) allocate ( me % bcoef ( nx , ny )) iknot = 0 !knot sequence chosen by db2ink call db2ink ( x , nx , y , ny , fcn , kx , ky , iknot , me % tx , me % ty , me % bcoef , iflag ) if ( iflag == 0 ) then call me % set_extrap_flag ( extrap ) end if me % initialized = iflag == 0 me % iflag = iflag end subroutine initialize_2d_auto_knots !***************************************************************************************** !***************************************************************************************** !> !  Initialize a [[bspline_2d]] type (with user-specified knots). !  This is a wrapper for [[db2ink]]. pure subroutine initialize_2d_specify_knots ( me , x , y , fcn , kx , ky , tx , ty , iflag , extrap ) implicit none class ( bspline_2d ), intent ( inout ) :: me real ( wp ), dimension (:), intent ( in ) :: x !! `(nx)` array of x abcissae. Must be strictly increasing. real ( wp ), dimension (:), intent ( in ) :: y !! `(ny)` array of y abcissae. Must be strictly increasing. real ( wp ), dimension (:,:), intent ( in ) :: fcn !! `(nx,ny)` matrix of function values to interpolate. !! `fcn(i,j)` should contain the function value at the !! point (`x(i)`,`y(j)`) integer , intent ( in ) :: kx !! The order of spline pieces in x !! (  2 \\le k_x < n_x  ) !! (order = polynomial degree + 1) integer , intent ( in ) :: ky !! The order of spline pieces in y !! (  2 \\le k_y < n_y  ) !! (order = polynomial degree + 1) real ( wp ), dimension (:), intent ( in ) :: tx !! The `(nx+kx)` knots in the x direction !! for the spline interpolant. !! Must be non-decreasing. real ( wp ), dimension (:), intent ( in ) :: ty !! The `(ny+ky)` knots in the y direction !! for the spline interpolant. !! Must be non-decreasing. integer , intent ( out ) :: iflag !! status flag (see [[db2ink]]) logical , intent ( in ), optional :: extrap !! if true, then extrapolation is allowed !! (default is false) integer :: nx , ny call me % destroy () nx = size ( x ) ny = size ( y ) call check_knot_vectors_sizes ( nx = nx , kx = kx , tx = tx ,& ny = ny , ky = ky , ty = ty ,& iflag = iflag ) if ( iflag == 0 ) then me % nx = nx me % ny = ny me % kx = kx me % ky = ky allocate ( me % tx ( nx + kx )) allocate ( me % ty ( ny + ky )) allocate ( me % bcoef ( nx , ny )) me % tx = tx me % ty = ty call db2ink ( x , nx , y , ny , fcn , kx , ky , 1 , me % tx , me % ty , me % bcoef , iflag ) call me % set_extrap_flag ( extrap ) end if me % initialized = iflag == 0 me % iflag = iflag end subroutine initialize_2d_specify_knots !***************************************************************************************** !***************************************************************************************** !> !  Evaluate a [[bspline_2d]] interpolate.  This is a wrapper for [[db2val]]. pure subroutine evaluate_2d ( me , xval , yval , idx , idy , f , iflag ) implicit none class ( bspline_2d ), intent ( inout ) :: me real ( wp ), intent ( in ) :: xval !! x coordinate of evaluation point. real ( wp ), intent ( in ) :: yval !! y coordinate of evaluation point. integer , intent ( in ) :: idx !! x derivative of piecewise polynomial to evaluate. integer , intent ( in ) :: idy !! y derivative of piecewise polynomial to evaluate. real ( wp ), intent ( out ) :: f !! interpolated value integer , intent ( out ) :: iflag !! status flag (see [[db2val]]) if ( me % initialized ) then call db2val ( xval , yval ,& idx , idy ,& me % tx , me % ty ,& me % nx , me % ny ,& me % kx , me % ky ,& me % bcoef , f , iflag ,& me % inbvx , me % inbvy , me % iloy ,& me % extrap ) else iflag = 1 end if me % iflag = iflag end subroutine evaluate_2d !***************************************************************************************** !***************************************************************************************** !> !  It returns an empty [[bspline_3d]] type. Note that INITIALIZE still !  needs to be called before it can be used. !  Not really that useful except perhaps in some OpenMP applications. elemental function bspline_3d_constructor_empty () result ( me ) implicit none type ( bspline_3d ) :: me end function bspline_3d_constructor_empty !***************************************************************************************** !***************************************************************************************** !> !  Constructor for a [[bspline_3d]] type (auto knots). !  This is a wrapper for [[initialize_3d_auto_knots]]. pure function bspline_3d_constructor_auto_knots ( x , y , z , fcn , kx , ky , kz , extrap ) result ( me ) implicit none type ( bspline_3d ) :: me real ( wp ), dimension (:), intent ( in ) :: x !! `(nx)` array of x abcissae. Must be strictly increasing. real ( wp ), dimension (:), intent ( in ) :: y !! `(ny)` array of y abcissae. Must be strictly increasing. real ( wp ), dimension (:), intent ( in ) :: z !! `(nz)` array of z abcissae. Must be strictly increasing. real ( wp ), dimension (:,:,:), intent ( in ) :: fcn !! `(nx,ny,nz)` matrix of function values to interpolate. !! `fcn(i,j,k)` should contain the function value at the !! point (`x(i)`,`y(j)`,`z(k)`) integer , intent ( in ) :: kx !! The order of spline pieces in x !! (  2 \\le k_x < n_x  ) !! (order = polynomial degree + 1) integer , intent ( in ) :: ky !! The order of spline pieces in y !! (  2 \\le k_y < n_y  ) !! (order = polynomial degree + 1) integer , intent ( in ) :: kz !! The order of spline pieces in z !! (  2 \\le k_z < n_z  ) !! (order = polynomial degree + 1) logical , intent ( in ), optional :: extrap !! if true, then extrapolation is allowed !! (default is false) call initialize_3d_auto_knots ( me , x , y , z , fcn , kx , ky , kz , me % iflag , extrap ) end function bspline_3d_constructor_auto_knots !***************************************************************************************** !***************************************************************************************** !> !  Constructor for a [[bspline_3d]] type (user-specified knots). !  This is a wrapper for [[initialize_3d_specify_knots]]. pure function bspline_3d_constructor_specify_knots ( x , y , z , fcn , kx , ky , kz , tx , ty , tz , extrap ) result ( me ) implicit none type ( bspline_3d ) :: me real ( wp ), dimension (:), intent ( in ) :: x !! `(nx)` array of x abcissae. Must be strictly increasing. real ( wp ), dimension (:), intent ( in ) :: y !! `(ny)` array of y abcissae. Must be strictly increasing. real ( wp ), dimension (:), intent ( in ) :: z !! `(nz)` array of z abcissae. Must be strictly increasing. real ( wp ), dimension (:,:,:), intent ( in ) :: fcn !! `(nx,ny,nz)` matrix of function values to interpolate. !! `fcn(i,j,k)` should contain the function value at the !! point (`x(i)`,`y(j)`,`z(k)`) integer , intent ( in ) :: kx !! The order of spline pieces in x !! (  2 \\le k_x < n_x  ) !! (order = polynomial degree + 1) integer , intent ( in ) :: ky !! The order of spline pieces in y !! (  2 \\le k_y < n_y  ) !! (order = polynomial degree + 1) integer , intent ( in ) :: kz !! The order of spline pieces in z !! (  2 \\le k_z < n_z  ) !! (order = polynomial degree + 1) real ( wp ), dimension (:), intent ( in ) :: tx !! The `(nx+kx)` knots in the x direction !! for the spline interpolant. !! Must be non-decreasing. real ( wp ), dimension (:), intent ( in ) :: ty !! The `(ny+ky)` knots in the y direction !! for the spline interpolant. !! Must be non-decreasing. real ( wp ), dimension (:), intent ( in ) :: tz !! The `(nz+kz)` knots in the z direction !! for the spline interpolant. !! Must be non-decreasing. logical , intent ( in ), optional :: extrap !! if true, then extrapolation is allowed !! (default is false) call initialize_3d_specify_knots ( me , x , y , z , fcn , kx , ky , kz , tx , ty , tz , me % iflag , extrap ) end function bspline_3d_constructor_specify_knots !***************************************************************************************** !***************************************************************************************** !> !  Initialize a [[bspline_3d]] type (with automatically-computed knots). !  This is a wrapper for [[db3ink]]. pure subroutine initialize_3d_auto_knots ( me , x , y , z , fcn , kx , ky , kz , iflag , extrap ) implicit none class ( bspline_3d ), intent ( inout ) :: me real ( wp ), dimension (:), intent ( in ) :: x !! `(nx)` array of x abcissae. Must be strictly increasing. real ( wp ), dimension (:), intent ( in ) :: y !! `(ny)` array of y abcissae. Must be strictly increasing. real ( wp ), dimension (:), intent ( in ) :: z !! `(nz)` array of z abcissae. Must be strictly increasing. real ( wp ), dimension (:,:,:), intent ( in ) :: fcn !! `(nx,ny,nz)` matrix of function values to interpolate. !! `fcn(i,j,k)` should contain the function value at the !! point (`x(i)`,`y(j)`,`z(k)`) integer , intent ( in ) :: kx !! The order of spline pieces in x !! (  2 \\le k_x < n_x  ) !! (order = polynomial degree + 1) integer , intent ( in ) :: ky !! The order of spline pieces in y !! (  2 \\le k_y < n_y  ) !! (order = polynomial degree + 1) integer , intent ( in ) :: kz !! The order of spline pieces in z !! (  2 \\le k_z < n_z  ) !! (order = polynomial degree + 1) integer , intent ( out ) :: iflag !! status flag (see [[db3ink]]) logical , intent ( in ), optional :: extrap !! if true, then extrapolation is allowed !! (default is false) integer :: iknot integer :: nx , ny , nz call me % destroy () nx = size ( x ) ny = size ( y ) nz = size ( z ) me % nx = nx me % ny = ny me % nz = nz me % kx = kx me % ky = ky me % kz = kz allocate ( me % tx ( nx + kx )) allocate ( me % ty ( ny + ky )) allocate ( me % tz ( nz + kz )) allocate ( me % bcoef ( nx , ny , nz )) iknot = 0 !knot sequence chosen by db3ink call db3ink ( x , nx , y , ny , z , nz ,& fcn ,& kx , ky , kz ,& iknot ,& me % tx , me % ty , me % tz ,& me % bcoef , iflag ) if ( iflag == 0 ) then call me % set_extrap_flag ( extrap ) end if me % initialized = iflag == 0 me % iflag = iflag end subroutine initialize_3d_auto_knots !***************************************************************************************** !***************************************************************************************** !> !  Initialize a [[bspline_3d]] type (with user-specified knots). !  This is a wrapper for [[db3ink]]. pure subroutine initialize_3d_specify_knots ( me , x , y , z , fcn , kx , ky , kz , tx , ty , tz , iflag , extrap ) implicit none class ( bspline_3d ), intent ( inout ) :: me real ( wp ), dimension (:), intent ( in ) :: x !! `(nx)` array of x abcissae. Must be strictly increasing. real ( wp ), dimension (:), intent ( in ) :: y !! `(ny)` array of y abcissae. Must be strictly increasing. real ( wp ), dimension (:), intent ( in ) :: z !! `(nz)` array of z abcissae. Must be strictly increasing. real ( wp ), dimension (:,:,:), intent ( in ) :: fcn !! `(nx,ny,nz)` matrix of function values to interpolate. !! `fcn(i,j,k)` should contain the function value at the !! point (`x(i)`,`y(j)`,`z(k)`) integer , intent ( in ) :: kx !! The order of spline pieces in x !! (  2 \\le k_x < n_x  ) !! (order = polynomial degree + 1) integer , intent ( in ) :: ky !! The order of spline pieces in y !! (  2 \\le k_y < n_y  ) !! (order = polynomial degree + 1) integer , intent ( in ) :: kz !! The order of spline pieces in z !! (  2 \\le k_z < n_z  ) !! (order = polynomial degree + 1) real ( wp ), dimension (:), intent ( in ) :: tx !! The `(nx+kx)` knots in the x direction !! for the spline interpolant. !! Must be non-decreasing. real ( wp ), dimension (:), intent ( in ) :: ty !! The `(ny+ky)` knots in the y direction !! for the spline interpolant. !! Must be non-decreasing. real ( wp ), dimension (:), intent ( in ) :: tz !! The `(nz+kz)` knots in the z direction !! for the spline interpolant. !! Must be non-decreasing. integer , intent ( out ) :: iflag !! status flag (see [[db3ink]]) logical , intent ( in ), optional :: extrap !! if true, then extrapolation is allowed !! (default is false) integer :: nx , ny , nz call me % destroy () nx = size ( x ) ny = size ( y ) nz = size ( z ) call check_knot_vectors_sizes ( nx = nx , kx = kx , tx = tx ,& ny = ny , ky = ky , ty = ty ,& nz = nz , kz = kz , tz = tz ,& iflag = iflag ) if ( iflag == 0 ) then me % nx = nx me % ny = ny me % nz = nz me % kx = kx me % ky = ky me % kz = kz allocate ( me % tx ( nx + kx )) allocate ( me % ty ( ny + ky )) allocate ( me % tz ( nz + kz )) allocate ( me % bcoef ( nx , ny , nz )) me % tx = tx me % ty = ty me % tz = tz call db3ink ( x , nx , y , ny , z , nz ,& fcn ,& kx , ky , kz ,& 1 ,& me % tx , me % ty , me % tz ,& me % bcoef , iflag ) call me % set_extrap_flag ( extrap ) end if me % initialized = iflag == 0 me % iflag = iflag end subroutine initialize_3d_specify_knots !***************************************************************************************** !***************************************************************************************** !> !  Evaluate a [[bspline_3d]] interpolate.  This is a wrapper for [[db3val]]. pure subroutine evaluate_3d ( me , xval , yval , zval , idx , idy , idz , f , iflag ) implicit none class ( bspline_3d ), intent ( inout ) :: me real ( wp ), intent ( in ) :: xval !! x coordinate of evaluation point. real ( wp ), intent ( in ) :: yval !! y coordinate of evaluation point. real ( wp ), intent ( in ) :: zval !! z coordinate of evaluation point. integer , intent ( in ) :: idx !! x derivative of piecewise polynomial to evaluate. integer , intent ( in ) :: idy !! y derivative of piecewise polynomial to evaluate. integer , intent ( in ) :: idz !! z derivative of piecewise polynomial to evaluate. real ( wp ), intent ( out ) :: f !! interpolated value integer , intent ( out ) :: iflag !! status flag (see [[db3val]]) if ( me % initialized ) then call db3val ( xval , yval , zval ,& idx , idy , idz ,& me % tx , me % ty , me % tz ,& me % nx , me % ny , me % nz ,& me % kx , me % ky , me % kz ,& me % bcoef , f , iflag ,& me % inbvx , me % inbvy , me % inbvz ,& me % iloy , me % iloz ,& me % extrap ) else iflag = 1 end if me % iflag = iflag end subroutine evaluate_3d !***************************************************************************************** !***************************************************************************************** !> !  It returns an empty [[bspline_4d]] type. Note that INITIALIZE still !  needs to be called before it can be used. !  Not really that useful except perhaps in some OpenMP applications. elemental function bspline_4d_constructor_empty () result ( me ) implicit none type ( bspline_4d ) :: me end function bspline_4d_constructor_empty !***************************************************************************************** !***************************************************************************************** !> !  Constructor for a [[bspline_4d]] type (auto knots). !  This is a wrapper for [[initialize_4d_auto_knots]]. pure function bspline_4d_constructor_auto_knots ( x , y , z , q , fcn , kx , ky , kz , kq , extrap ) result ( me ) implicit none type ( bspline_4d ) :: me real ( wp ), dimension (:), intent ( in ) :: x !! `(nx)` array of x abcissae. Must be strictly increasing. real ( wp ), dimension (:), intent ( in ) :: y !! `(ny)` array of y abcissae. Must be strictly increasing. real ( wp ), dimension (:), intent ( in ) :: z !! `(nz)` array of z abcissae. Must be strictly increasing. real ( wp ), dimension (:), intent ( in ) :: q !! `(nq)` array of q abcissae. Must be strictly increasing. real ( wp ), dimension (:,:,:,:), intent ( in ) :: fcn !! `(nx,ny,nz,nq)` matrix of function values to interpolate. !! `fcn(i,j,k,l)` should contain the function value at the !! point (`x(i)`,`y(j)`,`z(k)`,`q(l)`) integer , intent ( in ) :: kx !! The order of spline pieces in x !! (  2 \\le k_x < n_x  ) !! (order = polynomial degree + 1) integer , intent ( in ) :: ky !! The order of spline pieces in y !! (  2 \\le k_y < n_y  ) !! (order = polynomial degree + 1) integer , intent ( in ) :: kz !! The order of spline pieces in z !! (  2 \\le k_z < n_z  ) !! (order = polynomial degree + 1) integer , intent ( in ) :: kq !! The order of spline pieces in q !! (  2 \\le k_q < n_q  ) !! (order = polynomial degree + 1) logical , intent ( in ), optional :: extrap !! if true, then extrapolation is allowed !! (default is false) call initialize_4d_auto_knots ( me , x , y , z , q , fcn , kx , ky , kz , kq , me % iflag , extrap ) end function bspline_4d_constructor_auto_knots !***************************************************************************************** !***************************************************************************************** !> !  Constructor for a [[bspline_4d]] type (user-specified knots). !  This is a wrapper for [[initialize_4d_specify_knots]]. pure function bspline_4d_constructor_specify_knots ( x , y , z , q , fcn , kx , ky , kz , kq ,& tx , ty , tz , tq , extrap ) result ( me ) implicit none type ( bspline_4d ) :: me real ( wp ), dimension (:), intent ( in ) :: x !! `(nx)` array of x abcissae. Must be strictly increasing. real ( wp ), dimension (:), intent ( in ) :: y !! `(ny)` array of y abcissae. Must be strictly increasing. real ( wp ), dimension (:), intent ( in ) :: z !! `(nz)` array of z abcissae. Must be strictly increasing. real ( wp ), dimension (:), intent ( in ) :: q !! `(nq)` array of q abcissae. Must be strictly increasing. real ( wp ), dimension (:,:,:,:), intent ( in ) :: fcn !! `(nx,ny,nz,nq)` matrix of function values to interpolate. !! `fcn(i,j,k,l)` should contain the function value at the !! point (`x(i)`,`y(j)`,`z(k)`,`q(l)`) integer , intent ( in ) :: kx !! The order of spline pieces in x !! (  2 \\le k_x < n_x  ) !! (order = polynomial degree + 1) integer , intent ( in ) :: ky !! The order of spline pieces in y !! (  2 \\le k_y < n_y  ) !! (order = polynomial degree + 1) integer , intent ( in ) :: kz !! The order of spline pieces in z !! (  2 \\le k_z < n_z  ) !! (order = polynomial degree + 1) integer , intent ( in ) :: kq !! The order of spline pieces in q !! (  2 \\le k_q < n_q  ) !! (order = polynomial degree + 1) real ( wp ), dimension (:), intent ( in ) :: tx !! The `(nx+kx)` knots in the x direction !! for the spline interpolant. !! Must be non-decreasing. real ( wp ), dimension (:), intent ( in ) :: ty !! The `(ny+ky)` knots in the y direction !! for the spline interpolant. !! Must be non-decreasing. real ( wp ), dimension (:), intent ( in ) :: tz !! The `(nz+kz)` knots in the z direction !! for the spline interpolant. !! Must be non-decreasing. real ( wp ), dimension (:), intent ( in ) :: tq !! The `(nq+kq)` knots in the q direction !! for the spline interpolant. !! Must be non-decreasing. logical , intent ( in ), optional :: extrap !! if true, then extrapolation is allowed !! (default is false) call initialize_4d_specify_knots ( me , x , y , z , q , fcn , kx , ky , kz , kq , tx , ty , tz , tq , me % iflag , extrap ) end function bspline_4d_constructor_specify_knots !***************************************************************************************** !***************************************************************************************** !> !  Initialize a [[bspline_4d]] type (with automatically-computed knots). !  This is a wrapper for [[db4ink]]. pure subroutine initialize_4d_auto_knots ( me , x , y , z , q , fcn , kx , ky , kz , kq , iflag , extrap ) implicit none class ( bspline_4d ), intent ( inout ) :: me real ( wp ), dimension (:), intent ( in ) :: x !! `(nx)` array of x abcissae. Must be strictly increasing. real ( wp ), dimension (:), intent ( in ) :: y !! `(ny)` array of y abcissae. Must be strictly increasing. real ( wp ), dimension (:), intent ( in ) :: z !! `(nz)` array of z abcissae. Must be strictly increasing. real ( wp ), dimension (:), intent ( in ) :: q !! `(nq)` array of q abcissae. Must be strictly increasing. real ( wp ), dimension (:,:,:,:), intent ( in ) :: fcn !! `(nx,ny,nz,nq)` matrix of function values to interpolate. !! `fcn(i,j,k,l)` should contain the function value at the !! point (`x(i)`,`y(j)`,`z(k)`,`q(l)`) integer , intent ( in ) :: kx !! The order of spline pieces in x !! (  2 \\le k_x < n_x  ) !! (order = polynomial degree + 1) integer , intent ( in ) :: ky !! The order of spline pieces in y !! (  2 \\le k_y < n_y  ) !! (order = polynomial degree + 1) integer , intent ( in ) :: kz !! The order of spline pieces in z !! (  2 \\le k_z < n_z  ) !! (order = polynomial degree + 1) integer , intent ( in ) :: kq !! The order of spline pieces in q !! (  2 \\le k_q < n_q  ) !! (order = polynomial degree + 1) integer , intent ( out ) :: iflag !! status flag (see [[db4ink]]) logical , intent ( in ), optional :: extrap !! if true, then extrapolation is allowed !! (default is false) integer :: iknot integer :: nx , ny , nz , nq call me % destroy () nx = size ( x ) ny = size ( y ) nz = size ( z ) nq = size ( q ) me % nx = nx me % ny = ny me % nz = nz me % nq = nq me % kx = kx me % ky = ky me % kz = kz me % kq = kq allocate ( me % tx ( nx + kx )) allocate ( me % ty ( ny + ky )) allocate ( me % tz ( nz + kz )) allocate ( me % tq ( nq + kq )) allocate ( me % bcoef ( nx , ny , nz , nq )) iknot = 0 !knot sequence chosen by db4ink call db4ink ( x , nx , y , ny , z , nz , q , nq ,& fcn ,& kx , ky , kz , kq ,& iknot ,& me % tx , me % ty , me % tz , me % tq ,& me % bcoef , iflag ) if ( iflag == 0 ) then call me % set_extrap_flag ( extrap ) end if me % initialized = iflag == 0 me % iflag = iflag end subroutine initialize_4d_auto_knots !***************************************************************************************** !***************************************************************************************** !> !  Initialize a [[bspline_4d]] type (with user-specified knots). !  This is a wrapper for [[db4ink]]. pure subroutine initialize_4d_specify_knots ( me , x , y , z , q , fcn ,& kx , ky , kz , kq , tx , ty , tz , tq , iflag , extrap ) implicit none class ( bspline_4d ), intent ( inout ) :: me real ( wp ), dimension (:), intent ( in ) :: x !! `(nx)` array of x abcissae. Must be strictly increasing. real ( wp ), dimension (:), intent ( in ) :: y !! `(ny)` array of y abcissae. Must be strictly increasing. real ( wp ), dimension (:), intent ( in ) :: z !! `(nz)` array of z abcissae. Must be strictly increasing. real ( wp ), dimension (:), intent ( in ) :: q !! `(nq)` array of q abcissae. Must be strictly increasing. real ( wp ), dimension (:,:,:,:), intent ( in ) :: fcn !! `(nx,ny,nz,nq)` matrix of function values to interpolate. !! `fcn(i,j,k,l)` should contain the function value at the !! point (`x(i)`,`y(j)`,`z(k)`,`q(l)`) integer , intent ( in ) :: kx !! The order of spline pieces in x !! (  2 \\le k_x < n_x  ) !! (order = polynomial degree + 1) integer , intent ( in ) :: ky !! The order of spline pieces in y !! (  2 \\le k_y < n_y  ) !! (order = polynomial degree + 1) integer , intent ( in ) :: kz !! The order of spline pieces in z !! (  2 \\le k_z < n_z  ) !! (order = polynomial degree + 1) integer , intent ( in ) :: kq !! The order of spline pieces in q !! (  2 \\le k_q < n_q  ) !! (order = polynomial degree + 1) real ( wp ), dimension (:), intent ( in ) :: tx !! The `(nx+kx)` knots in the x direction !! for the spline interpolant. !! Must be non-decreasing. real ( wp ), dimension (:), intent ( in ) :: ty !! The `(ny+ky)` knots in the y direction !! for the spline interpolant. !! Must be non-decreasing. real ( wp ), dimension (:), intent ( in ) :: tz !! The `(nz+kz)` knots in the z direction !! for the spline interpolant. !! Must be non-decreasing. real ( wp ), dimension (:), intent ( in ) :: tq !! The `(nq+kq)` knots in the q direction !! for the spline interpolant. !! Must be non-decreasing. integer , intent ( out ) :: iflag !! status flag (see [[db4ink]]) logical , intent ( in ), optional :: extrap !! if true, then extrapolation is allowed !! (default is false) integer :: nx , ny , nz , nq call me % destroy () nx = size ( x ) ny = size ( y ) nz = size ( z ) nq = size ( q ) call check_knot_vectors_sizes ( nx = nx , kx = kx , tx = tx ,& ny = ny , ky = ky , ty = ty ,& nz = nz , kz = kz , tz = tz ,& nq = nq , kq = kq , tq = tq ,& iflag = iflag ) if ( iflag == 0 ) then me % nx = nx me % ny = ny me % nz = nz me % nq = nq me % kx = kx me % ky = ky me % kz = kz me % kq = kq allocate ( me % tx ( nx + kx )) allocate ( me % ty ( ny + ky )) allocate ( me % tz ( nz + kz )) allocate ( me % tq ( nq + kq )) allocate ( me % bcoef ( nx , ny , nz , nq )) me % tx = tx me % ty = ty me % tz = tz me % tq = tq call db4ink ( x , nx , y , ny , z , nz , q , nq ,& fcn ,& kx , ky , kz , kq ,& 1 ,& me % tx , me % ty , me % tz , me % tq ,& me % bcoef , iflag ) call me % set_extrap_flag ( extrap ) end if me % initialized = iflag == 0 me % iflag = iflag end subroutine initialize_4d_specify_knots !***************************************************************************************** !***************************************************************************************** !> !  Evaluate a [[bspline_4d]] interpolate.  This is a wrapper for [[db4val]]. pure subroutine evaluate_4d ( me , xval , yval , zval , qval , idx , idy , idz , idq , f , iflag ) implicit none class ( bspline_4d ), intent ( inout ) :: me real ( wp ), intent ( in ) :: xval !! x coordinate of evaluation point. real ( wp ), intent ( in ) :: yval !! y coordinate of evaluation point. real ( wp ), intent ( in ) :: zval !! z coordinate of evaluation point. real ( wp ), intent ( in ) :: qval !! q coordinate of evaluation point. integer , intent ( in ) :: idx !! x derivative of piecewise polynomial to evaluate. integer , intent ( in ) :: idy !! y derivative of piecewise polynomial to evaluate. integer , intent ( in ) :: idz !! z derivative of piecewise polynomial to evaluate. integer , intent ( in ) :: idq !! q derivative of piecewise polynomial to evaluate. real ( wp ), intent ( out ) :: f !! interpolated value integer , intent ( out ) :: iflag !! status flag (see [[db4val]]) if ( me % initialized ) then call db4val ( xval , yval , zval , qval ,& idx , idy , idz , idq ,& me % tx , me % ty , me % tz , me % tq ,& me % nx , me % ny , me % nz , me % nq ,& me % kx , me % ky , me % kz , me % kq ,& me % bcoef , f , iflag ,& me % inbvx , me % inbvy , me % inbvz , me % inbvq ,& me % iloy , me % iloz , me % iloq ,& me % extrap ) else iflag = 1 end if me % iflag = iflag end subroutine evaluate_4d !***************************************************************************************** !***************************************************************************************** !> !  It returns an empty [[bspline_5d]] type. Note that INITIALIZE still !  needs to be called before it can be used. !  Not really that useful except perhaps in some OpenMP applications. elemental function bspline_5d_constructor_empty () result ( me ) implicit none type ( bspline_5d ) :: me end function bspline_5d_constructor_empty !***************************************************************************************** !***************************************************************************************** !> !  Constructor for a [[bspline_5d]] type (auto knots). !  This is a wrapper for [[initialize_5d_auto_knots]]. pure function bspline_5d_constructor_auto_knots ( x , y , z , q , r , fcn , kx , ky , kz , kq , kr , extrap ) result ( me ) implicit none type ( bspline_5d ) :: me real ( wp ), dimension (:), intent ( in ) :: x !! `(nx)` array of x abcissae. Must be strictly increasing. real ( wp ), dimension (:), intent ( in ) :: y !! `(ny)` array of y abcissae. Must be strictly increasing. real ( wp ), dimension (:), intent ( in ) :: z !! `(nz)` array of z abcissae. Must be strictly increasing. real ( wp ), dimension (:), intent ( in ) :: q !! `(nq)` array of q abcissae. Must be strictly increasing. real ( wp ), dimension (:), intent ( in ) :: r !! `(nr)` array of r abcissae. Must be strictly increasing. real ( wp ), dimension (:,:,:,:,:), intent ( in ) :: fcn !! `(nx,ny,nz,nq,nr)` matrix of function values to interpolate. !! `fcn(i,j,k,l,m)` should contain the function value at the !! point (`x(i)`,`y(j)`,`z(k)`,`q(l)`,`r(m)`) integer , intent ( in ) :: kx !! The order of spline pieces in x !! (  2 \\le k_x < n_x  ) !! (order = polynomial degree + 1) integer , intent ( in ) :: ky !! The order of spline pieces in y !! (  2 \\le k_y < n_y  ) !! (order = polynomial degree + 1) integer , intent ( in ) :: kz !! The order of spline pieces in z !! (  2 \\le k_z < n_z  ) !! (order = polynomial degree + 1) integer , intent ( in ) :: kq !! The order of spline pieces in q !! (  2 \\le k_q < n_q  ) !! (order = polynomial degree + 1) integer , intent ( in ) :: kr !! The order of spline pieces in r !! (  2 \\le k_r < n_r  ) !! (order = polynomial degree + 1) logical , intent ( in ), optional :: extrap !! if true, then extrapolation is allowed !! (default is false) call initialize_5d_auto_knots ( me , x , y , z , q , r , fcn , kx , ky , kz , kq , kr , me % iflag , extrap ) end function bspline_5d_constructor_auto_knots !***************************************************************************************** !***************************************************************************************** !> !  Constructor for a [[bspline_5d]] type (user-specified knots). !  This is a wrapper for [[initialize_5d_specify_knots]]. pure function bspline_5d_constructor_specify_knots ( x , y , z , q , r , fcn ,& kx , ky , kz , kq , kr ,& tx , ty , tz , tq , tr , extrap ) result ( me ) implicit none type ( bspline_5d ) :: me real ( wp ), dimension (:), intent ( in ) :: x !! `(nx)` array of x abcissae. Must be strictly increasing. real ( wp ), dimension (:), intent ( in ) :: y !! `(ny)` array of y abcissae. Must be strictly increasing. real ( wp ), dimension (:), intent ( in ) :: z !! `(nz)` array of z abcissae. Must be strictly increasing. real ( wp ), dimension (:), intent ( in ) :: q !! `(nq)` array of q abcissae. Must be strictly increasing. real ( wp ), dimension (:), intent ( in ) :: r !! `(nr)` array of r abcissae. Must be strictly increasing. real ( wp ), dimension (:,:,:,:,:), intent ( in ) :: fcn !! `(nx,ny,nz,nq,nr)` matrix of function values to interpolate. !! `fcn(i,j,k,l,m)` should contain the function value at the !! point (`x(i)`,`y(j)`,`z(k)`,`q(l)`,`r(m)`) integer , intent ( in ) :: kx !! The order of spline pieces in x !! (  2 \\le k_x < n_x  ) !! (order = polynomial degree + 1) integer , intent ( in ) :: ky !! The order of spline pieces in y !! (  2 \\le k_y < n_y  ) !! (order = polynomial degree + 1) integer , intent ( in ) :: kz !! The order of spline pieces in z !! (  2 \\le k_z < n_z  ) !! (order = polynomial degree + 1) integer , intent ( in ) :: kq !! The order of spline pieces in q !! (  2 \\le k_q < n_q  ) !! (order = polynomial degree + 1) integer , intent ( in ) :: kr !! The order of spline pieces in r !! (  2 \\le k_r < n_r  ) !! (order = polynomial degree + 1) real ( wp ), dimension (:), intent ( in ) :: tx !! The `(nx+kx)` knots in the x direction !! for the spline interpolant. !! Must be non-decreasing. real ( wp ), dimension (:), intent ( in ) :: ty !! The `(ny+ky)` knots in the y direction !! for the spline interpolant. !! Must be non-decreasing. real ( wp ), dimension (:), intent ( in ) :: tz !! The `(nz+kz)` knots in the z direction !! for the spline interpolant. !! Must be non-decreasing. real ( wp ), dimension (:), intent ( in ) :: tq !! The `(nq+kq)` knots in the q direction !! for the spline interpolant. !! Must be non-decreasing. real ( wp ), dimension (:), intent ( in ) :: tr !! The `(nr+kr)` knots in the r direction !! for the spline interpolant. !! Must be non-decreasing. logical , intent ( in ), optional :: extrap !! if true, then extrapolation is allowed !! (default is false) call initialize_5d_specify_knots ( me , x , y , z , q , r , fcn , kx , ky , kz , kq , kr , tx , ty , tz , tq , tr , me % iflag , extrap ) end function bspline_5d_constructor_specify_knots !***************************************************************************************** !***************************************************************************************** !> !  Initialize a [[bspline_5d]] type (with automatically-computed knots). !  This is a wrapper for [[db5ink]]. pure subroutine initialize_5d_auto_knots ( me , x , y , z , q , r , fcn , kx , ky , kz , kq , kr , iflag , extrap ) implicit none class ( bspline_5d ), intent ( inout ) :: me real ( wp ), dimension (:), intent ( in ) :: x !! `(nx)` array of x abcissae. Must be strictly increasing. real ( wp ), dimension (:), intent ( in ) :: y !! `(ny)` array of y abcissae. Must be strictly increasing. real ( wp ), dimension (:), intent ( in ) :: z !! `(nz)` array of z abcissae. Must be strictly increasing. real ( wp ), dimension (:), intent ( in ) :: q !! `(nq)` array of q abcissae. Must be strictly increasing. real ( wp ), dimension (:), intent ( in ) :: r !! `(nr)` array of r abcissae. Must be strictly increasing. real ( wp ), dimension (:,:,:,:,:), intent ( in ) :: fcn !! `(nx,ny,nz,nq,nr)` matrix of function values to interpolate. !! `fcn(i,j,k,l,m)` should contain the function value at the !! point (`x(i)`,`y(j)`,`z(k)`,`q(l)`,`r(m)`) integer , intent ( in ) :: kx !! The order of spline pieces in x !! (  2 \\le k_x < n_x  ) !! (order = polynomial degree + 1) integer , intent ( in ) :: ky !! The order of spline pieces in y !! (  2 \\le k_y < n_y  ) !! (order = polynomial degree + 1) integer , intent ( in ) :: kz !! The order of spline pieces in z !! (  2 \\le k_z < n_z  ) !! (order = polynomial degree + 1) integer , intent ( in ) :: kq !! The order of spline pieces in q !! (  2 \\le k_q < n_q  ) !! (order = polynomial degree + 1) integer , intent ( in ) :: kr !! The order of spline pieces in r !! (  2 \\le k_r < n_r  ) !! (order = polynomial degree + 1) integer , intent ( out ) :: iflag !! status flag (see [[db5ink]]) logical , intent ( in ), optional :: extrap !! if true, then extrapolation is allowed !! (default is false) integer :: iknot integer :: nx , ny , nz , nq , nr call me % destroy () nx = size ( x ) ny = size ( y ) nz = size ( z ) nq = size ( q ) nr = size ( r ) me % nx = nx me % ny = ny me % nz = nz me % nq = nq me % nr = nr me % kx = kx me % ky = ky me % kz = kz me % kq = kq me % kr = kr allocate ( me % tx ( nx + kx )) allocate ( me % ty ( ny + ky )) allocate ( me % tz ( nz + kz )) allocate ( me % tq ( nq + kq )) allocate ( me % tr ( nr + kr )) allocate ( me % bcoef ( nx , ny , nz , nq , nr )) iknot = 0 !knot sequence chosen by db5ink call db5ink ( x , nx , y , ny , z , nz , q , nq , r , nr ,& fcn ,& kx , ky , kz , kq , kr ,& iknot ,& me % tx , me % ty , me % tz , me % tq , me % tr ,& me % bcoef , iflag ) if ( iflag == 0 ) then call me % set_extrap_flag ( extrap ) end if me % initialized = iflag == 0 me % iflag = iflag end subroutine initialize_5d_auto_knots !***************************************************************************************** !***************************************************************************************** !> !  Initialize a [[bspline_5d]] type (with user-specified knots). !  This is a wrapper for [[db5ink]]. pure subroutine initialize_5d_specify_knots ( me , x , y , z , q , r , fcn ,& kx , ky , kz , kq , kr ,& tx , ty , tz , tq , tr , iflag , extrap ) implicit none class ( bspline_5d ), intent ( inout ) :: me real ( wp ), dimension (:), intent ( in ) :: x !! `(nx)` array of x abcissae. Must be strictly increasing. real ( wp ), dimension (:), intent ( in ) :: y !! `(ny)` array of y abcissae. Must be strictly increasing. real ( wp ), dimension (:), intent ( in ) :: z !! `(nz)` array of z abcissae. Must be strictly increasing. real ( wp ), dimension (:), intent ( in ) :: q !! `(nq)` array of q abcissae. Must be strictly increasing. real ( wp ), dimension (:), intent ( in ) :: r !! `(nr)` array of r abcissae. Must be strictly increasing. real ( wp ), dimension (:,:,:,:,:), intent ( in ) :: fcn !! `(nx,ny,nz,nq,nr)` matrix of function values to interpolate. !! `fcn(i,j,k,l,m)` should contain the function value at the !! point (`x(i)`,`y(j)`,`z(k)`,`q(l)`,`r(m)`) integer , intent ( in ) :: kx !! The order of spline pieces in x !! (  2 \\le k_x < n_x  ) !! (order = polynomial degree + 1) integer , intent ( in ) :: ky !! The order of spline pieces in y !! (  2 \\le k_y < n_y  ) !! (order = polynomial degree + 1) integer , intent ( in ) :: kz !! The order of spline pieces in z !! (  2 \\le k_z < n_z  ) !! (order = polynomial degree + 1) integer , intent ( in ) :: kq !! The order of spline pieces in q !! (  2 \\le k_q < n_q  ) !! (order = polynomial degree + 1) integer , intent ( in ) :: kr !! The order of spline pieces in r !! (  2 \\le k_r < n_r  ) !! (order = polynomial degree + 1) real ( wp ), dimension (:), intent ( in ) :: tx !! The `(nx+kx)` knots in the x direction !! for the spline interpolant. !! Must be non-decreasing. real ( wp ), dimension (:), intent ( in ) :: ty !! The `(ny+ky)` knots in the y direction !! for the spline interpolant. !! Must be non-decreasing. real ( wp ), dimension (:), intent ( in ) :: tz !! The `(nz+kz)` knots in the z direction !! for the spline interpolant. !! Must be non-decreasing. real ( wp ), dimension (:), intent ( in ) :: tq !! The `(nq+kq)` knots in the q direction !! for the spline interpolant. !! Must be non-decreasing. real ( wp ), dimension (:), intent ( in ) :: tr !! The `(nr+kr)` knots in the r direction !! for the spline interpolant. !! Must be non-decreasing. integer , intent ( out ) :: iflag !! status flag (see [[db5ink]]) logical , intent ( in ), optional :: extrap !! if true, then extrapolation is allowed !! (default is false) integer :: nx , ny , nz , nq , nr call me % destroy () nx = size ( x ) ny = size ( y ) nz = size ( z ) nq = size ( q ) nr = size ( r ) call check_knot_vectors_sizes ( nx = nx , kx = kx , tx = tx ,& ny = ny , ky = ky , ty = ty ,& nz = nz , kz = kz , tz = tz ,& nq = nq , kq = kq , tq = tq ,& nr = nr , kr = kr , tr = tr ,& iflag = iflag ) if ( iflag == 0 ) then me % nx = nx me % ny = ny me % nz = nz me % nq = nq me % nr = nr me % kx = kx me % ky = ky me % kz = kz me % kq = kq me % kr = kr allocate ( me % tx ( nx + kx )) allocate ( me % ty ( ny + ky )) allocate ( me % tz ( nz + kz )) allocate ( me % tq ( nq + kq )) allocate ( me % tr ( nr + kr )) allocate ( me % bcoef ( nx , ny , nz , nq , nr )) me % tx = tx me % ty = ty me % tz = tz me % tq = tq me % tr = tr call db5ink ( x , nx , y , ny , z , nz , q , nq , r , nr ,& fcn ,& kx , ky , kz , kq , kr ,& 1 ,& me % tx , me % ty , me % tz , me % tq , me % tr ,& me % bcoef , iflag ) call me % set_extrap_flag ( extrap ) end if me % initialized = iflag == 0 me % iflag = iflag end subroutine initialize_5d_specify_knots !***************************************************************************************** !***************************************************************************************** !> !  Evaluate a [[bspline_5d]] interpolate.  This is a wrapper for [[db5val]]. pure subroutine evaluate_5d ( me , xval , yval , zval , qval , rval , idx , idy , idz , idq , idr , f , iflag ) implicit none class ( bspline_5d ), intent ( inout ) :: me real ( wp ), intent ( in ) :: xval !! x coordinate of evaluation point. real ( wp ), intent ( in ) :: yval !! y coordinate of evaluation point. real ( wp ), intent ( in ) :: zval !! z coordinate of evaluation point. real ( wp ), intent ( in ) :: qval !! q coordinate of evaluation point. real ( wp ), intent ( in ) :: rval !! r coordinate of evaluation point. integer , intent ( in ) :: idx !! x derivative of piecewise polynomial to evaluate. integer , intent ( in ) :: idy !! y derivative of piecewise polynomial to evaluate. integer , intent ( in ) :: idz !! z derivative of piecewise polynomial to evaluate. integer , intent ( in ) :: idq !! q derivative of piecewise polynomial to evaluate. integer , intent ( in ) :: idr !! r derivative of piecewise polynomial to evaluate. real ( wp ), intent ( out ) :: f !! interpolated value integer , intent ( out ) :: iflag !! status flag (see [[db5val]]) if ( me % initialized ) then call db5val ( xval , yval , zval , qval , rval ,& idx , idy , idz , idq , idr ,& me % tx , me % ty , me % tz , me % tq , me % tr ,& me % nx , me % ny , me % nz , me % nq , me % nr ,& me % kx , me % ky , me % kz , me % kq , me % kr ,& me % bcoef , f , iflag ,& me % inbvx , me % inbvy , me % inbvz , me % inbvq , me % inbvr ,& me % iloy , me % iloz , me % iloq , me % ilor ,& me % extrap ) else iflag = 1 end if me % iflag = iflag end subroutine evaluate_5d !***************************************************************************************** !***************************************************************************************** !> !  It returns an empty [[bspline_6d]] type. Note that INITIALIZE still !  needs to be called before it can be used. !  Not really that useful except perhaps in some OpenMP applications. elemental function bspline_6d_constructor_empty () result ( me ) implicit none type ( bspline_6d ) :: me end function bspline_6d_constructor_empty !***************************************************************************************** !***************************************************************************************** !> !  Constructor for a [[bspline_6d]] type (auto knots). !  This is a wrapper for [[initialize_6d_auto_knots]]. pure function bspline_6d_constructor_auto_knots ( x , y , z , q , r , s , fcn ,& kx , ky , kz , kq , kr , ks , extrap ) result ( me ) implicit none type ( bspline_6d ) :: me real ( wp ), dimension (:), intent ( in ) :: x !! `(nx)` array of x abcissae. Must be strictly increasing. real ( wp ), dimension (:), intent ( in ) :: y !! `(ny)` array of y abcissae. Must be strictly increasing. real ( wp ), dimension (:), intent ( in ) :: z !! `(nz)` array of z abcissae. Must be strictly increasing. real ( wp ), dimension (:), intent ( in ) :: q !! `(nq)` array of q abcissae. Must be strictly increasing. real ( wp ), dimension (:), intent ( in ) :: r !! `(nr)` array of r abcissae. Must be strictly increasing. real ( wp ), dimension (:), intent ( in ) :: s !! `(ns)` array of s abcissae. Must be strictly increasing. real ( wp ), dimension (:,:,:,:,:,:), intent ( in ) :: fcn !! `(nx,ny,nz,nq,nr,ns)` matrix of function values to interpolate. !! `fcn(i,j,k,l,m,n)` should contain the function value at the !! point (`x(i)`,`y(j)`,`z(k)`,`q(l)`,`r(m)`,`s(n)`) integer , intent ( in ) :: kx !! The order of spline pieces in x !! (  2 \\le k_x < n_x  ) !! (order = polynomial degree + 1) integer , intent ( in ) :: ky !! The order of spline pieces in y !! (  2 \\le k_y < n_y  ) !! (order = polynomial degree + 1) integer , intent ( in ) :: kz !! The order of spline pieces in z !! (  2 \\le k_z < n_z  ) !! (order = polynomial degree + 1) integer , intent ( in ) :: kq !! The order of spline pieces in q !! (  2 \\le k_q < n_q  ) !! (order = polynomial degree + 1) integer , intent ( in ) :: kr !! The order of spline pieces in r !! (  2 \\le k_r < n_r  ) !! (order = polynomial degree + 1) integer , intent ( in ) :: ks !! The order of spline pieces in z !! (  2 \\le k_z < n_z  ) !! (order = polynomial degree + 1) logical , intent ( in ), optional :: extrap !! if true, then extrapolation is allowed !! (default is false) call initialize_6d_auto_knots ( me , x , y , z , q , r , s , fcn , kx , ky , kz , kq , kr , ks , me % iflag , extrap ) end function bspline_6d_constructor_auto_knots !***************************************************************************************** !***************************************************************************************** !> !  Constructor for a [[bspline_6d]] type (user-specified knots). !  This is a wrapper for [[initialize_6d_specify_knots]]. pure function bspline_6d_constructor_specify_knots ( x , y , z , q , r , s , fcn ,& kx , ky , kz , kq , kr , ks ,& tx , ty , tz , tq , tr , ts , extrap ) result ( me ) implicit none type ( bspline_6d ) :: me real ( wp ), dimension (:), intent ( in ) :: x !! `(nx)` array of x abcissae. Must be strictly increasing. real ( wp ), dimension (:), intent ( in ) :: y !! `(ny)` array of y abcissae. Must be strictly increasing. real ( wp ), dimension (:), intent ( in ) :: z !! `(nz)` array of z abcissae. Must be strictly increasing. real ( wp ), dimension (:), intent ( in ) :: q !! `(nq)` array of q abcissae. Must be strictly increasing. real ( wp ), dimension (:), intent ( in ) :: r !! `(nr)` array of r abcissae. Must be strictly increasing. real ( wp ), dimension (:), intent ( in ) :: s !! `(ns)` array of s abcissae. Must be strictly increasing. real ( wp ), dimension (:,:,:,:,:,:), intent ( in ) :: fcn !! `(nx,ny,nz,nq,nr,ns)` matrix of function values to interpolate. !! `fcn(i,j,k,l,m,n)` should contain the function value at the !! point (`x(i)`,`y(j)`,`z(k)`,`q(l)`,`r(m)`,`s(n)`) integer , intent ( in ) :: kx !! The order of spline pieces in x !! (  2 \\le k_x < n_x  ) !! (order = polynomial degree + 1) integer , intent ( in ) :: ky !! The order of spline pieces in y !! (  2 \\le k_y < n_y  ) !! (order = polynomial degree + 1) integer , intent ( in ) :: kz !! The order of spline pieces in z !! (  2 \\le k_z < n_z  ) !! (order = polynomial degree + 1) integer , intent ( in ) :: kq !! The order of spline pieces in q !! (  2 \\le k_q < n_q  ) !! (order = polynomial degree + 1) integer , intent ( in ) :: kr !! The order of spline pieces in r !! (  2 \\le k_r < n_r  ) !! (order = polynomial degree + 1) integer , intent ( in ) :: ks !! The order of spline pieces in z !! (  2 \\le k_z < n_z  ) !! (order = polynomial degree + 1) real ( wp ), dimension (:), intent ( in ) :: tx !! The `(nx+kx)` knots in the x direction !! for the spline interpolant. !! Must be non-decreasing. real ( wp ), dimension (:), intent ( in ) :: ty !! The `(ny+ky)` knots in the y direction !! for the spline interpolant. !! Must be non-decreasing. real ( wp ), dimension (:), intent ( in ) :: tz !! The `(nz+kz)` knots in the z direction !! for the spline interpolant. !! Must be non-decreasing. real ( wp ), dimension (:), intent ( in ) :: tq !! The `(nq+kq)` knots in the q direction !! for the spline interpolant. !! Must be non-decreasing. real ( wp ), dimension (:), intent ( in ) :: tr !! The `(nr+kr)` knots in the r direction !! for the spline interpolant. !! Must be non-decreasing. real ( wp ), dimension (:), intent ( in ) :: ts !! The `(ns+ks)` knots in the s direction !! for the spline interpolant. !! Must be non-decreasing. logical , intent ( in ), optional :: extrap !! if true, then extrapolation is allowed !! (default is false) call initialize_6d_specify_knots ( me , x , y , z , q , r , s , fcn ,& kx , ky , kz , kq , kr , ks ,& tx , ty , tz , tq , tr , ts , me % iflag , extrap ) end function bspline_6d_constructor_specify_knots !***************************************************************************************** !***************************************************************************************** !> !  Initialize a [[bspline_6d]] type (with automatically-computed knots). !  This is a wrapper for [[db6ink]]. pure subroutine initialize_6d_auto_knots ( me , x , y , z , q , r , s , fcn ,& kx , ky , kz , kq , kr , ks , iflag , extrap ) implicit none class ( bspline_6d ), intent ( inout ) :: me real ( wp ), dimension (:), intent ( in ) :: x !! `(nx)` array of x abcissae. Must be strictly increasing. real ( wp ), dimension (:), intent ( in ) :: y !! `(ny)` array of y abcissae. Must be strictly increasing. real ( wp ), dimension (:), intent ( in ) :: z !! `(nz)` array of z abcissae. Must be strictly increasing. real ( wp ), dimension (:), intent ( in ) :: q !! `(nq)` array of q abcissae. Must be strictly increasing. real ( wp ), dimension (:), intent ( in ) :: r !! `(nr)` array of r abcissae. Must be strictly increasing. real ( wp ), dimension (:), intent ( in ) :: s !! `(ns)` array of s abcissae. Must be strictly increasing. real ( wp ), dimension (:,:,:,:,:,:), intent ( in ) :: fcn !! `(nx,ny,nz,nq,nr,ns)` matrix of function values to interpolate. !! `fcn(i,j,k,l,m,n)` should contain the function value at the !! point (`x(i)`,`y(j)`,`z(k)`,`q(l)`,`r(m)`,`s(n)`) integer , intent ( in ) :: kx !! The order of spline pieces in x !! (  2 \\le k_x < n_x  ) !! (order = polynomial degree + 1) integer , intent ( in ) :: ky !! The order of spline pieces in y !! (  2 \\le k_y < n_y  ) !! (order = polynomial degree + 1) integer , intent ( in ) :: kz !! The order of spline pieces in z !! (  2 \\le k_z < n_z  ) !! (order = polynomial degree + 1) integer , intent ( in ) :: kq !! The order of spline pieces in q !! (  2 \\le k_q < n_q  ) !! (order = polynomial degree + 1) integer , intent ( in ) :: kr !! The order of spline pieces in r !! (  2 \\le k_r < n_r  ) !! (order = polynomial degree + 1) integer , intent ( in ) :: ks !! The order of spline pieces in z !! (  2 \\le k_z < n_z  ) !! (order = polynomial degree + 1) integer , intent ( out ) :: iflag !! status flag (see [[db6ink]]) logical , intent ( in ), optional :: extrap !! if true, then extrapolation is allowed !! (default is false) integer :: iknot integer :: nx , ny , nz , nq , nr , ns call me % destroy () nx = size ( x ) ny = size ( y ) nz = size ( z ) nq = size ( q ) nr = size ( r ) ns = size ( s ) me % nx = nx me % ny = ny me % nz = nz me % nq = nq me % nr = nr me % ns = ns me % kx = kx me % ky = ky me % kz = kz me % kq = kq me % kr = kr me % ks = ks allocate ( me % tx ( nx + kx )) allocate ( me % ty ( ny + ky )) allocate ( me % tz ( nz + kz )) allocate ( me % tq ( nq + kq )) allocate ( me % tr ( nr + kr )) allocate ( me % ts ( ns + ks )) allocate ( me % bcoef ( nx , ny , nz , nq , nr , ns )) iknot = 0 !knot sequence chosen by db6ink call db6ink ( x , nx , y , ny , z , nz , q , nq , r , nr , s , ns ,& fcn ,& kx , ky , kz , kq , kr , ks ,& iknot ,& me % tx , me % ty , me % tz , me % tq , me % tr , me % ts ,& me % bcoef , iflag ) if ( iflag == 0 ) then call me % set_extrap_flag ( extrap ) end if me % initialized = iflag == 0 me % iflag = iflag end subroutine initialize_6d_auto_knots !***************************************************************************************** !***************************************************************************************** !> !  Initialize a [[bspline_6d]] type (with user-specified knots). !  This is a wrapper for [[db6ink]]. pure subroutine initialize_6d_specify_knots ( me , x , y , z , q , r , s , fcn ,& kx , ky , kz , kq , kr , ks ,& tx , ty , tz , tq , tr , ts , iflag , extrap ) implicit none class ( bspline_6d ), intent ( inout ) :: me real ( wp ), dimension (:), intent ( in ) :: x !! `(nx)` array of x abcissae. Must be strictly increasing. real ( wp ), dimension (:), intent ( in ) :: y !! `(ny)` array of y abcissae. Must be strictly increasing. real ( wp ), dimension (:), intent ( in ) :: z !! `(nz)` array of z abcissae. Must be strictly increasing. real ( wp ), dimension (:), intent ( in ) :: q !! `(nq)` array of q abcissae. Must be strictly increasing. real ( wp ), dimension (:), intent ( in ) :: r !! `(nr)` array of r abcissae. Must be strictly increasing. real ( wp ), dimension (:), intent ( in ) :: s !! `(ns)` array of s abcissae. Must be strictly increasing. real ( wp ), dimension (:,:,:,:,:,:), intent ( in ) :: fcn !! `(nx,ny,nz,nq,nr,ns)` matrix of function values to interpolate. !! `fcn(i,j,k,l,m,n)` should contain the function value at the !! point (`x(i)`,`y(j)`,`z(k)`,`q(l)`,`r(m)`,`s(n)`) integer , intent ( in ) :: kx !! The order of spline pieces in x !! (  2 \\le k_x < n_x  ) !! (order = polynomial degree + 1) integer , intent ( in ) :: ky !! The order of spline pieces in y !! (  2 \\le k_y < n_y  ) !! (order = polynomial degree + 1) integer , intent ( in ) :: kz !! The order of spline pieces in z !! (  2 \\le k_z < n_z  ) !! (order = polynomial degree + 1) integer , intent ( in ) :: kq !! The order of spline pieces in q !! (  2 \\le k_q < n_q  ) !! (order = polynomial degree + 1) integer , intent ( in ) :: kr !! The order of spline pieces in r !! (  2 \\le k_r < n_r  ) !! (order = polynomial degree + 1) integer , intent ( in ) :: ks !! The order of spline pieces in z !! (  2 \\le k_z < n_z  ) !! (order = polynomial degree + 1) real ( wp ), dimension (:), intent ( in ) :: tx !! The `(nx+kx)` knots in the x direction !! for the spline interpolant. !! Must be non-decreasing. real ( wp ), dimension (:), intent ( in ) :: ty !! The `(ny+ky)` knots in the y direction !! for the spline interpolant. !! Must be non-decreasing. real ( wp ), dimension (:), intent ( in ) :: tz !! The `(nz+kz)` knots in the z direction !! for the spline interpolant. !! Must be non-decreasing. real ( wp ), dimension (:), intent ( in ) :: tq !! The `(nq+kq)` knots in the q direction !! for the spline interpolant. !! Must be non-decreasing. real ( wp ), dimension (:), intent ( in ) :: tr !! The `(nr+kr)` knots in the r direction !! for the spline interpolant. !! Must be non-decreasing. real ( wp ), dimension (:), intent ( in ) :: ts !! The `(ns+ks)` knots in the s direction !! for the spline interpolant. !! Must be non-decreasing. integer , intent ( out ) :: iflag !! status flag (see [[db6ink]]) logical , intent ( in ), optional :: extrap !! if true, then extrapolation is allowed !! (default is false) integer :: nx , ny , nz , nq , nr , ns call me % destroy () nx = size ( x ) ny = size ( y ) nz = size ( z ) nq = size ( q ) nr = size ( r ) ns = size ( s ) call check_knot_vectors_sizes ( nx = nx , kx = kx , tx = tx ,& ny = ny , ky = ky , ty = ty ,& nz = nz , kz = kz , tz = tz ,& nq = nq , kq = kq , tq = tq ,& nr = nr , kr = kr , tr = tr ,& ns = ns , ks = ks , ts = ts ,& iflag = iflag ) if ( iflag == 0 ) then me % nx = nx me % ny = ny me % nz = nz me % nq = nq me % nr = nr me % ns = ns me % kx = kx me % ky = ky me % kz = kz me % kq = kq me % kr = kr me % ks = ks allocate ( me % tx ( nx + kx )) allocate ( me % ty ( ny + ky )) allocate ( me % tz ( nz + kz )) allocate ( me % tq ( nq + kq )) allocate ( me % tr ( nr + kr )) allocate ( me % ts ( ns + ks )) allocate ( me % bcoef ( nx , ny , nz , nq , nr , ns )) me % tx = tx me % ty = ty me % tz = tz me % tq = tq me % tr = tr me % ts = ts call db6ink ( x , nx , y , ny , z , nz , q , nq , r , nr , s , ns ,& fcn ,& kx , ky , kz , kq , kr , ks ,& 1 ,& me % tx , me % ty , me % tz , me % tq , me % tr , me % ts ,& me % bcoef , iflag ) call me % set_extrap_flag ( extrap ) end if me % initialized = iflag == 0 me % iflag = iflag end subroutine initialize_6d_specify_knots !***************************************************************************************** !***************************************************************************************** !> !  Evaluate a [[bspline_6d]] interpolate.  This is a wrapper for [[db6val]]. pure subroutine evaluate_6d ( me , xval , yval , zval , qval , rval , sval , idx , idy , idz , idq , idr , ids , f , iflag ) implicit none class ( bspline_6d ), intent ( inout ) :: me real ( wp ), intent ( in ) :: xval !! x coordinate of evaluation point. real ( wp ), intent ( in ) :: yval !! y coordinate of evaluation point. real ( wp ), intent ( in ) :: zval !! z coordinate of evaluation point. real ( wp ), intent ( in ) :: qval !! q coordinate of evaluation point. real ( wp ), intent ( in ) :: rval !! r coordinate of evaluation point. real ( wp ), intent ( in ) :: sval !! s coordinate of evaluation point. integer , intent ( in ) :: idx !! x derivative of piecewise polynomial to evaluate. integer , intent ( in ) :: idy !! y derivative of piecewise polynomial to evaluate. integer , intent ( in ) :: idz !! z derivative of piecewise polynomial to evaluate. integer , intent ( in ) :: idq !! q derivative of piecewise polynomial to evaluate. integer , intent ( in ) :: idr !! r derivative of piecewise polynomial to evaluate. integer , intent ( in ) :: ids !! s derivative of piecewise polynomial to evaluate. real ( wp ), intent ( out ) :: f !! interpolated value integer , intent ( out ) :: iflag !! status flag (see [[db6val]]) if ( me % initialized ) then call db6val ( xval , yval , zval , qval , rval , sval ,& idx , idy , idz , idq , idr , ids ,& me % tx , me % ty , me % tz , me % tq , me % tr , me % ts ,& me % nx , me % ny , me % nz , me % nq , me % nr , me % ns ,& me % kx , me % ky , me % kz , me % kq , me % kr , me % ks ,& me % bcoef , f , iflag ,& me % inbvx , me % inbvy , me % inbvz , me % inbvq , me % inbvr , me % inbvs ,& me % iloy , me % iloz , me % iloq , me % ilor , me % ilos ,& me % extrap ) else iflag = 1 end if me % iflag = iflag end subroutine evaluate_6d !***************************************************************************************** !***************************************************************************************** !> !  Error checks for the user-specified knot vector sizes. ! !@note If more than one is the wrong size, then the `iflag` error code will !      correspond to the one with the highest rank. pure subroutine check_knot_vectors_sizes ( nx , ny , nz , nq , nr , ns ,& kx , ky , kz , kq , kr , ks ,& tx , ty , tz , tq , tr , ts , iflag ) implicit none integer , intent ( in ), optional :: nx integer , intent ( in ), optional :: ny integer , intent ( in ), optional :: nz integer , intent ( in ), optional :: nq integer , intent ( in ), optional :: nr integer , intent ( in ), optional :: ns integer , intent ( in ), optional :: kx integer , intent ( in ), optional :: ky integer , intent ( in ), optional :: kz integer , intent ( in ), optional :: kq integer , intent ( in ), optional :: kr integer , intent ( in ), optional :: ks real ( wp ), dimension (:), intent ( in ), optional :: tx real ( wp ), dimension (:), intent ( in ), optional :: ty real ( wp ), dimension (:), intent ( in ), optional :: tz real ( wp ), dimension (:), intent ( in ), optional :: tq real ( wp ), dimension (:), intent ( in ), optional :: tr real ( wp ), dimension (:), intent ( in ), optional :: ts integer , intent ( out ) :: iflag !! 0 if everything is OK iflag = 0 if ( present ( nx ) . and . present ( kx ) . and . present ( tx )) then if ( size ( tx ) /= ( nx + kx )) then iflag = 501 ! tx is not the correct size (nx+kx) end if end if if ( present ( ny ) . and . present ( ky ) . and . present ( ty )) then if ( size ( ty ) /= ( ny + ky )) then iflag = 502 ! ty is not the correct size (ny+ky) end if end if if ( present ( nz ) . and . present ( kz ) . and . present ( tz )) then if ( size ( tz ) /= ( nz + kz )) then iflag = 503 ! tz is not the correct size (nz+kz) end if end if if ( present ( nq ) . and . present ( kq ) . and . present ( tq )) then if ( size ( tq ) /= ( nq + kq )) then iflag = 504 ! tq is not the correct size (nq+kq) end if end if if ( present ( nr ) . and . present ( kr ) . and . present ( tr )) then if ( size ( tr ) /= ( nr + kr )) then iflag = 505 ! tr is not the correct size (nr+kr) end if end if if ( present ( ns ) . and . present ( ks ) . and . present ( ts )) then if ( size ( ts ) /= ( ns + ks )) then iflag = 506 ! ts is not the correct size (ns+ks) end if end if end subroutine check_knot_vectors_sizes !***************************************************************************************** !***************************************************************************************** end module bspline_oo_module !*****************************************************************************************","tags":"","loc":"sourcefile/bspline_oo_module.f90.html","title":"bspline_oo_module.f90 â€“ bspline-fortran"},{"text":"This File Depends On sourcefile~~speed_test.f90~~EfferentGraph sourcefile~speed_test.f90 speed_test.f90 sourcefile~bspline_module.f90 bspline_module.f90 sourcefile~bspline_module.f90->sourcefile~speed_test.f90 sourcefile~bspline_oo_module.f90 bspline_oo_module.f90 sourcefile~bspline_oo_module.f90->sourcefile~bspline_module.f90 sourcefile~bspline_sub_module.f90 bspline_sub_module.f90 sourcefile~bspline_sub_module.f90->sourcefile~bspline_module.f90 sourcefile~bspline_sub_module.f90->sourcefile~bspline_oo_module.f90 Help Ã— Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which depends upon it. A file \n    is dependent upon another if the latter must be compiled before the former\n    can be. Programs bspline_speed_test Source Code speed_test.f90 Source Code !***************************************************************************************** !> !  Speed test for 1d-6d tensor product b-spline interpolation (subroutine version). ! !### Results !  ![Plot of results](https://raw.githubusercontent.com/jacobwilliams/bspline-fortran/master/src/tests/speed_test.png) program bspline_speed_test use bspline_module use , intrinsic :: iso_fortran_env , only : wp => real64 use pyplot_module implicit none integer , parameter :: nx = 8 !number of points integer , parameter :: ny = 8 integer , parameter :: nz = 8 integer , parameter :: nq = 8 integer , parameter :: nr = 8 integer , parameter :: ns = 8 integer , parameter :: kx = 4 !order integer , parameter :: ky = 4 integer , parameter :: kz = 4 integer , parameter :: kq = 4 integer , parameter :: kr = 4 integer , parameter :: ks = 4 integer , parameter :: n_cases = nx * ny * nz * nq * nr * ns real ( wp ) :: x ( nx ), y ( ny ), z ( nz ), q ( nq ), r ( nr ), s ( ns ) real ( wp ), dimension ( nx ) :: fcn_1d , bcoef_1d real ( wp ), dimension ( nx , ny ) :: fcn_2d , bcoef_2d real ( wp ), dimension ( nx , ny , nz ) :: fcn_3d , bcoef_3d real ( wp ), dimension ( nx , ny , nz , nq ) :: fcn_4d , bcoef_4d real ( wp ), dimension ( nx , ny , nz , nq , nr ) :: fcn_5d , bcoef_5d real ( wp ), dimension ( nx , ny , nz , nq , nr , ns ) :: fcn_6d , bcoef_6d real ( wp ) :: tx ( nx + kx ), ty ( ny + ky ), tz ( nz + kz ), tq ( nq + kq ), tr ( nr + kr ), ts ( ns + ks ) real ( wp ) :: val , sumval integer :: i , j , k , l , m , n , idx , idy , idz , idq , idr , ids , iknot , iflag real :: tstart , tend type ( pyplot ) :: plt real ( wp ), dimension ( 6 ) :: cases_per_sec integer :: inbvx , inbvy , inbvz , inbvq , inbvr , inbvs , iloy , iloz , iloq , ilor , ilos integer :: istat !! pyplot-fortran status flag inbvx = 1 inbvy = 1 inbvz = 1 inbvq = 1 inbvr = 1 inbvs = 1 iloy = 1 iloz = 1 iloq = 1 ilor = 1 ilos = 1 idx = 0 idy = 0 idz = 0 idq = 0 idr = 0 ids = 0 x = [ ( dble ( i ), i = 1 , nx ) ] y = [ ( dble ( i ), i = 1 , ny ) ] z = [ ( dble ( i ), i = 1 , nz ) ] q = [ ( dble ( i ), i = 1 , nq ) ] r = [ ( dble ( i ), i = 1 , nr ) ] s = [ ( dble ( i ), i = 1 , ns ) ] !evaluate the functions: do i = 1 , nx fcn_1d ( i ) = f1 ( x ( i )) do j = 1 , ny fcn_2d ( i , j ) = f2 ( x ( i ), y ( j )) do k = 1 , nz fcn_3d ( i , j , k ) = f3 ( x ( i ), y ( j ), z ( k )) do l = 1 , nq fcn_4d ( i , j , k , l ) = f4 ( x ( i ), y ( j ), z ( k ), q ( l )) do m = 1 , nr fcn_5d ( i , j , k , l , m ) = f5 ( x ( i ), y ( j ), z ( k ), q ( l ), r ( m )) do n = 1 , ns fcn_6d ( i , j , k , l , m , n ) = f6 ( x ( i ), y ( j ), z ( k ), q ( l ), r ( m ), s ( n )) end do end do end do end do end do end do iknot = 0 !auto-compute the knots !initialize: call db1ink ( x , nx , fcn_1d , kx , iknot , tx , bcoef_1d , iflag ) if ( iflag /= 0 ) then write ( * , * ) 'iflag=' , iflag error stop 'error initializing 1d spline.' end if call db2ink ( x , nx , y , ny , fcn_2d , kx , ky , iknot , tx , ty , bcoef_2d , iflag ) if ( iflag /= 0 ) then write ( * , * ) 'iflag=' , iflag error stop 'error initializing 2d spline.' end if call db3ink ( x , nx , y , ny , z , nz , fcn_3d , kx , ky , kz , iknot , tx , ty , tz , bcoef_3d , iflag ) if ( iflag /= 0 ) then write ( * , * ) 'iflag=' , iflag error stop 'error initializing 3d spline.' end if call db4ink ( x , nx , y , ny , z , nz , q , nq , fcn_4d , kx , ky , kz , kq , iknot , tx , ty , tz , tq , bcoef_4d , iflag ) if ( iflag /= 0 ) then write ( * , * ) 'iflag=' , iflag error stop 'error initializing 4d spline.' end if call db5ink ( x , nx , y , ny , z , nz , q , nq , r , nr , fcn_5d , kx , ky , kz , kq , kr , iknot , tx , ty , tz , tq , tr , bcoef_5d , iflag ) if ( iflag /= 0 ) then write ( * , * ) 'iflag=' , iflag error stop 'error initializing 5d spline.' end if call db6ink ( x , nx , y , ny , z , nz , q , nq , r , nr , s , ns , fcn_6d , kx , ky , kz , kq , kr , ks , iknot , tx , ty , tz , tq , tr , ts , bcoef_6d , iflag ) if ( iflag /= 0 ) then write ( * , * ) 'iflag=' , iflag error stop 'error initializing 6d spline.' end if ! evaluate the interpolants: sumval = 0.0_wp call cpu_time ( tstart ) do i = 1 , nx do j = 1 , ny do k = 1 , nz do l = 1 , nq do m = 1 , nr do n = 1 , ns call db1val ( x ( i ), idx , tx , nx , kx , bcoef_1d , val , iflag , inbvx ) sumval = sumval + val end do end do end do end do end do end do call cpu_time ( tend ) write ( * , * ) '' write ( * , * ) '1D' write ( * , * ) 'result         :' , sumval write ( * , * ) 'number of cases:' , n_cases write ( * , * ) 'cases/sec      :' , n_cases / ( tend - tstart ) cases_per_sec ( 1 ) = n_cases / ( tend - tstart ) sumval = 0.0_wp call cpu_time ( tstart ) do i = 1 , nx do j = 1 , ny do k = 1 , nz do l = 1 , nq do m = 1 , nr do n = 1 , ns call db2val ( x ( i ), y ( j ), idx , idy , tx , ty ,& nx , ny , kx , ky , bcoef_2d , val , iflag ,& inbvx , inbvy , iloy ) sumval = sumval + val end do end do end do end do end do end do call cpu_time ( tend ) write ( * , * ) '' write ( * , * ) '2D' write ( * , * ) 'result         :' , sumval write ( * , * ) 'number of cases:' , n_cases write ( * , * ) 'cases/sec      :' , n_cases / ( tend - tstart ) cases_per_sec ( 2 ) = n_cases / ( tend - tstart ) sumval = 0.0_wp call cpu_time ( tstart ) do i = 1 , nx do j = 1 , ny do k = 1 , nz do l = 1 , nq do m = 1 , nr do n = 1 , ns call db3val ( x ( i ), y ( j ), z ( k ), idx , idy , idz , tx , ty , tz ,& nx , ny , nz , kx , ky , kz , bcoef_3d , val , iflag ,& inbvx , inbvy , inbvz , iloy , iloz ) sumval = sumval + val end do end do end do end do end do end do call cpu_time ( tend ) write ( * , * ) '' write ( * , * ) '3D' write ( * , * ) 'result         :' , sumval write ( * , * ) 'number of cases:' , n_cases write ( * , * ) 'cases/sec      :' , n_cases / ( tend - tstart ) cases_per_sec ( 3 ) = n_cases / ( tend - tstart ) sumval = 0.0_wp call cpu_time ( tstart ) do i = 1 , nx do j = 1 , ny do k = 1 , nz do l = 1 , nq do m = 1 , nr do n = 1 , ns call db4val ( x ( i ), y ( j ), z ( k ), q ( l ), idx , idy , idz , idq , tx , ty , tz , tq ,& nx , ny , nz , nq , kx , ky , kz , kq , bcoef_4d , val , iflag ,& inbvx , inbvy , inbvz , inbvq , iloy , iloz , iloq ) sumval = sumval + val end do end do end do end do end do end do call cpu_time ( tend ) write ( * , * ) '' write ( * , * ) '4D' write ( * , * ) 'result         :' , sumval write ( * , * ) 'number of cases:' , n_cases write ( * , * ) 'cases/sec      :' , n_cases / ( tend - tstart ) cases_per_sec ( 4 ) = n_cases / ( tend - tstart ) sumval = 0.0_wp call cpu_time ( tstart ) do i = 1 , nx do j = 1 , ny do k = 1 , nz do l = 1 , nq do m = 1 , nr do n = 1 , ns call db5val ( x ( i ), y ( j ), z ( k ), q ( l ), r ( m ), idx , idy , idz , idq , idr , tx , ty , tz , tq , tr ,& nx , ny , nz , nq , nr , kx , ky , kz , kq , kr , bcoef_5d , val , iflag ,& inbvx , inbvy , inbvz , inbvq , inbvr , iloy , iloz , iloq , ilor ) sumval = sumval + val end do end do end do end do end do end do call cpu_time ( tend ) write ( * , * ) '' write ( * , * ) '5D' write ( * , * ) 'result         :' , sumval write ( * , * ) 'number of cases:' , n_cases write ( * , * ) 'cases/sec      :' , n_cases / ( tend - tstart ) cases_per_sec ( 5 ) = n_cases / ( tend - tstart ) sumval = 0.0_wp call cpu_time ( tstart ) do i = 1 , nx do j = 1 , ny do k = 1 , nz do l = 1 , nq do m = 1 , nr do n = 1 , ns call db6val ( x ( i ), y ( j ), z ( k ), q ( l ), r ( m ), s ( n ), idx , idy , idz , idq , idr , ids ,& tx , ty , tz , tq , tr , ts ,& nx , ny , nz , nq , nr , ns , kx , ky , kz , kq , kr , ks , bcoef_6d , val , iflag ,& inbvx , inbvy , inbvz , inbvq , inbvr , inbvs , iloy , iloz , iloq , ilor , ilos ) sumval = sumval + val end do end do end do end do end do end do call cpu_time ( tend ) write ( * , * ) '' write ( * , * ) '6D' write ( * , * ) 'result         :' , sumval write ( * , * ) 'number of cases:' , n_cases write ( * , * ) 'cases/sec      :' , n_cases / ( tend - tstart ) cases_per_sec ( 6 ) = n_cases / ( tend - tstart ) !plot results in bar chart: call plt % initialize ( grid = . false ., xlabel = 'Dimension' , ylabel = 'Cases Per Second' ,& title = 'Speed Test (Subroutine Interface)' , legend = . false .,& font_size = 20 ,& axes_labelsize = 20 ,& xtick_labelsize = 20 ,& ytick_labelsize = 20 ) call plt % add_bar ( left = real ([ 1 , 2 , 3 , 4 , 5 , 6 ], wp ), height = cases_per_sec , label = 'Speed test runs' ,& yscale = 'log' , align = 'center' , color = 'r' , istat = istat ) call plt % savefig ( 'speed_test.png' , istat = istat ) contains function f1 ( x ) result ( f ) !! 1d test function implicit none real ( wp ), intent ( in ) :: x real ( wp ) :: f f = x ** 1.1_wp + x ** 1.2_wp + x ** 1.3_wp + x ** 1.4_wp + x ** 1.5_wp + x ** 1.6_wp end function f1 function f2 ( x , y ) result ( f ) !! 2d test function implicit none real ( wp ), intent ( in ) :: x , y real ( wp ) :: f f = x ** 1.1_wp + y ** 1.2_wp + x ** 1.3_wp + y ** 1.4_wp + x ** 1.5_wp + y ** 1.6_wp end function f2 function f3 ( x , y , z ) result ( f ) !! 3d test function implicit none real ( wp ), intent ( in ) :: x , y , z real ( wp ) :: f f = x ** 1.1_wp + y ** 1.2_wp + z ** 1.3_wp + x ** 1.4_wp + y ** 1.5_wp + z ** 1.6_wp end function f3 function f4 ( x , y , z , q ) result ( f ) !! 4d test function implicit none real ( wp ), intent ( in ) :: x , y , z , q real ( wp ) :: f f = x ** 1.1_wp + y ** 1.2_wp + z ** 1.3_wp + q ** 1.4_wp + x ** 1.5_wp + y ** 1.6_wp end function f4 function f5 ( x , y , z , q , r ) result ( f ) !! 5d test function implicit none real ( wp ), intent ( in ) :: x , y , z , q , r real ( wp ) :: f f = x ** 1.1_wp + y ** 1.2_wp + z ** 1.3_wp + q ** 1.4_wp + r ** 1.5_wp + x ** 1.6_wp end function f5 function f6 ( x , y , z , q , r , s ) result ( f ) !! 6d test function implicit none real ( wp ), intent ( in ) :: x , y , z , q , r , s real ( wp ) :: f f = x ** 1.1_wp + y ** 1.2_wp + z ** 1.3_wp + q ** 1.4_wp + r ** 1.5_wp + s ** 1.6_wp end function f6 end program bspline_speed_test","tags":"","loc":"sourcefile/speed_test.f90.html","title":"speed_test.f90 â€“ bspline-fortran"},{"text":"This File Depends On sourcefile~~test_oo.f90~~EfferentGraph sourcefile~test_oo.f90 test_oo.f90 sourcefile~bspline_module.f90 bspline_module.f90 sourcefile~bspline_module.f90->sourcefile~test_oo.f90 sourcefile~bspline_oo_module.f90 bspline_oo_module.f90 sourcefile~bspline_oo_module.f90->sourcefile~bspline_module.f90 sourcefile~bspline_sub_module.f90 bspline_sub_module.f90 sourcefile~bspline_sub_module.f90->sourcefile~bspline_module.f90 sourcefile~bspline_sub_module.f90->sourcefile~bspline_oo_module.f90 Help Ã— Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which depends upon it. A file \n    is dependent upon another if the latter must be compiled before the former\n    can be. Programs bspline_oo_test Source Code test_oo.f90 Source Code !***************************************************************************************** !> !  Units test for 1d-6d tensor product b-spline interpolation (object-oriented version). program bspline_oo_test use bspline_module use , intrinsic :: iso_fortran_env , only : wp => real64 implicit none integer , parameter :: nx = 6 !number of points integer , parameter :: ny = 6 integer , parameter :: nz = 6 integer , parameter :: nq = 6 integer , parameter :: nr = 6 integer , parameter :: ns = 6 integer , parameter :: kx = 4 !order integer , parameter :: ky = 4 integer , parameter :: kz = 4 integer , parameter :: kq = 4 integer , parameter :: kr = 4 integer , parameter :: ks = 4 real ( wp ) :: x ( nx ), y ( ny ), z ( nz ), q ( nq ), r ( nr ), s ( ns ) real ( wp ) :: fcn_1d ( nx ) real ( wp ) :: fcn_2d ( nx , ny ) real ( wp ) :: fcn_3d ( nx , ny , nz ) real ( wp ) :: fcn_4d ( nx , ny , nz , nq ) real ( wp ) :: fcn_5d ( nx , ny , nz , nq , nr ) real ( wp ) :: fcn_6d ( nx , ny , nz , nq , nr , ns ) type ( bspline_1d ) :: s1 type ( bspline_2d ) :: s2 type ( bspline_3d ) :: s3 type ( bspline_4d ) :: s4 type ( bspline_5d ) :: s5 type ( bspline_6d ) :: s6 real ( wp ) :: tol real ( wp ), dimension ( 6 ) :: val , tru , err , errmax logical :: fail integer :: i , j , k , l , m , n , idx , idy , idz , idq , idr , ids integer , dimension ( 6 ) :: iflag fail = . false . tol = 1.0e-14_wp idx = 0 idy = 0 idz = 0 idq = 0 idr = 0 ids = 0 do i = 1 , nx x ( i ) = dble ( i - 1 ) / dble ( nx - 1 ) end do do j = 1 , ny y ( j ) = dble ( j - 1 ) / dble ( ny - 1 ) end do do k = 1 , nz z ( k ) = dble ( k - 1 ) / dble ( nz - 1 ) end do do l = 1 , nq q ( l ) = dble ( l - 1 ) / dble ( nq - 1 ) end do do m = 1 , nr r ( m ) = dble ( m - 1 ) / dble ( nr - 1 ) end do do n = 1 , ns s ( n ) = dble ( n - 1 ) / dble ( ns - 1 ) end do do i = 1 , nx fcn_1d ( i ) = f1 ( x ( i )) do j = 1 , ny fcn_2d ( i , j ) = f2 ( x ( i ), y ( j )) do k = 1 , nz fcn_3d ( i , j , k ) = f3 ( x ( i ), y ( j ), z ( k )) do l = 1 , nq fcn_4d ( i , j , k , l ) = f4 ( x ( i ), y ( j ), z ( k ), q ( l )) do m = 1 , nr fcn_5d ( i , j , k , l , m ) = f5 ( x ( i ), y ( j ), z ( k ), q ( l ), r ( m )) do n = 1 , ns fcn_6d ( i , j , k , l , m , n ) = f6 ( x ( i ), y ( j ), z ( k ), q ( l ), r ( m ), s ( n )) end do end do end do end do end do end do !initialize: call s1 % initialize ( x , fcn_1d , kx , iflag ( 1 )) call s2 % initialize ( x , y , fcn_2d , kx , ky , iflag ( 2 )) call s3 % initialize ( x , y , z , fcn_3d , kx , ky , kz , iflag ( 3 )) call s4 % initialize ( x , y , z , q , fcn_4d , kx , ky , kz , kq , iflag ( 4 )) call s5 % initialize ( x , y , z , q , r , fcn_5d , kx , ky , kz , kq , kr , iflag ( 5 )) call s6 % initialize ( x , y , z , q , r , s , fcn_6d , kx , ky , kz , kq , kr , ks , iflag ( 6 )) if ( any ( iflag /= 0 )) then do i = 1 , 6 if ( iflag ( i ) /= 0 ) then write ( * , * ) 'Error initializing ' , i , 'D spline: ' // get_status_message ( iflag ( i )) end if end do end if write ( * , * ) '' write ( * , * ) 'size of 1d structure: ' , s1 % size_of () * 8 , 'bytes' write ( * , * ) 'size of 2d structure: ' , s2 % size_of () * 8 , 'bytes' write ( * , * ) 'size of 3d structure: ' , s3 % size_of () * 8 , 'bytes' write ( * , * ) 'size of 4d structure: ' , s4 % size_of () * 8 , 'bytes' write ( * , * ) 'size of 5d structure: ' , s5 % size_of () * 8 , 'bytes' write ( * , * ) 'size of 6d structure: ' , s6 % size_of () * 8 , 'bytes' write ( * , * ) '' ! compute max error at interpolation points errmax = 0.0_wp do i = 1 , nx call s1 % evaluate ( x ( i ), idx , val ( 1 ), iflag ( 1 )) tru ( 1 ) = f1 ( x ( i )) err ( 1 ) = abs ( tru ( 1 ) - val ( 1 )) errmax ( 1 ) = max ( err ( 1 ), errmax ( 1 )) do j = 1 , ny call s2 % evaluate ( x ( i ), y ( j ), idx , idy , val ( 2 ), iflag ( 2 )) tru ( 2 ) = f2 ( x ( i ), y ( j )) err ( 2 ) = abs ( tru ( 2 ) - val ( 2 )) errmax ( 2 ) = max ( err ( 2 ), errmax ( 2 )) do k = 1 , nz call s3 % evaluate ( x ( i ), y ( j ), z ( k ), idx , idy , idz , val ( 3 ), iflag ( 3 )) tru ( 3 ) = f3 ( x ( i ), y ( j ), z ( k )) err ( 3 ) = abs ( tru ( 3 ) - val ( 3 )) errmax ( 3 ) = max ( err ( 3 ), errmax ( 3 )) do l = 1 , nq call s4 % evaluate ( x ( i ), y ( j ), z ( k ), q ( l ), idx , idy , idz , idq , val ( 4 ), iflag ( 4 )) tru ( 4 ) = f4 ( x ( i ), y ( j ), z ( k ), q ( l )) err ( 4 ) = abs ( tru ( 4 ) - val ( 4 )) errmax ( 4 ) = max ( err ( 4 ), errmax ( 4 )) do m = 1 , nr call s5 % evaluate ( x ( i ), y ( j ), z ( k ), q ( l ), r ( m ), idx , idy , idz , idq , idr , val ( 5 ), iflag ( 5 )) tru ( 5 ) = f5 ( x ( i ), y ( j ), z ( k ), q ( l ), r ( m )) err ( 5 ) = abs ( tru ( 5 ) - val ( 5 )) errmax ( 5 ) = max ( err ( 5 ), errmax ( 5 )) do n = 1 , ns call s6 % evaluate ( x ( i ), y ( j ), z ( k ), q ( l ), r ( m ), s ( n ), idx , idy , idz , idq , idr , ids , val ( 6 ), iflag ( 6 )) tru ( 6 ) = f6 ( x ( i ), y ( j ), z ( k ), q ( l ), r ( m ), s ( n )) err ( 6 ) = abs ( tru ( 6 ) - val ( 6 )) errmax ( 6 ) = max ( err ( 6 ), errmax ( 6 )) end do end do end do end do end do end do ! check max error against tolerance do i = 1 , 6 write ( * , * ) i , 'D: max error:' , errmax ( i ) if ( errmax ( i ) >= tol ) then write ( * , * ) ' ** test failed ** ' else write ( * , * ) ' ** test passed ** ' end if write ( * , * ) '' end do contains real ( wp ) function f1 ( x ) !! 1d test function implicit none real ( wp ) :: x f1 = 0.5_wp * ( x * exp ( - x ) + sin ( x ) ) end function f1 real ( wp ) function f2 ( x , y ) !! 2d test function implicit none real ( wp ) x , y , piov2 piov2 = 2.0_wp * atan ( 1.0_wp ) f2 = 0.5_wp * ( y * exp ( - x ) + sin ( piov2 * y ) ) end function f2 real ( wp ) function f3 ( x , y , z ) !! 3d test function implicit none real ( wp ) x , y , z , piov2 piov2 = 2.0_wp * atan ( 1.0_wp ) f3 = 0.5_wp * ( y * exp ( - x ) + z * sin ( piov2 * y ) ) end function f3 real ( wp ) function f4 ( x , y , z , q ) !! 4d test function implicit none real ( wp ) x , y , z , q , piov2 piov2 = 2.0_wp * atan ( 1.0_wp ) f4 = 0.5_wp * ( y * exp ( - x ) + z * sin ( piov2 * y ) + q ) end function f4 real ( wp ) function f5 ( x , y , z , q , r ) !! 5d test function implicit none real ( wp ) x , y , z , q , r , piov2 piov2 = 2.0_wp * atan ( 1.0_wp ) f5 = 0.5_wp * ( y * exp ( - x ) + z * sin ( piov2 * y ) + q * r ) end function f5 real ( wp ) function f6 ( x , y , z , q , r , s ) !! 6d test function implicit none real ( wp ) x , y , z , q , r , s , piov2 piov2 = 2.0_wp * atan ( 1.0_wp ) f6 = 0.5_wp * ( y * exp ( - x ) + z * sin ( piov2 * y ) + q * r + 2.0_wp * s ) end function f6 end program bspline_oo_test","tags":"","loc":"sourcefile/test_oo.f90.html","title":"test_oo.f90 â€“ bspline-fortran"},{"text":"This File Depends On sourcefile~~test_integrate.f90~~EfferentGraph sourcefile~test_integrate.f90 test_integrate.f90 sourcefile~bspline_module.f90 bspline_module.f90 sourcefile~bspline_module.f90->sourcefile~test_integrate.f90 sourcefile~bspline_oo_module.f90 bspline_oo_module.f90 sourcefile~bspline_oo_module.f90->sourcefile~bspline_module.f90 sourcefile~bspline_sub_module.f90 bspline_sub_module.f90 sourcefile~bspline_sub_module.f90->sourcefile~bspline_module.f90 sourcefile~bspline_sub_module.f90->sourcefile~bspline_oo_module.f90 Help Ã— Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which depends upon it. A file \n    is dependent upon another if the latter must be compiled before the former\n    can be. Programs bspline_integrate_test Source Code test_integrate.f90 Source Code !***************************************************************************************** !> author: Jacob Williams !  date: 9/6/2017 ! !  1D definite integral test using the bspline module. ! !  This test case evaluates the integral: ! !   \\int_{0}&#94;{\\pi} \\sin (x) dx = 2  ! !  using a B-Spline of the points: ! !   \\left[ \\sin(0&#94;{\\circ}), \\sin(1&#94;{\\circ}), ..., \\sin(180&#94;{\\circ}) \\right]  program bspline_integrate_test use bspline_module use , intrinsic :: iso_fortran_env , only : wp => real64 implicit none real ( wp ), parameter :: pi = acos ( - 1.0_wp ) !!  \\pi  real ( wp ), parameter :: deg2rad = pi / 18 0.0_wp !! degrees to radians integer , parameter :: iknot = 0 !! automatically select the knots real ( wp ), parameter :: x1 = 0.0_wp !! left endpoint real ( wp ), parameter :: x2 = pi !! right endpoint integer , parameter :: nx = 181 !! number of points in x dimension !! in original grid real ( wp ), parameter :: tol = 1.0e-12_wp !! tolerance for [[db1fqad]] real ( wp ), dimension (:), allocatable :: tx !! x knots integer :: kx !! x bspline order real ( wp ), dimension ( nx ) :: x !! new grid x points real ( wp ), dimension ( nx ) :: fcn !! original grid !! function evaluations integer :: i !! counter integer :: iflag !! status flag real ( wp ) :: f !! the evaluated integral !! (should be close to 2) write ( * , * ) '' write ( * , '(A8,1X,A5,1X,A30,1X,A30)' ) 'Method' , 'Order' , 'Integral' , 'Error' do kx = 2 , 8 if ( allocated ( tx )) deallocate ( tx ) allocate ( tx ( nx + kx )) !function evaluations for original grid: do i = 1 , nx x ( i ) = deg2rad * real ( i - 1 , wp ) fcn ( i ) = sin ( x ( i )) end do ! initialize: call db1ink ( x , nx , fcn , kx , iknot , tx , fcn , iflag ) if ( iflag /= 0 ) error stop 'error calling db1ink' ! now integrate: call db1sqad ( tx , fcn , nx , kx , x1 , x2 , f , iflag ) ! display results: if ( iflag /= 0 ) then write ( * , * ) '' write ( * , * ) 'iflag: ' , iflag error stop 'error calling db1qad' else write ( * , '(A8,1X,I5,1X,E30.16,1X,E30.16)' ) 'db1qad' , kx , f , f - 2.0_wp end if ! integrate using adaptive version: call db1fqad ( test_function , tx , fcn , nx , kx , 0 , x1 , x2 , tol , f , iflag ) ! display results: if ( iflag /= 0 ) then write ( * , * ) '' write ( * , * ) 'iflag: ' , iflag error stop 'error calling db1fqad' else write ( * , '(A8,1X,I5,1X,E30.16,1X,E30.16)' ) 'db1fqad' , kx , f , f - 4.0_wp end if end do write ( * , * ) '' contains function test_function ( x ) result ( f ) implicit none real ( wp ), intent ( in ) :: x real ( wp ) :: f !! f(x) f = 2.0_wp end function test_function end program bspline_integrate_test !*****************************************************************************************","tags":"","loc":"sourcefile/test_integrate.f90.html","title":"test_integrate.f90 â€“ bspline-fortran"},{"text":"This File Depends On sourcefile~~knot_tests.f90~~EfferentGraph sourcefile~knot_tests.f90 knot_tests.f90 sourcefile~bspline_module.f90 bspline_module.f90 sourcefile~bspline_module.f90->sourcefile~knot_tests.f90 sourcefile~bspline_oo_module.f90 bspline_oo_module.f90 sourcefile~bspline_oo_module.f90->sourcefile~bspline_module.f90 sourcefile~bspline_sub_module.f90 bspline_sub_module.f90 sourcefile~bspline_sub_module.f90->sourcefile~bspline_module.f90 sourcefile~bspline_sub_module.f90->sourcefile~bspline_oo_module.f90 Help Ã— Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which depends upon it. A file \n    is dependent upon another if the latter must be compiled before the former\n    can be. Programs knot_tests Source Code knot_tests.f90 Source Code !***************************************************************************************** !> author: Jacob Williams !  date: 12/6/2015 ! !  Tests for different knot vectors. ! !  This requires [pyplot_module](https://github.com/jacobwilliams/pyplot-fortran) ! !### Results !  ![Plot of results](https://raw.githubusercontent.com/jacobwilliams/bspline-fortran/master/src/tests/knot_tests.png) program knot_tests use bspline_module use , intrinsic :: iso_fortran_env , only : wp => real64 use pyplot_module implicit none integer :: i !! counter integer , parameter :: kx = 4 !! x bspline order integer , parameter :: nx = 6 !! number of points in x dimension real ( wp ), dimension ( nx ), parameter :: x = [( real ( i * 10 , wp ), i = 0 , 11 ,( 10 + 2 ) / nx )] !! [0,20,40,60,80,100] real ( wp ), dimension ( nx ) :: fcn real ( wp ), dimension ( nx + kx ) :: tx type ( bspline_1d ) :: s_default , s1 , s2 real ( wp ), dimension ( 0 : 100 ) :: x_new , f_new_default , f1 , f2 !,f_actual real ( wp ) :: xval type ( pyplot ) :: plt integer :: iflag integer :: istat !! pyplot-fortran status flag !function evaluations for original grid: do i = 1 , nx fcn ( i ) = test_func ( x ( i )) end do !initialize the plot: call plt % initialize ( grid = . true ., xlabel = 'x' , ylabel = 'f(x)' ,& title = 'Knot Test' , legend = . true .) call plt % add_plot ( x , fcn , label = 'Function $f(x) = \\sin(x \\cdot \\pi/18)$ : $x=[0,20,40,60,80,100]$' ,& linestyle = 'ko--' , markersize = 5 , linewidth = 2 , istat = istat ) !initialize three with different knot sequences: ! x = [ 0,      20,40,60,80,100                ] (x points) ! t = [ 0,0,0,0,   40,60,      101,101,101,101 ] (tx for not a knot conditions) call s_default % initialize ( x , fcn , kx , iflag ) !default (not-a-knot) if ( iflag /= 0 ) error stop 'error initializing s_default' !user-specified knots: tx = real ([ 0 , 0 , 0 , 0 , 20 , 40 , 101 , 101 , 101 , 101 ], wp ) call s1 % initialize ( x , fcn , kx , tx , iflag ) if ( iflag /= 0 ) error stop 'error initializing s1' tx = real ([ 0 , 0 , 0 , 0 , 60 , 80 , 101 , 101 , 101 , 101 ], wp ) call s2 % initialize ( x , fcn , kx , tx , iflag ) if ( iflag /= 0 ) error stop 'error initializing s2' do i = 0 , 100 xval = real ( i , wp ) x_new ( i ) = xval !f_actual(i) = test_func(xval) call s_default % evaluate ( xval , 0 , f_new_default ( i ), iflag ) if ( iflag /= 0 ) error stop 'error evaluating s_default' call s1 % evaluate ( xval , 0 , f1 ( i ), iflag ) if ( iflag /= 0 ) error stop 'error evaluating s1' call s2 % evaluate ( xval , 0 , f2 ( i ), iflag ) if ( iflag /= 0 ) error stop 'error evaluating s2' end do !call plt%add_plot(x_new,f_actual,label='Actual function',linestyle='k--',linewidth=2) call plt % add_plot ( x_new , f_new_default ,& label = 'Interpolated : $t_x=[0,0,0,0,40,60,102,102,102,102]$ (Default)' ,& linestyle = 'b-' , linewidth = 1 , istat = istat ) call plt % add_plot ( x_new , f1 ,& label = 'Interpolated : $t_x=[0,0,0,0,20,40,101,101,101,101]$' ,& linestyle = 'r-' , linewidth = 1 , istat = istat ) call plt % add_plot ( x_new , f2 ,& label = 'Interpolated : $t_x=[0,0,0,0,60,80,101,101,101,101]$' ,& linestyle = 'g-' , linewidth = 1 , istat = istat ) !plot the results: call plt % savefig ( 'knot_tests.png' , istat = istat ) contains pure function test_func ( x ) result ( f ) !! 1d test function implicit none real ( wp ) :: f real ( wp ), intent ( in ) :: x real ( wp ), parameter :: a = acos ( - 1.0_wp ) / 1 8.0_wp f = sin ( a * x ) end function test_func end program knot_tests","tags":"","loc":"sourcefile/knot_tests.f90.html","title":"knot_tests.f90 â€“ bspline-fortran"},{"text":"This File Depends On sourcefile~~test_regrid.f90~~EfferentGraph sourcefile~test_regrid.f90 test_regrid.f90 sourcefile~bspline_module.f90 bspline_module.f90 sourcefile~bspline_module.f90->sourcefile~test_regrid.f90 sourcefile~bspline_oo_module.f90 bspline_oo_module.f90 sourcefile~bspline_oo_module.f90->sourcefile~bspline_module.f90 sourcefile~bspline_sub_module.f90 bspline_sub_module.f90 sourcefile~bspline_sub_module.f90->sourcefile~bspline_module.f90 sourcefile~bspline_sub_module.f90->sourcefile~bspline_oo_module.f90 Help Ã— Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which depends upon it. A file \n    is dependent upon another if the latter must be compiled before the former\n    can be. Programs bspline_regridding_test Source Code test_regrid.f90 Source Code !***************************************************************************************** !> author: Jacob Williams !  date: 10/5/2015 ! !  2D data regridding using the bspline module. program bspline_regridding_test use bspline_module use , intrinsic :: iso_fortran_env , only : wp => real64 implicit none integer , parameter :: kx = 4 !! x bspline order integer , parameter :: ky = 4 !! y bspline order integer , parameter :: idx = 0 !! [[db2val]] input integer , parameter :: idy = 0 !! [[db2val]] input integer , parameter :: nx = 6 !! number of points in x dimension in original grid integer , parameter :: ny = 5 !! number of points in y dimension in original grid integer , parameter :: nx_new = 11 !! number of points in x dimension for new grid integer , parameter :: ny_new = 9 !! number of points in y dimension for new grid integer , parameter :: iknot = 0 !! automatically select the knots real ( wp ), dimension ( nx ), parameter :: x = [ 0.0_wp , 2.0_wp , 4.0_wp , 6.0_wp , 8.0_wp , 1 0.0_wp ] !! x points in original grid real ( wp ), dimension ( ny ), parameter :: y = [ 0.0_wp , 2.0_wp , 4.0_wp , 6.0_wp , 8.0_wp ] !! y points in original grid real ( wp ), dimension ( nx_new , ny_new ) :: fcn_new !! new grid function evaluations real ( wp ), dimension ( nx_new ) :: x_new !! new grid x points real ( wp ), dimension ( ny_new ) :: y_new !! new grid y points real ( wp ), dimension ( nx + kx ) :: tx !! x knots real ( wp ), dimension ( ny + ky ) :: ty !! y knots real ( wp ), dimension ( nx , ny ) :: fcn_2d !! original grid function evaluations real ( wp ) :: val , tru , err , errmax integer :: i , j integer :: iflag !! status flag integer :: inbvx , inbvy , iloy !function evaluations for original grid: do i = 1 , nx do j = 1 , ny fcn_2d ( i , j ) = test_func ( x ( i ), y ( j )) end do end do !display original data: write ( * , * ) '-----------------' write ( * , * ) '  INITIAL DATA:' write ( * , * ) '-----------------' write ( * , '(A/,*(F12.6,1X))' ) 'x:' , x write ( * , * ) '' write ( * , '(A/,*(F12.6,1X))' ) 'y:' , y write ( * , * ) '' write ( * , '(A)' ) 'fcn(x,y):' do i = 1 , nx write ( * , '(5F12.6)' ) fcn_2d ( i ,:) end do write ( * , * ) '' !regrid: inbvx = 1 inbvy = 1 iloy = 1 call db2ink ( x , nx , y , ny , fcn_2d , kx , ky , iknot , tx , ty , fcn_2d , iflag ) if ( iflag /= 0 ) error stop 'error calling db2ink' errmax = 0.0_wp do i = 1 , nx_new x_new ( i ) = real ( i - 1 , wp ) do j = 1 , ny_new y_new ( j ) = real ( j - 1 , wp ) call db2val ( x_new ( i ), y_new ( j ), idx , idy , tx , ty , nx , ny , kx , ky , fcn_2d , val , iflag ,& inbvx , inbvy , iloy ) if ( iflag /= 0 ) error stop 'error calling db2val' fcn_new ( i , j ) = val tru = test_func ( x_new ( i ), y_new ( j )) !truth value err = abs ( tru - val ) errmax = max ( err , errmax ) end do end do !display new grid: write ( * , * ) '-----------------' write ( * , * ) '  NEW GRID:' write ( * , * ) '-----------------' write ( * , '(A/,*(F12.6,1X))' ) 'x:' , x_new write ( * , * ) '' write ( * , '(A/,*(F12.6,1X))' ) 'y:' , y_new write ( * , * ) '' write ( * , '(A)' ) 'fcn(x,y):' do i = 1 , nx_new write ( * , '(11F12.6)' ) fcn_new ( i ,:) end do write ( * , * ) '' write ( * , * ) ' max error:' , errmax write ( * , * ) '' contains function test_func ( x , y ) result ( f ) !! 2d test function implicit none real ( wp ) :: f real ( wp ), intent ( in ) :: x , y real ( wp ), parameter :: deg2rad = acos ( - 1.0_wp ) / 18 0.0_wp !! degrees to radians conversion factor f = sin ( deg2rad * ( x + y )) end function test_func end program bspline_regridding_test","tags":"","loc":"sourcefile/test_regrid.f90.html","title":"test_regrid.f90 â€“ bspline-fortran"},{"text":"This File Depends On sourcefile~~test.f90~~EfferentGraph sourcefile~test.f90 test.f90 sourcefile~bspline_module.f90 bspline_module.f90 sourcefile~bspline_module.f90->sourcefile~test.f90 sourcefile~bspline_oo_module.f90 bspline_oo_module.f90 sourcefile~bspline_oo_module.f90->sourcefile~bspline_module.f90 sourcefile~bspline_sub_module.f90 bspline_sub_module.f90 sourcefile~bspline_sub_module.f90->sourcefile~bspline_module.f90 sourcefile~bspline_sub_module.f90->sourcefile~bspline_oo_module.f90 Help Ã— Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which depends upon it. A file \n    is dependent upon another if the latter must be compiled before the former\n    can be. Programs bspline_test Source Code test.f90 Source Code !***************************************************************************************** !> !  Units test for 1d-6d tensor product b-spline interpolation. program bspline_test use bspline_module use , intrinsic :: iso_fortran_env , only : wp => real64 implicit none integer , parameter :: nx = 6 !! number of points in x integer , parameter :: ny = 6 !! number of points in y integer , parameter :: nz = 6 !! number of points in z integer , parameter :: nq = 6 !! number of points in q integer , parameter :: nr = 6 !! number of points in r integer , parameter :: ns = 6 !! number of points in s integer , parameter :: kx = 4 !! order in x integer , parameter :: ky = 4 !! order in y integer , parameter :: kz = 4 !! order in z integer , parameter :: kq = 4 !! order in q integer , parameter :: kr = 4 !! order in r integer , parameter :: ks = 4 !! order in s integer , parameter :: iknot = 0 !! automatically select the knots real ( wp ) :: x ( nx ), y ( ny ), z ( nz ), q ( nq ), r ( nr ), s ( ns ) real ( wp ) :: tx ( nx + kx ), ty ( ny + ky ), tz ( nz + kz ), tq ( nq + kq ), tr ( nr + kr ), ts ( ns + ks ) real ( wp ) :: fcn_1d ( nx ) real ( wp ) :: fcn_2d ( nx , ny ) real ( wp ) :: fcn_3d ( nx , ny , nz ) real ( wp ) :: fcn_4d ( nx , ny , nz , nq ) real ( wp ) :: fcn_5d ( nx , ny , nz , nq , nr ) real ( wp ) :: fcn_6d ( nx , ny , nz , nq , nr , ns ) real ( wp ) :: tol real ( wp ), dimension ( 6 ) :: val , tru , err , errmax logical :: fail integer :: i , j , k , l , m , n , idx , idy , idz , idq , idr , ids integer , dimension ( 6 ) :: iflag integer :: inbvx , inbvy , inbvz , inbvq , inbvr , inbvs integer :: iloy , iloz , iloq , ilor , ilos fail = . false . tol = 1.0e-14_wp idx = 0 idy = 0 idz = 0 idq = 0 idr = 0 ids = 0 do i = 1 , nx x ( i ) = dble ( i - 1 ) / dble ( nx - 1 ) end do do j = 1 , ny y ( j ) = dble ( j - 1 ) / dble ( ny - 1 ) end do do k = 1 , nz z ( k ) = dble ( k - 1 ) / dble ( nz - 1 ) end do do l = 1 , nq q ( l ) = dble ( l - 1 ) / dble ( nq - 1 ) end do do m = 1 , nr r ( m ) = dble ( m - 1 ) / dble ( nr - 1 ) end do do n = 1 , ns s ( n ) = dble ( n - 1 ) / dble ( ns - 1 ) end do do i = 1 , nx fcn_1d ( i ) = f1 ( x ( i )) do j = 1 , ny fcn_2d ( i , j ) = f2 ( x ( i ), y ( j )) do k = 1 , nz fcn_3d ( i , j , k ) = f3 ( x ( i ), y ( j ), z ( k )) do l = 1 , nq fcn_4d ( i , j , k , l ) = f4 ( x ( i ), y ( j ), z ( k ), q ( l )) do m = 1 , nr fcn_5d ( i , j , k , l , m ) = f5 ( x ( i ), y ( j ), z ( k ), q ( l ), r ( m )) do n = 1 , ns fcn_6d ( i , j , k , l , m , n ) = f6 ( x ( i ), y ( j ), z ( k ), q ( l ), r ( m ), s ( n )) end do end do end do end do end do end do !have to set these before the first evaluate call: inbvx = 1 inbvy = 1 inbvz = 1 inbvq = 1 inbvr = 1 inbvs = 1 iloy = 1 iloz = 1 iloq = 1 ilor = 1 ilos = 1 ! initialize call db1ink ( x , nx , fcn_1d , kx , iknot , tx , fcn_1d , iflag ( 1 )) call db2ink ( x , nx , y , ny , fcn_2d , kx , ky , iknot , tx , ty , fcn_2d , iflag ( 2 )) call db3ink ( x , nx , y , ny , z , nz , fcn_3d , kx , ky , kz , iknot , tx , ty , tz , fcn_3d , iflag ( 3 )) call db4ink ( x , nx , y , ny , z , nz , q , nq , fcn_4d , kx , ky , kz , kq , iknot , tx , ty , tz , tq , fcn_4d , iflag ( 4 )) call db5ink ( x , nx , y , ny , z , nz , q , nq , r , nr , fcn_5d , kx , ky , kz , kq , kr , iknot , tx , ty , tz , tq , tr , fcn_5d , iflag ( 5 )) call db6ink ( x , nx , y , ny , z , nz , q , nq , r , nr , s , ns , fcn_6d , kx , ky , kz , kq , kr , ks , iknot , tx , ty , tz , tq , tr , ts , fcn_6d , iflag ( 6 )) if ( any ( iflag /= 0 )) then do i = 1 , 6 if ( iflag ( i ) /= 0 ) then write ( * , * ) 'Error initializing ' , i , 'D spline: ' // get_status_message ( iflag ( i )) end if end do end if ! compute max error at interpolation points errmax = 0.0_wp do i = 1 , nx call db1val ( x ( i ), idx ,& tx , nx , kx , fcn_1d , val ( 1 ), iflag ( 1 ), inbvx ) tru ( 1 ) = f1 ( x ( i )) err ( 1 ) = abs ( tru ( 1 ) - val ( 1 )) errmax ( 1 ) = max ( err ( 1 ), errmax ( 1 )) do j = 1 , ny call db2val ( x ( i ), y ( j ), idx , idy ,& tx , ty , nx , ny , kx , ky , fcn_2d , val ( 2 ), iflag ( 2 ),& inbvx , inbvy , iloy ) tru ( 2 ) = f2 ( x ( i ), y ( j )) err ( 2 ) = abs ( tru ( 2 ) - val ( 2 )) errmax ( 2 ) = max ( err ( 2 ), errmax ( 2 )) do k = 1 , nz call db3val ( x ( i ), y ( j ), z ( k ), idx , idy , idz ,& tx , ty , tz , nx , ny , nz , kx , ky , kz , fcn_3d , val ( 3 ), iflag ( 3 ),& inbvx , inbvy , inbvz , iloy , iloz ) tru ( 3 ) = f3 ( x ( i ), y ( j ), z ( k )) err ( 3 ) = abs ( tru ( 3 ) - val ( 3 )) errmax ( 3 ) = max ( err ( 3 ), errmax ( 3 )) do l = 1 , nq call db4val ( x ( i ), y ( j ), z ( k ), q ( l ), idx , idy , idz , idq ,& tx , ty , tz , tq , nx , ny , nz , nq , kx , ky , kz , kq , fcn_4d , val ( 4 ), iflag ( 4 ),& inbvx , inbvy , inbvz , inbvq , iloy , iloz , iloq ) tru ( 4 ) = f4 ( x ( i ), y ( j ), z ( k ), q ( l )) err ( 4 ) = abs ( tru ( 4 ) - val ( 4 )) errmax ( 4 ) = max ( err ( 4 ), errmax ( 4 )) do m = 1 , nr call db5val ( x ( i ), y ( j ), z ( k ), q ( l ), r ( m ), idx , idy , idz , idq , idr ,& tx , ty , tz , tq , tr , nx , ny , nz , nq , nr , kx , ky , kz , kq , kr , fcn_5d , val ( 5 ), iflag ( 5 ),& inbvx , inbvy , inbvz , inbvq , inbvr , iloy , iloz , iloq , ilor ) tru ( 5 ) = f5 ( x ( i ), y ( j ), z ( k ), q ( l ), r ( m )) err ( 5 ) = abs ( tru ( 5 ) - val ( 5 )) errmax ( 5 ) = max ( err ( 5 ), errmax ( 5 )) do n = 1 , ns call db6val ( x ( i ), y ( j ), z ( k ), q ( l ), r ( m ), s ( n ), idx , idy , idz , idq , idr , ids ,& tx , ty , tz , tq , tr , ts , nx , ny , nz , nq , nr , ns , kx , ky , kz , kq , kr , ks , fcn_6d , val ( 6 ), iflag ( 6 ),& inbvx , inbvy , inbvz , inbvq , inbvr , inbvs , iloy , iloz , iloq , ilor , ilos ) tru ( 6 ) = f6 ( x ( i ), y ( j ), z ( k ), q ( l ), r ( m ), s ( n )) err ( 6 ) = abs ( tru ( 6 ) - val ( 6 )) errmax ( 6 ) = max ( err ( 6 ), errmax ( 6 )) end do end do end do end do end do end do ! check max error against tolerance do i = 1 , 6 write ( * , * ) i , 'D: max error:' , errmax ( i ) if ( errmax ( i ) >= tol ) then write ( * , * ) ' ** test failed ** ' else write ( * , * ) ' ** test passed ** ' end if write ( * , * ) '' end do contains real ( wp ) function f1 ( x ) !! 1d test function implicit none real ( wp ) :: x f1 = 0.5_wp * ( x * exp ( - x ) + sin ( x ) ) end function f1 real ( wp ) function f2 ( x , y ) !! 2d test function implicit none real ( wp ) x , y , piov2 piov2 = 2.0_wp * atan ( 1.0_wp ) f2 = 0.5_wp * ( y * exp ( - x ) + sin ( piov2 * y ) ) end function f2 real ( wp ) function f3 ( x , y , z ) !! 3d test function implicit none real ( wp ) x , y , z , piov2 piov2 = 2.0_wp * atan ( 1.0_wp ) f3 = 0.5_wp * ( y * exp ( - x ) + z * sin ( piov2 * y ) ) end function f3 real ( wp ) function f4 ( x , y , z , q ) !! 4d test function implicit none real ( wp ) x , y , z , q , piov2 piov2 = 2.0_wp * atan ( 1.0_wp ) f4 = 0.5_wp * ( y * exp ( - x ) + z * sin ( piov2 * y ) + q ) end function f4 real ( wp ) function f5 ( x , y , z , q , r ) !! 5d test function implicit none real ( wp ) x , y , z , q , r , piov2 piov2 = 2.0_wp * atan ( 1.0_wp ) f5 = 0.5_wp * ( y * exp ( - x ) + z * sin ( piov2 * y ) + q * r ) end function f5 real ( wp ) function f6 ( x , y , z , q , r , s ) !! 6d test function implicit none real ( wp ) x , y , z , q , r , s , piov2 piov2 = 2.0_wp * atan ( 1.0_wp ) f6 = 0.5_wp * ( y * exp ( - x ) + z * sin ( piov2 * y ) + q * r + 2.0_wp * s ) end function f6 end program bspline_test","tags":"","loc":"sourcefile/test.f90.html","title":"test.f90 â€“ bspline-fortran"},{"text":"This File Depends On sourcefile~~speed_test_oo.f90~~EfferentGraph sourcefile~speed_test_oo.f90 speed_test_oo.f90 sourcefile~bspline_module.f90 bspline_module.f90 sourcefile~bspline_module.f90->sourcefile~speed_test_oo.f90 sourcefile~bspline_oo_module.f90 bspline_oo_module.f90 sourcefile~bspline_oo_module.f90->sourcefile~bspline_module.f90 sourcefile~bspline_sub_module.f90 bspline_sub_module.f90 sourcefile~bspline_sub_module.f90->sourcefile~bspline_module.f90 sourcefile~bspline_sub_module.f90->sourcefile~bspline_oo_module.f90 Help Ã— Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which depends upon it. A file \n    is dependent upon another if the latter must be compiled before the former\n    can be. Programs bspline_speed_test_oo Source Code speed_test_oo.f90 Source Code !***************************************************************************************** !> !  Speed test for 1d-6d tensor product b-spline interpolation (object-oriented version). ! !### Results !  ![Plot of results](https://raw.githubusercontent.com/jacobwilliams/bspline-fortran/master/src/tests/speed_test_oo.png) program bspline_speed_test_oo use bspline_module use , intrinsic :: iso_fortran_env , only : wp => real64 use pyplot_module implicit none integer , parameter :: nx = 8 !number of points integer , parameter :: ny = 8 integer , parameter :: nz = 8 integer , parameter :: nq = 8 integer , parameter :: nr = 8 integer , parameter :: ns = 8 integer , parameter :: kx = 4 !order integer , parameter :: ky = 4 integer , parameter :: kz = 4 integer , parameter :: kq = 4 integer , parameter :: kr = 4 integer , parameter :: ks = 4 integer , parameter :: n_cases = nx * ny * nz * nq * nr * ns real ( wp ) :: x ( nx ), y ( ny ), z ( nz ), q ( nq ), r ( nr ), s ( ns ) real ( wp ) :: fcn_1d ( nx ) real ( wp ) :: fcn_2d ( nx , ny ) real ( wp ) :: fcn_3d ( nx , ny , nz ) real ( wp ) :: fcn_4d ( nx , ny , nz , nq ) real ( wp ) :: fcn_5d ( nx , ny , nz , nq , nr ) real ( wp ) :: fcn_6d ( nx , ny , nz , nq , nr , ns ) type ( bspline_1d ) :: s1 type ( bspline_2d ) :: s2 type ( bspline_3d ) :: s3 type ( bspline_4d ) :: s4 type ( bspline_5d ) :: s5 type ( bspline_6d ) :: s6 real ( wp ) :: val , sumval integer :: i , j , k , l , m , n , idx , idy , idz , idq , idr , ids , iflag real :: tstart , tend type ( pyplot ) :: plt real ( wp ), dimension ( 6 ) :: cases_per_sec integer :: istat !! pyplot-fortran status flag idx = 0 idy = 0 idz = 0 idq = 0 idr = 0 ids = 0 x = [ ( dble ( i ), i = 1 , nx ) ] y = [ ( dble ( i ), i = 1 , ny ) ] z = [ ( dble ( i ), i = 1 , nz ) ] q = [ ( dble ( i ), i = 1 , nq ) ] r = [ ( dble ( i ), i = 1 , nr ) ] s = [ ( dble ( i ), i = 1 , ns ) ] !evaluate the functions: do i = 1 , nx fcn_1d ( i ) = f1 ( x ( i )) do j = 1 , ny fcn_2d ( i , j ) = f2 ( x ( i ), y ( j )) do k = 1 , nz fcn_3d ( i , j , k ) = f3 ( x ( i ), y ( j ), z ( k )) do l = 1 , nq fcn_4d ( i , j , k , l ) = f4 ( x ( i ), y ( j ), z ( k ), q ( l )) do m = 1 , nr fcn_5d ( i , j , k , l , m ) = f5 ( x ( i ), y ( j ), z ( k ), q ( l ), r ( m )) do n = 1 , ns fcn_6d ( i , j , k , l , m , n ) = f6 ( x ( i ), y ( j ), z ( k ), q ( l ), r ( m ), s ( n )) end do end do end do end do end do end do !initialize using the constructors: s1 = bspline_1d ( x , fcn_1d , kx ) ; if (. not . s1 % status_ok ()) error stop 'error initializing s1' s2 = bspline_2d ( x , y , fcn_2d , kx , ky ) ; if (. not . s1 % status_ok ()) error stop 'error initializing s2' s3 = bspline_3d ( x , y , z , fcn_3d , kx , ky , kz ) ; if (. not . s1 % status_ok ()) error stop 'error initializing s3' s4 = bspline_4d ( x , y , z , q , fcn_4d , kx , ky , kz , kq ) ; if (. not . s1 % status_ok ()) error stop 'error initializing s4' s5 = bspline_5d ( x , y , z , q , r , fcn_5d , kx , ky , kz , kq , kr ) ; if (. not . s1 % status_ok ()) error stop 'error initializing s5' s6 = bspline_6d ( x , y , z , q , r , s , fcn_6d , kx , ky , kz , kq , kr , ks ); if (. not . s1 % status_ok ()) error stop 'error initializing s6' ! evaluate the interpolants: sumval = 0.0_wp call cpu_time ( tstart ) do i = 1 , nx do j = 1 , ny do k = 1 , nz do l = 1 , nq do m = 1 , nr do n = 1 , ns call s1 % evaluate ( x ( i ), idx , val , iflag ) sumval = sumval + val end do end do end do end do end do end do call cpu_time ( tend ) write ( * , * ) '' write ( * , * ) '1D' write ( * , * ) 'result         :' , sumval write ( * , * ) 'number of cases:' , n_cases write ( * , * ) 'cases/sec      :' , n_cases / ( tend - tstart ) cases_per_sec ( 1 ) = n_cases / ( tend - tstart ) sumval = 0.0_wp call cpu_time ( tstart ) do i = 1 , nx do j = 1 , ny do k = 1 , nz do l = 1 , nq do m = 1 , nr do n = 1 , ns call s2 % evaluate ( x ( i ), y ( j ), idx , idy , val , iflag ) sumval = sumval + val end do end do end do end do end do end do call cpu_time ( tend ) write ( * , * ) '' write ( * , * ) '2D' write ( * , * ) 'result         :' , sumval write ( * , * ) 'number of cases:' , n_cases write ( * , * ) 'cases/sec      :' , n_cases / ( tend - tstart ) cases_per_sec ( 2 ) = n_cases / ( tend - tstart ) sumval = 0.0_wp call cpu_time ( tstart ) do i = 1 , nx do j = 1 , ny do k = 1 , nz do l = 1 , nq do m = 1 , nr do n = 1 , ns call s3 % evaluate ( x ( i ), y ( j ), z ( k ), idx , idy , idz , val , iflag ) sumval = sumval + val end do end do end do end do end do end do call cpu_time ( tend ) write ( * , * ) '' write ( * , * ) '3D' write ( * , * ) 'result         :' , sumval write ( * , * ) 'number of cases:' , n_cases write ( * , * ) 'cases/sec      :' , n_cases / ( tend - tstart ) cases_per_sec ( 3 ) = n_cases / ( tend - tstart ) sumval = 0.0_wp call cpu_time ( tstart ) do i = 1 , nx do j = 1 , ny do k = 1 , nz do l = 1 , nq do m = 1 , nr do n = 1 , ns call s4 % evaluate ( x ( i ), y ( j ), z ( k ), q ( l ), idx , idy , idz , idq , val , iflag ) sumval = sumval + val end do end do end do end do end do end do call cpu_time ( tend ) write ( * , * ) '' write ( * , * ) '4D' write ( * , * ) 'result         :' , sumval write ( * , * ) 'number of cases:' , n_cases write ( * , * ) 'cases/sec      :' , n_cases / ( tend - tstart ) cases_per_sec ( 4 ) = n_cases / ( tend - tstart ) sumval = 0.0_wp call cpu_time ( tstart ) do i = 1 , nx do j = 1 , ny do k = 1 , nz do l = 1 , nq do m = 1 , nr do n = 1 , ns call s5 % evaluate ( x ( i ), y ( j ), z ( k ), q ( l ), r ( m ), idx , idy , idz , idq , idr , val , iflag ) sumval = sumval + val end do end do end do end do end do end do call cpu_time ( tend ) write ( * , * ) '' write ( * , * ) '5D' write ( * , * ) 'result         :' , sumval write ( * , * ) 'number of cases:' , n_cases write ( * , * ) 'cases/sec      :' , n_cases / ( tend - tstart ) cases_per_sec ( 5 ) = n_cases / ( tend - tstart ) sumval = 0.0_wp call cpu_time ( tstart ) do i = 1 , nx do j = 1 , ny do k = 1 , nz do l = 1 , nq do m = 1 , nr do n = 1 , ns call s6 % evaluate ( x ( i ), y ( j ), z ( k ), q ( l ), r ( m ), s ( n ), idx , idy , idz , idq , idr , ids , val , iflag ) sumval = sumval + val end do end do end do end do end do end do call cpu_time ( tend ) write ( * , * ) '' write ( * , * ) '6D' write ( * , * ) 'result         :' , sumval write ( * , * ) 'number of cases:' , n_cases write ( * , * ) 'cases/sec      :' , n_cases / ( tend - tstart ) cases_per_sec ( 6 ) = n_cases / ( tend - tstart ) !plot results in bar chart: call plt % initialize ( grid = . false ., xlabel = 'Dimension' , ylabel = 'Cases Per Second' ,& title = 'Speed Test (Object-Oriented Interface)' , legend = . false .,& font_size = 20 ,& axes_labelsize = 20 ,& xtick_labelsize = 20 ,& ytick_labelsize = 20 ) call plt % add_bar ( left = real ([ 1 , 2 , 3 , 4 , 5 , 6 ], wp ), height = cases_per_sec , label = 'Speed test runs' ,& yscale = 'log' , align = 'center' , color = 'r' , istat = istat ) call plt % savefig ( 'speed_test_oo.png' , istat = istat ) contains function f1 ( x ) result ( f ) !! 1d test function implicit none real ( wp ), intent ( in ) :: x real ( wp ) :: f f = x ** 1.1_wp + x ** 1.2_wp + x ** 1.3_wp + x ** 1.4_wp + x ** 1.5_wp + x ** 1.6_wp end function f1 function f2 ( x , y ) result ( f ) !! 2d test function implicit none real ( wp ), intent ( in ) :: x , y real ( wp ) :: f f = x ** 1.1_wp + y ** 1.2_wp + x ** 1.3_wp + y ** 1.4_wp + x ** 1.5_wp + y ** 1.6_wp end function f2 function f3 ( x , y , z ) result ( f ) !! 3d test function implicit none real ( wp ), intent ( in ) :: x , y , z real ( wp ) :: f f = x ** 1.1_wp + y ** 1.2_wp + z ** 1.3_wp + x ** 1.4_wp + y ** 1.5_wp + z ** 1.6_wp end function f3 function f4 ( x , y , z , q ) result ( f ) !! 4d test function implicit none real ( wp ), intent ( in ) :: x , y , z , q real ( wp ) :: f f = x ** 1.1_wp + y ** 1.2_wp + z ** 1.3_wp + q ** 1.4_wp + x ** 1.5_wp + y ** 1.6_wp end function f4 function f5 ( x , y , z , q , r ) result ( f ) !! 5d test function implicit none real ( wp ), intent ( in ) :: x , y , z , q , r real ( wp ) :: f f = x ** 1.1_wp + y ** 1.2_wp + z ** 1.3_wp + q ** 1.4_wp + r ** 1.5_wp + x ** 1.6_wp end function f5 function f6 ( x , y , z , q , r , s ) result ( f ) !! 6d test function implicit none real ( wp ), intent ( in ) :: x , y , z , q , r , s real ( wp ) :: f f = x ** 1.1_wp + y ** 1.2_wp + z ** 1.3_wp + q ** 1.4_wp + r ** 1.5_wp + s ** 1.6_wp end function f6 end program bspline_speed_test_oo","tags":"","loc":"sourcefile/speed_test_oo.f90.html","title":"speed_test_oo.f90 â€“ bspline-fortran"},{"text":"This File Depends On sourcefile~~bspline_extrap_test.f90~~EfferentGraph sourcefile~bspline_extrap_test.f90 bspline_extrap_test.f90 sourcefile~bspline_module.f90 bspline_module.f90 sourcefile~bspline_module.f90->sourcefile~bspline_extrap_test.f90 sourcefile~bspline_oo_module.f90 bspline_oo_module.f90 sourcefile~bspline_oo_module.f90->sourcefile~bspline_module.f90 sourcefile~bspline_sub_module.f90 bspline_sub_module.f90 sourcefile~bspline_sub_module.f90->sourcefile~bspline_module.f90 sourcefile~bspline_sub_module.f90->sourcefile~bspline_oo_module.f90 Help Ã— Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which depends upon it. A file \n    is dependent upon another if the latter must be compiled before the former\n    can be. Programs bspline_extrap_test Source Code bspline_extrap_test.f90 Source Code !***************************************************************************************** !> !  Extrapolation test ! !### Results !  ![Plot of results](https://raw.githubusercontent.com/jacobwilliams/bspline-fortran/master/src/tests/bspline_extrap_test.png) program bspline_extrap_test use bspline_module use , intrinsic :: iso_fortran_env , only : wp => real64 use pyplot_module implicit none integer , parameter :: nx = 400 !! number of points in x integer , parameter :: nxv = 800 !! number of points to evaluate interpolant integer , parameter :: kx = 4 !! order in x integer , parameter :: iknot = 0 !! automatically select the knots real ( wp ) :: x ( nx ) real ( wp ) :: xval ( nxv ), fval ( nxv ) real ( wp ) :: tx ( nx + kx ) real ( wp ) :: fcn_1d ( nx ) real ( wp ) :: val , tru , err , errmax integer :: i , j , idx , iflag , inbvx , iloy logical :: extrap type ( pyplot ) :: plt integer :: istat !! pyplot-fortran status flag real ( wp ), parameter :: rad2deg = 18 0.0_wp / acos ( - 1.0_wp ) !! deg. to radians conversion factor idx = 0 do i = 1 , nx x ( i ) = real ( i - 1 , wp ) / 10 0.0_wp + 0.0001_wp fcn_1d ( i ) = f1 ( x ( i )) end do do i = 1 , nxv xval ( i ) = real ( i - 200 , wp ) / 10 0.0_wp end do !have to set these before the first evaluate call: inbvx = 1 iloy = 1 ! initialize call db1ink ( x , nx , fcn_1d , kx , iknot , tx , fcn_1d , iflag ) if ( iflag /= 0 ) then write ( * , * ) 'Error initializing 1D spline: ' // get_status_message ( iflag ) end if !initialize the plot: call plt % initialize ( grid = . true ., xlabel = 'x (deg)' , ylabel = 'f(x)' ,& title = 'Extrapolation Test' , legend = . true .) call plt % add_plot ( x * rad2deg , fcn_1d , label = 'Function $f(x) = \\sin(x)$' ,& linestyle = 'ko' , markersize = 5 , linewidth = 2 , istat = istat ) do j = 1 , 2 ! run once without extrapolation, and once with extrapolation extrap = j == 2 errmax = 0.0_wp do i = 1 , nxv call db1val ( xval ( i ), idx , tx , nx , kx , fcn_1d , val , iflag , inbvx , extrap = extrap ) fval ( i ) = val ! save it for plot tru = f1 ( xval ( i )) err = abs ( tru - val ) errmax = max ( err , errmax ) !write(*,*) xval(i), val, tru, err, iflag end do ! check max error against tolerance write ( * , * ) '' write ( * , * ) '1D: max error:' , errmax write ( * , * ) '' if ( extrap ) then call plt % add_plot ( xval * rad2deg , fval ,& label = 'Interpolated' ,& linestyle = 'g.-' , linewidth = 1 , istat = istat ) call plt % savefig ( 'bspline_extrap_test.png' , istat = istat ) end if end do contains real ( wp ) function f1 ( x ) !! 1d test function implicit none real ( wp ) :: x f1 = sin ( x ) end function f1 end program bspline_extrap_test","tags":"","loc":"sourcefile/bspline_extrap_test.f90.html","title":"bspline_extrap_test.f90 â€“ bspline-fortran"},{"text":"type, public, abstract :: bspline_class Base class for the b-spline types Inherited By type~~bspline_class~~InheritedByGraph type~bspline_class bspline_class type~bspline_2d bspline_2d type~bspline_class->type~bspline_2d type~bspline_5d bspline_5d type~bspline_class->type~bspline_5d type~bspline_4d bspline_4d type~bspline_class->type~bspline_4d type~bspline_3d bspline_3d type~bspline_class->type~bspline_3d type~bspline_1d bspline_1d type~bspline_class->type~bspline_1d type~bspline_6d bspline_6d type~bspline_class->type~bspline_6d Help Ã— Graph Key Nodes of different colours represent the following: Graph Key Type Type This Page's Entity This Page's Entity Solid arrows point from one derived type to another which extends\n    (inherits from) it. Dashed arrows point from a derived type to another\n    type containing it as a components, with a label listing the name(s) of\n    said component(s). Type-Bound Procedures destroy size_of status_ok status_message clear_flag Source Code bspline_class Type-Bound Procedures procedure(destroy_func), public, deferred :: destroy destructor pure subroutine destroy_func (me) Prototype interface for bspline destructor routines Arguments Type Intent Optional Attributes Name class( bspline_class ), intent(inout) :: me procedure(size_func), public, deferred :: size_of size of the structure in bits pure function size_func (me) result(s) Prototype interface for size routines Arguments Type Intent Optional Attributes Name class( bspline_class ), intent(in) :: me Return Value integer size of the structure in bits procedure, public, non_overridable :: status_ok returns true if the last iflag status code was =0 . private elemental function status_ok(me) result(ok) This routines returns true if the iflag code from the last\n  routine called was =0 . Maybe of the routines have output iflag variables, so they can be checked explicitly, or this routine\n  can be used. Arguments Type Intent Optional Attributes Name class( bspline_class ), intent(in) :: me Return Value logical procedure, public, non_overridable :: status_message => get_bspline_status_message retrieve the last status message private pure function get_bspline_status_message(me, iflag) result(msg) Get the status message from a bspline_class routine call. Arguments Type Intent Optional Attributes Name class( bspline_class ), intent(in) :: me integer, intent(in), optional :: iflag the corresponding status code Return Value character(len=:),\n  allocatable status message associated with the flag procedure, public, non_overridable :: clear_flag => clear_bspline_flag to reset the iflag saved in the class. private elemental subroutine clear_bspline_flag(me) This sets the iflag variable in the class to 0 (which indicates that everything is OK). It can be used\n  after an error is encountered. Arguments Type Intent Optional Attributes Name class( bspline_class ), intent(inout) :: me Source Code type , public , abstract :: bspline_class !! Base class for the b-spline types private integer :: inbvx = 1 !! internal variable used by [[dbvalu]] for efficient processing integer :: iflag = 1 !! saved `iflag` from the list routine call. logical :: initialized = . false . !! true if the class is initialized and ready to use logical :: extrap = . false . !! if true, then extrapolation is allowed during evaluation contains private procedure , non_overridable :: destroy_base !! destructor for the abstract type procedure , non_overridable :: set_extrap_flag !! internal routine to set the `extrap` flag procedure ( destroy_func ), deferred , public :: destroy !! destructor procedure ( size_func ), deferred , public :: size_of !! size of the structure in bits procedure , public , non_overridable :: status_ok !! returns true if the last `iflag` status code was `=0`. procedure , public , non_overridable :: status_message => get_bspline_status_message !! retrieve the last status message procedure , public , non_overridable :: clear_flag => clear_bspline_flag !! to reset the `iflag` saved in the class. end type bspline_class","tags":"","loc":"type/bspline_class.html","title":"bspline_class â€“ bspline-fortran "},{"text":"type, public, extends( bspline_class ) :: bspline_1d type~~bspline_1d~~InheritsGraph type~bspline_1d bspline_1d type~bspline_class bspline_class type~bspline_class->type~bspline_1d Help Ã— Graph Key Nodes of different colours represent the following: Graph Key Type Type This Page's Entity This Page's Entity Solid arrows point from one derived type to another which extends\n    (inherits from) it. Dashed arrows point from a derived type to another\n    type containing it as a components, with a label listing the name(s) of\n    said component(s). Class for 1d b-spline interpolation. Constructor bspline_1d Finalization Procedures finalize_1d Type-Bound Procedures status_ok status_message clear_flag initialize evaluate destroy size_of integral fintegral Source Code bspline_1d Constructor public interface bspline_1d Constructor for bspline_1d private pure elemental function bspline_1d_constructor_empty() result(me) It returns an empty [[bspline_1d]] type. Note that INITIALIZE still\n  needs to be called before it can be used.\n  Not really that useful except perhaps in some OpenMP applications. Arguments None Return Value type( bspline_1d ) private pure function bspline_1d_constructor_auto_knots(x, fcn, kx, extrap) result(me) Constructor for a [[bspline_1d]] type (auto knots).\n  This is a wrapper for [[initialize_1d_auto_knots]]. Arguments Type Intent Optional Attributes Name real(kind=wp), intent(in), dimension(:) :: x (nx) array of x abcissae. Must be strictly increasing. real(kind=wp), intent(in), dimension(:) :: fcn (nx) array of function values to interpolate. fcn(i) should\n contain the function value at the point x(i) integer, intent(in) :: kx The order of spline pieces in x\n (  2 \\le k_x < n_x  )\n (order = polynomial degree + 1) logical, intent(in), optional :: extrap if true, then extrapolation is allowed\n (default is false) Return Value type( bspline_1d ) private pure function bspline_1d_constructor_specify_knots(x, fcn, kx, tx, extrap) result(me) Constructor for a [[bspline_1d]] type (user-specified knots).\n  This is a wrapper for [[initialize_1d_specify_knots]]. Arguments Type Intent Optional Attributes Name real(kind=wp), intent(in), dimension(:) :: x (nx) array of x abcissae. Must be strictly increasing. real(kind=wp), intent(in), dimension(:) :: fcn (nx) array of function values to interpolate. fcn(i) should\n contain the function value at the point x(i) integer, intent(in) :: kx The order of spline pieces in x\n (  2 \\le k_x < n_x  )\n (order = polynomial degree + 1) real(kind=wp), intent(in), dimension(:) :: tx The (nx+kx) knots in the x direction\n for the spline interpolant.\n Must be non-decreasing. logical, intent(in), optional :: extrap if true, then extrapolation is allowed\n (default is false) Return Value type( bspline_1d ) Finalization Procedures final :: finalize_1d private pure elemental subroutine finalize_1d(me) Finalizer for [[bspline_1d]] class. Just a wrapper for [[destroy_1d]]. Arguments Type Intent Optional Attributes Name type( bspline_1d ), intent(inout) :: me Type-Bound Procedures procedure, public, non_overridable :: status_ok returns true if the last iflag status code was =0 . private elemental function status_ok(me) result(ok) This routines returns true if the iflag code from the last\n  routine called was =0 . Maybe of the routines have output iflag variables, so they can be checked explicitly, or this routine\n  can be used. Arguments Type Intent Optional Attributes Name class( bspline_class ), intent(in) :: me Return Value logical procedure, public, non_overridable :: status_message => get_bspline_status_message retrieve the last status message private pure function get_bspline_status_message(me, iflag) result(msg) Get the status message from a bspline_class routine call. Arguments Type Intent Optional Attributes Name class( bspline_class ), intent(in) :: me integer, intent(in), optional :: iflag the corresponding status code Return Value character(len=:),\n  allocatable status message associated with the flag procedure, public, non_overridable :: clear_flag => clear_bspline_flag to reset the iflag saved in the class. private elemental subroutine clear_bspline_flag(me) This sets the iflag variable in the class to 0 (which indicates that everything is OK). It can be used\n  after an error is encountered. Arguments Type Intent Optional Attributes Name class( bspline_class ), intent(inout) :: me generic, public :: initialize => initialize_1d_auto_knots, initialize_1d_specify_knots private pure subroutine initialize_1d_auto_knots(me, x, fcn, kx, iflag, extrap) Initialize a bspline_1d type (with automatically-computed knots).\n  This is a wrapper for db1ink . Arguments Type Intent Optional Attributes Name class( bspline_1d ), intent(inout) :: me real(kind=wp), intent(in), dimension(:) :: x (nx) array of x abcissae. Must be strictly increasing. real(kind=wp), intent(in), dimension(:) :: fcn (nx) array of function values to interpolate. fcn(i) should\n contain the function value at the point x(i) integer, intent(in) :: kx The order of spline pieces in x\n (  2 \\le k_x < n_x  )\n (order = polynomial degree + 1) integer, intent(out) :: iflag status flag (see db1ink ) logical, intent(in), optional :: extrap if true, then extrapolation is allowed\n (default is false) private pure subroutine initialize_1d_specify_knots(me, x, fcn, kx, tx, iflag, extrap) Initialize a bspline_1d type (with user-specified knots).\n  This is a wrapper for db1ink . Arguments Type Intent Optional Attributes Name class( bspline_1d ), intent(inout) :: me real(kind=wp), intent(in), dimension(:) :: x (nx) array of x abcissae. Must be strictly increasing. real(kind=wp), intent(in), dimension(:) :: fcn (nx) array of function values to interpolate. fcn(i) should\n contain the function value at the point x(i) integer, intent(in) :: kx The order of spline pieces in x\n (  2 \\le k_x < n_x  )\n (order = polynomial degree + 1) real(kind=wp), intent(in), dimension(:) :: tx The (nx+kx) knots in the x direction\n for the spline interpolant.\n Must be non-decreasing. integer, intent(out) :: iflag status flag (see db1ink ) logical, intent(in), optional :: extrap if true, then extrapolation is allowed\n (default is false) procedure, public :: evaluate => evaluate_1d private pure subroutine evaluate_1d(me, xval, idx, f, iflag) Evaluate a bspline_1d interpolate.  This is a wrapper for db1val . Arguments Type Intent Optional Attributes Name class( bspline_1d ), intent(inout) :: me real(kind=wp), intent(in) :: xval x coordinate of evaluation point. integer, intent(in) :: idx x derivative of piecewise polynomial to evaluate. real(kind=wp), intent(out) :: f interpolated value integer, intent(out) :: iflag status flag (see db1val ) procedure, public :: destroy => destroy_1d private pure subroutine destroy_1d(me) Destructor for bspline_1d class. Arguments Type Intent Optional Attributes Name class( bspline_1d ), intent(inout) :: me procedure, public :: size_of => size_1d private pure function size_1d(me) result(s) Actual size of a bspline_1d structure in bits. Arguments Type Intent Optional Attributes Name class( bspline_1d ), intent(in) :: me Return Value integer size of the structure in bits procedure, public :: integral => integral_1d private pure subroutine integral_1d(me, x1, x2, f, iflag) Evaluate a bspline_1d definite integral.  This is a wrapper for db1sqad . Arguments Type Intent Optional Attributes Name class( bspline_1d ), intent(inout) :: me real(kind=wp), intent(in) :: x1 left point of interval real(kind=wp), intent(in) :: x2 right point of interval real(kind=wp), intent(out) :: f integral of the b-spline over  [x_1, x_2]  integer, intent(out) :: iflag status flag (see db1sqad ) procedure, public :: fintegral => fintegral_1d private subroutine fintegral_1d(me, fun, idx, x1, x2, tol, f, iflag) Evaluate a bspline_1d definite integral.  This is a wrapper for db1fqad . Arguments Type Intent Optional Attributes Name class( bspline_1d ), intent(inout) :: me procedure( b1fqad_func ) :: fun external function of one argument for the\n integrand bf(x)=fun(x)*dbvalu(tx,bcoef,nx,kx,idx,x,inbv) integer, intent(in) :: idx order of the spline derivative, 0 <= idx <= k-1 idx=0 gives the spline function real(kind=wp), intent(in) :: x1 left point of interval real(kind=wp), intent(in) :: x2 right point of interval real(kind=wp), intent(in) :: tol desired accuracy for the quadrature real(kind=wp), intent(out) :: f integral of bf(x) over  [x_1, x_2]  integer, intent(out) :: iflag status flag (see db1sqad ) Source Code type , extends ( bspline_class ), public :: bspline_1d !! Class for 1d b-spline interpolation. private integer :: nx = 0 !! Number of x abcissae integer :: kx = 0 !! The order of spline pieces in x real ( wp ), dimension (:), allocatable :: bcoef !! array of coefficients of the b-spline interpolant real ( wp ), dimension (:), allocatable :: tx !! The knots in the x direction for the spline interpolant contains private generic , public :: initialize => initialize_1d_auto_knots , initialize_1d_specify_knots procedure :: initialize_1d_auto_knots procedure :: initialize_1d_specify_knots procedure , public :: evaluate => evaluate_1d procedure , public :: destroy => destroy_1d procedure , public :: size_of => size_1d procedure , public :: integral => integral_1d procedure , public :: fintegral => fintegral_1d final :: finalize_1d end type bspline_1d","tags":"","loc":"type/bspline_1d.html","title":"bspline_1d â€“ bspline-fortran "},{"text":"type, public, extends( bspline_class ) :: bspline_2d type~~bspline_2d~~InheritsGraph type~bspline_2d bspline_2d type~bspline_class bspline_class type~bspline_class->type~bspline_2d Help Ã— Graph Key Nodes of different colours represent the following: Graph Key Type Type This Page's Entity This Page's Entity Solid arrows point from one derived type to another which extends\n    (inherits from) it. Dashed arrows point from a derived type to another\n    type containing it as a components, with a label listing the name(s) of\n    said component(s). Class for 2d b-spline interpolation. Constructor bspline_2d Finalization Procedures finalize_2d Type-Bound Procedures status_ok status_message clear_flag initialize evaluate destroy size_of Source Code bspline_2d Constructor public interface bspline_2d Constructor for bspline_2d private elemental function bspline_2d_constructor_empty() result(me) It returns an empty [[bspline_2d]] type. Note that INITIALIZE still\n  needs to be called before it can be used.\n  Not really that useful except perhaps in some OpenMP applications. Arguments None Return Value type( bspline_2d ) private pure function bspline_2d_constructor_auto_knots(x, y, fcn, kx, ky, extrap) result(me) Constructor for a [[bspline_2d]] type (auto knots).\n  This is a wrapper for [[initialize_2d_auto_knots]]. Arguments Type Intent Optional Attributes Name real(kind=wp), intent(in), dimension(:) :: x (nx) array of x abcissae. Must be strictly increasing. real(kind=wp), intent(in), dimension(:) :: y (ny) array of y abcissae. Must be strictly increasing. real(kind=wp), intent(in), dimension(:,:) :: fcn (nx,ny) matrix of function values to interpolate. fcn(i,j) should contain the function value at the\n point ( x(i) , y(j) ) integer, intent(in) :: kx The order of spline pieces in x\n (  2 \\le k_x < n_x  )\n (order = polynomial degree + 1) integer, intent(in) :: ky The order of spline pieces in y\n (  2 \\le k_y < n_y  )\n (order = polynomial degree + 1) logical, intent(in), optional :: extrap if true, then extrapolation is allowed\n (default is false) Return Value type( bspline_2d ) private pure function bspline_2d_constructor_specify_knots(x, y, fcn, kx, ky, tx, ty, extrap) result(me) Constructor for a [[bspline_2d]] type (user-specified knots).\n  This is a wrapper for [[initialize_2d_specify_knots]]. Arguments Type Intent Optional Attributes Name real(kind=wp), intent(in), dimension(:) :: x (nx) array of x abcissae. Must be strictly increasing. real(kind=wp), intent(in), dimension(:) :: y (ny) array of y abcissae. Must be strictly increasing. real(kind=wp), intent(in), dimension(:,:) :: fcn (nx,ny) matrix of function values to interpolate. fcn(i,j) should contain the function value at the\n point ( x(i) , y(j) ) integer, intent(in) :: kx The order of spline pieces in x\n (  2 \\le k_x < n_x  )\n (order = polynomial degree + 1) integer, intent(in) :: ky The order of spline pieces in y\n (  2 \\le k_y < n_y  )\n (order = polynomial degree + 1) real(kind=wp), intent(in), dimension(:) :: tx The (nx+kx) knots in the x direction\n for the spline interpolant.\n Must be non-decreasing. real(kind=wp), intent(in), dimension(:) :: ty The (ny+ky) knots in the y direction\n for the spline interpolant.\n Must be non-decreasing. logical, intent(in), optional :: extrap if true, then extrapolation is allowed\n (default is false) Return Value type( bspline_2d ) Finalization Procedures final :: finalize_2d private pure elemental subroutine finalize_2d(me) Finalizer for [[bspline_2d]] class. Just a wrapper for [[destroy_2d]]. Arguments Type Intent Optional Attributes Name type( bspline_2d ), intent(inout) :: me Type-Bound Procedures procedure, public, non_overridable :: status_ok returns true if the last iflag status code was =0 . private elemental function status_ok(me) result(ok) This routines returns true if the iflag code from the last\n  routine called was =0 . Maybe of the routines have output iflag variables, so they can be checked explicitly, or this routine\n  can be used. Arguments Type Intent Optional Attributes Name class( bspline_class ), intent(in) :: me Return Value logical procedure, public, non_overridable :: status_message => get_bspline_status_message retrieve the last status message private pure function get_bspline_status_message(me, iflag) result(msg) Get the status message from a bspline_class routine call. Arguments Type Intent Optional Attributes Name class( bspline_class ), intent(in) :: me integer, intent(in), optional :: iflag the corresponding status code Return Value character(len=:),\n  allocatable status message associated with the flag procedure, public, non_overridable :: clear_flag => clear_bspline_flag to reset the iflag saved in the class. private elemental subroutine clear_bspline_flag(me) This sets the iflag variable in the class to 0 (which indicates that everything is OK). It can be used\n  after an error is encountered. Arguments Type Intent Optional Attributes Name class( bspline_class ), intent(inout) :: me generic, public :: initialize => initialize_2d_auto_knots, initialize_2d_specify_knots private pure subroutine initialize_2d_auto_knots(me, x, y, fcn, kx, ky, iflag, extrap) Initialize a bspline_2d type (with automatically-computed knots).\n  This is a wrapper for db2ink . Arguments Type Intent Optional Attributes Name class( bspline_2d ), intent(inout) :: me real(kind=wp), intent(in), dimension(:) :: x (nx) array of x abcissae. Must be strictly increasing. real(kind=wp), intent(in), dimension(:) :: y (ny) array of y abcissae. Must be strictly increasing. real(kind=wp), intent(in), dimension(:,:) :: fcn (nx,ny) matrix of function values to interpolate. fcn(i,j) should contain the function value at the\n point ( x(i) , y(j) ) integer, intent(in) :: kx The order of spline pieces in x\n (  2 \\le k_x < n_x  )\n (order = polynomial degree + 1) integer, intent(in) :: ky The order of spline pieces in y\n (  2 \\le k_y < n_y  )\n (order = polynomial degree + 1) integer, intent(out) :: iflag status flag (see db2ink ) logical, intent(in), optional :: extrap if true, then extrapolation is allowed\n (default is false) private pure subroutine initialize_2d_specify_knots(me, x, y, fcn, kx, ky, tx, ty, iflag, extrap) Initialize a bspline_2d type (with user-specified knots).\n  This is a wrapper for db2ink . Arguments Type Intent Optional Attributes Name class( bspline_2d ), intent(inout) :: me real(kind=wp), intent(in), dimension(:) :: x (nx) array of x abcissae. Must be strictly increasing. real(kind=wp), intent(in), dimension(:) :: y (ny) array of y abcissae. Must be strictly increasing. real(kind=wp), intent(in), dimension(:,:) :: fcn (nx,ny) matrix of function values to interpolate. fcn(i,j) should contain the function value at the\n point ( x(i) , y(j) ) integer, intent(in) :: kx The order of spline pieces in x\n (  2 \\le k_x < n_x  )\n (order = polynomial degree + 1) integer, intent(in) :: ky The order of spline pieces in y\n (  2 \\le k_y < n_y  )\n (order = polynomial degree + 1) real(kind=wp), intent(in), dimension(:) :: tx The (nx+kx) knots in the x direction\n for the spline interpolant.\n Must be non-decreasing. real(kind=wp), intent(in), dimension(:) :: ty The (ny+ky) knots in the y direction\n for the spline interpolant.\n Must be non-decreasing. integer, intent(out) :: iflag status flag (see db2ink ) logical, intent(in), optional :: extrap if true, then extrapolation is allowed\n (default is false) procedure, public :: evaluate => evaluate_2d private pure subroutine evaluate_2d(me, xval, yval, idx, idy, f, iflag) Evaluate a bspline_2d interpolate.  This is a wrapper for db2val . Arguments Type Intent Optional Attributes Name class( bspline_2d ), intent(inout) :: me real(kind=wp), intent(in) :: xval x coordinate of evaluation point. real(kind=wp), intent(in) :: yval y coordinate of evaluation point. integer, intent(in) :: idx x derivative of piecewise polynomial to evaluate. integer, intent(in) :: idy y derivative of piecewise polynomial to evaluate. real(kind=wp), intent(out) :: f interpolated value integer, intent(out) :: iflag status flag (see db2val ) procedure, public :: destroy => destroy_2d private pure subroutine destroy_2d(me) Destructor for bspline_2d class. Arguments Type Intent Optional Attributes Name class( bspline_2d ), intent(inout) :: me procedure, public :: size_of => size_2d private pure function size_2d(me) result(s) Actual size of a bspline_2d structure in bits. Arguments Type Intent Optional Attributes Name class( bspline_2d ), intent(in) :: me Return Value integer size of the structure in bits Source Code type , extends ( bspline_class ), public :: bspline_2d !! Class for 2d b-spline interpolation. private integer :: nx = 0 !! Number of x abcissae integer :: ny = 0 !! Number of y abcissae integer :: kx = 0 !! The order of spline pieces in x integer :: ky = 0 !! The order of spline pieces in y real ( wp ), dimension (:,:), allocatable :: bcoef !! array of coefficients of the b-spline interpolant real ( wp ), dimension (:), allocatable :: tx !! The knots in the x direction for the spline interpolant real ( wp ), dimension (:), allocatable :: ty !! The knots in the y direction for the spline interpolant integer :: inbvy = 1 !! internal variable used for efficient processing integer :: iloy = 1 !! internal variable used for efficient processing contains private generic , public :: initialize => initialize_2d_auto_knots , initialize_2d_specify_knots procedure :: initialize_2d_auto_knots procedure :: initialize_2d_specify_knots procedure , public :: evaluate => evaluate_2d procedure , public :: destroy => destroy_2d procedure , public :: size_of => size_2d final :: finalize_2d end type bspline_2d","tags":"","loc":"type/bspline_2d.html","title":"bspline_2d â€“ bspline-fortran "},{"text":"type, public, extends( bspline_class ) :: bspline_3d type~~bspline_3d~~InheritsGraph type~bspline_3d bspline_3d type~bspline_class bspline_class type~bspline_class->type~bspline_3d Help Ã— Graph Key Nodes of different colours represent the following: Graph Key Type Type This Page's Entity This Page's Entity Solid arrows point from one derived type to another which extends\n    (inherits from) it. Dashed arrows point from a derived type to another\n    type containing it as a components, with a label listing the name(s) of\n    said component(s). Class for 3d b-spline interpolation. Constructor bspline_3d Finalization Procedures finalize_3d Type-Bound Procedures status_ok status_message clear_flag initialize evaluate destroy size_of Source Code bspline_3d Constructor public interface bspline_3d Constructor for bspline_3d private elemental function bspline_3d_constructor_empty() result(me) It returns an empty [[bspline_3d]] type. Note that INITIALIZE still\n  needs to be called before it can be used.\n  Not really that useful except perhaps in some OpenMP applications. Arguments None Return Value type( bspline_3d ) private pure function bspline_3d_constructor_auto_knots(x, y, z, fcn, kx, ky, kz, extrap) result(me) Constructor for a [[bspline_3d]] type (auto knots).\n  This is a wrapper for [[initialize_3d_auto_knots]]. Arguments Type Intent Optional Attributes Name real(kind=wp), intent(in), dimension(:) :: x (nx) array of x abcissae. Must be strictly increasing. real(kind=wp), intent(in), dimension(:) :: y (ny) array of y abcissae. Must be strictly increasing. real(kind=wp), intent(in), dimension(:) :: z (nz) array of z abcissae. Must be strictly increasing. real(kind=wp), intent(in), dimension(:,:,:) :: fcn (nx,ny,nz) matrix of function values to interpolate. fcn(i,j,k) should contain the function value at the\n point ( x(i) , y(j) , z(k) ) integer, intent(in) :: kx The order of spline pieces in x\n (  2 \\le k_x < n_x  )\n (order = polynomial degree + 1) integer, intent(in) :: ky The order of spline pieces in y\n (  2 \\le k_y < n_y  )\n (order = polynomial degree + 1) integer, intent(in) :: kz The order of spline pieces in z\n (  2 \\le k_z < n_z  )\n (order = polynomial degree + 1) logical, intent(in), optional :: extrap if true, then extrapolation is allowed\n (default is false) Return Value type( bspline_3d ) private pure function bspline_3d_constructor_specify_knots(x, y, z, fcn, kx, ky, kz, tx, ty, tz, extrap) result(me) Constructor for a [[bspline_3d]] type (user-specified knots).\n  This is a wrapper for [[initialize_3d_specify_knots]]. Arguments Type Intent Optional Attributes Name real(kind=wp), intent(in), dimension(:) :: x (nx) array of x abcissae. Must be strictly increasing. real(kind=wp), intent(in), dimension(:) :: y (ny) array of y abcissae. Must be strictly increasing. real(kind=wp), intent(in), dimension(:) :: z (nz) array of z abcissae. Must be strictly increasing. real(kind=wp), intent(in), dimension(:,:,:) :: fcn (nx,ny,nz) matrix of function values to interpolate. fcn(i,j,k) should contain the function value at the\n point ( x(i) , y(j) , z(k) ) integer, intent(in) :: kx The order of spline pieces in x\n (  2 \\le k_x < n_x  )\n (order = polynomial degree + 1) integer, intent(in) :: ky The order of spline pieces in y\n (  2 \\le k_y < n_y  )\n (order = polynomial degree + 1) integer, intent(in) :: kz The order of spline pieces in z\n (  2 \\le k_z < n_z  )\n (order = polynomial degree + 1) real(kind=wp), intent(in), dimension(:) :: tx The (nx+kx) knots in the x direction\n for the spline interpolant.\n Must be non-decreasing. real(kind=wp), intent(in), dimension(:) :: ty The (ny+ky) knots in the y direction\n for the spline interpolant.\n Must be non-decreasing. real(kind=wp), intent(in), dimension(:) :: tz The (nz+kz) knots in the z direction\n for the spline interpolant.\n Must be non-decreasing. logical, intent(in), optional :: extrap if true, then extrapolation is allowed\n (default is false) Return Value type( bspline_3d ) Finalization Procedures final :: finalize_3d private pure elemental subroutine finalize_3d(me) Finalizer for [[bspline_3d]] class. Just a wrapper for [[destroy_3d]]. Arguments Type Intent Optional Attributes Name type( bspline_3d ), intent(inout) :: me Type-Bound Procedures procedure, public, non_overridable :: status_ok returns true if the last iflag status code was =0 . private elemental function status_ok(me) result(ok) This routines returns true if the iflag code from the last\n  routine called was =0 . Maybe of the routines have output iflag variables, so they can be checked explicitly, or this routine\n  can be used. Arguments Type Intent Optional Attributes Name class( bspline_class ), intent(in) :: me Return Value logical procedure, public, non_overridable :: status_message => get_bspline_status_message retrieve the last status message private pure function get_bspline_status_message(me, iflag) result(msg) Get the status message from a bspline_class routine call. Arguments Type Intent Optional Attributes Name class( bspline_class ), intent(in) :: me integer, intent(in), optional :: iflag the corresponding status code Return Value character(len=:),\n  allocatable status message associated with the flag procedure, public, non_overridable :: clear_flag => clear_bspline_flag to reset the iflag saved in the class. private elemental subroutine clear_bspline_flag(me) This sets the iflag variable in the class to 0 (which indicates that everything is OK). It can be used\n  after an error is encountered. Arguments Type Intent Optional Attributes Name class( bspline_class ), intent(inout) :: me generic, public :: initialize => initialize_3d_auto_knots, initialize_3d_specify_knots private pure subroutine initialize_3d_auto_knots(me, x, y, z, fcn, kx, ky, kz, iflag, extrap) Initialize a bspline_3d type (with automatically-computed knots).\n  This is a wrapper for db3ink . Arguments Type Intent Optional Attributes Name class( bspline_3d ), intent(inout) :: me real(kind=wp), intent(in), dimension(:) :: x (nx) array of x abcissae. Must be strictly increasing. real(kind=wp), intent(in), dimension(:) :: y (ny) array of y abcissae. Must be strictly increasing. real(kind=wp), intent(in), dimension(:) :: z (nz) array of z abcissae. Must be strictly increasing. real(kind=wp), intent(in), dimension(:,:,:) :: fcn (nx,ny,nz) matrix of function values to interpolate. fcn(i,j,k) should contain the function value at the\n point ( x(i) , y(j) , z(k) ) integer, intent(in) :: kx The order of spline pieces in x\n (  2 \\le k_x < n_x  )\n (order = polynomial degree + 1) integer, intent(in) :: ky The order of spline pieces in y\n (  2 \\le k_y < n_y  )\n (order = polynomial degree + 1) integer, intent(in) :: kz The order of spline pieces in z\n (  2 \\le k_z < n_z  )\n (order = polynomial degree + 1) integer, intent(out) :: iflag status flag (see db3ink ) logical, intent(in), optional :: extrap if true, then extrapolation is allowed\n (default is false) private pure subroutine initialize_3d_specify_knots(me, x, y, z, fcn, kx, ky, kz, tx, ty, tz, iflag, extrap) Initialize a bspline_3d type (with user-specified knots).\n  This is a wrapper for db3ink . Arguments Type Intent Optional Attributes Name class( bspline_3d ), intent(inout) :: me real(kind=wp), intent(in), dimension(:) :: x (nx) array of x abcissae. Must be strictly increasing. real(kind=wp), intent(in), dimension(:) :: y (ny) array of y abcissae. Must be strictly increasing. real(kind=wp), intent(in), dimension(:) :: z (nz) array of z abcissae. Must be strictly increasing. real(kind=wp), intent(in), dimension(:,:,:) :: fcn (nx,ny,nz) matrix of function values to interpolate. fcn(i,j,k) should contain the function value at the\n point ( x(i) , y(j) , z(k) ) integer, intent(in) :: kx The order of spline pieces in x\n (  2 \\le k_x < n_x  )\n (order = polynomial degree + 1) integer, intent(in) :: ky The order of spline pieces in y\n (  2 \\le k_y < n_y  )\n (order = polynomial degree + 1) integer, intent(in) :: kz The order of spline pieces in z\n (  2 \\le k_z < n_z  )\n (order = polynomial degree + 1) real(kind=wp), intent(in), dimension(:) :: tx The (nx+kx) knots in the x direction\n for the spline interpolant.\n Must be non-decreasing. real(kind=wp), intent(in), dimension(:) :: ty The (ny+ky) knots in the y direction\n for the spline interpolant.\n Must be non-decreasing. real(kind=wp), intent(in), dimension(:) :: tz The (nz+kz) knots in the z direction\n for the spline interpolant.\n Must be non-decreasing. integer, intent(out) :: iflag status flag (see db3ink ) logical, intent(in), optional :: extrap if true, then extrapolation is allowed\n (default is false) procedure, public :: evaluate => evaluate_3d private pure subroutine evaluate_3d(me, xval, yval, zval, idx, idy, idz, f, iflag) Evaluate a bspline_3d interpolate.  This is a wrapper for db3val . Arguments Type Intent Optional Attributes Name class( bspline_3d ), intent(inout) :: me real(kind=wp), intent(in) :: xval x coordinate of evaluation point. real(kind=wp), intent(in) :: yval y coordinate of evaluation point. real(kind=wp), intent(in) :: zval z coordinate of evaluation point. integer, intent(in) :: idx x derivative of piecewise polynomial to evaluate. integer, intent(in) :: idy y derivative of piecewise polynomial to evaluate. integer, intent(in) :: idz z derivative of piecewise polynomial to evaluate. real(kind=wp), intent(out) :: f interpolated value integer, intent(out) :: iflag status flag (see db3val ) procedure, public :: destroy => destroy_3d private pure subroutine destroy_3d(me) Destructor for bspline_3d class. Arguments Type Intent Optional Attributes Name class( bspline_3d ), intent(inout) :: me procedure, public :: size_of => size_3d private pure function size_3d(me) result(s) Actual size of a bspline_3d structure in bits. Arguments Type Intent Optional Attributes Name class( bspline_3d ), intent(in) :: me Return Value integer size of the structure in bits Source Code type , extends ( bspline_class ), public :: bspline_3d !! Class for 3d b-spline interpolation. private integer :: nx = 0 !! Number of x abcissae integer :: ny = 0 !! Number of y abcissae integer :: nz = 0 !! Number of z abcissae integer :: kx = 0 !! The order of spline pieces in x integer :: ky = 0 !! The order of spline pieces in y integer :: kz = 0 !! The order of spline pieces in z real ( wp ), dimension (:,:,:), allocatable :: bcoef !! array of coefficients of the b-spline interpolant real ( wp ), dimension (:), allocatable :: tx !! The knots in the x direction for the spline interpolant real ( wp ), dimension (:), allocatable :: ty !! The knots in the y direction for the spline interpolant real ( wp ), dimension (:), allocatable :: tz !! The knots in the z direction for the spline interpolant integer :: inbvy = 1 !! internal variable used for efficient processing integer :: inbvz = 1 !! internal variable used for efficient processing integer :: iloy = 1 !! internal variable used for efficient processing integer :: iloz = 1 !! internal variable used for efficient processing contains private generic , public :: initialize => initialize_3d_auto_knots , initialize_3d_specify_knots procedure :: initialize_3d_auto_knots procedure :: initialize_3d_specify_knots procedure , public :: evaluate => evaluate_3d procedure , public :: destroy => destroy_3d procedure , public :: size_of => size_3d final :: finalize_3d end type bspline_3d","tags":"","loc":"type/bspline_3d.html","title":"bspline_3d â€“ bspline-fortran "},{"text":"type, public, extends( bspline_class ) :: bspline_4d type~~bspline_4d~~InheritsGraph type~bspline_4d bspline_4d type~bspline_class bspline_class type~bspline_class->type~bspline_4d Help Ã— Graph Key Nodes of different colours represent the following: Graph Key Type Type This Page's Entity This Page's Entity Solid arrows point from one derived type to another which extends\n    (inherits from) it. Dashed arrows point from a derived type to another\n    type containing it as a components, with a label listing the name(s) of\n    said component(s). Class for 4d b-spline interpolation. Constructor bspline_4d Finalization Procedures finalize_4d Type-Bound Procedures status_ok status_message clear_flag initialize evaluate destroy size_of Source Code bspline_4d Constructor public interface bspline_4d Constructor for bspline_4d private elemental function bspline_4d_constructor_empty() result(me) It returns an empty [[bspline_4d]] type. Note that INITIALIZE still\n  needs to be called before it can be used.\n  Not really that useful except perhaps in some OpenMP applications. Arguments None Return Value type( bspline_4d ) private pure function bspline_4d_constructor_auto_knots(x, y, z, q, fcn, kx, ky, kz, kq, extrap) result(me) Constructor for a [[bspline_4d]] type (auto knots).\n  This is a wrapper for [[initialize_4d_auto_knots]]. Arguments Type Intent Optional Attributes Name real(kind=wp), intent(in), dimension(:) :: x (nx) array of x abcissae. Must be strictly increasing. real(kind=wp), intent(in), dimension(:) :: y (ny) array of y abcissae. Must be strictly increasing. real(kind=wp), intent(in), dimension(:) :: z (nz) array of z abcissae. Must be strictly increasing. real(kind=wp), intent(in), dimension(:) :: q (nq) array of q abcissae. Must be strictly increasing. real(kind=wp), intent(in), dimension(:,:,:,:) :: fcn (nx,ny,nz,nq) matrix of function values to interpolate. fcn(i,j,k,l) should contain the function value at the\n point ( x(i) , y(j) , z(k) , q(l) ) integer, intent(in) :: kx The order of spline pieces in x\n (  2 \\le k_x < n_x  )\n (order = polynomial degree + 1) integer, intent(in) :: ky The order of spline pieces in y\n (  2 \\le k_y < n_y  )\n (order = polynomial degree + 1) integer, intent(in) :: kz The order of spline pieces in z\n (  2 \\le k_z < n_z  )\n (order = polynomial degree + 1) integer, intent(in) :: kq The order of spline pieces in q\n (  2 \\le k_q < n_q  )\n (order = polynomial degree + 1) logical, intent(in), optional :: extrap if true, then extrapolation is allowed\n (default is false) Return Value type( bspline_4d ) private pure function bspline_4d_constructor_specify_knots(x, y, z, q, fcn, kx, ky, kz, kq, tx, ty, tz, tq, extrap) result(me) Constructor for a [[bspline_4d]] type (user-specified knots).\n  This is a wrapper for [[initialize_4d_specify_knots]]. Arguments Type Intent Optional Attributes Name real(kind=wp), intent(in), dimension(:) :: x (nx) array of x abcissae. Must be strictly increasing. real(kind=wp), intent(in), dimension(:) :: y (ny) array of y abcissae. Must be strictly increasing. real(kind=wp), intent(in), dimension(:) :: z (nz) array of z abcissae. Must be strictly increasing. real(kind=wp), intent(in), dimension(:) :: q (nq) array of q abcissae. Must be strictly increasing. real(kind=wp), intent(in), dimension(:,:,:,:) :: fcn (nx,ny,nz,nq) matrix of function values to interpolate. fcn(i,j,k,l) should contain the function value at the\n point ( x(i) , y(j) , z(k) , q(l) ) integer, intent(in) :: kx The order of spline pieces in x\n (  2 \\le k_x < n_x  )\n (order = polynomial degree + 1) integer, intent(in) :: ky The order of spline pieces in y\n (  2 \\le k_y < n_y  )\n (order = polynomial degree + 1) integer, intent(in) :: kz The order of spline pieces in z\n (  2 \\le k_z < n_z  )\n (order = polynomial degree + 1) integer, intent(in) :: kq The order of spline pieces in q\n (  2 \\le k_q < n_q  )\n (order = polynomial degree + 1) real(kind=wp), intent(in), dimension(:) :: tx The (nx+kx) knots in the x direction\n for the spline interpolant.\n Must be non-decreasing. real(kind=wp), intent(in), dimension(:) :: ty The (ny+ky) knots in the y direction\n for the spline interpolant.\n Must be non-decreasing. real(kind=wp), intent(in), dimension(:) :: tz The (nz+kz) knots in the z direction\n for the spline interpolant.\n Must be non-decreasing. real(kind=wp), intent(in), dimension(:) :: tq The (nq+kq) knots in the q direction\n for the spline interpolant.\n Must be non-decreasing. logical, intent(in), optional :: extrap if true, then extrapolation is allowed\n (default is false) Return Value type( bspline_4d ) Finalization Procedures final :: finalize_4d private pure elemental subroutine finalize_4d(me) Finalizer for [[bspline_4d]] class. Just a wrapper for [[destroy_4d]]. Arguments Type Intent Optional Attributes Name type( bspline_4d ), intent(inout) :: me Type-Bound Procedures procedure, public, non_overridable :: status_ok returns true if the last iflag status code was =0 . private elemental function status_ok(me) result(ok) This routines returns true if the iflag code from the last\n  routine called was =0 . Maybe of the routines have output iflag variables, so they can be checked explicitly, or this routine\n  can be used. Arguments Type Intent Optional Attributes Name class( bspline_class ), intent(in) :: me Return Value logical procedure, public, non_overridable :: status_message => get_bspline_status_message retrieve the last status message private pure function get_bspline_status_message(me, iflag) result(msg) Get the status message from a bspline_class routine call. Arguments Type Intent Optional Attributes Name class( bspline_class ), intent(in) :: me integer, intent(in), optional :: iflag the corresponding status code Return Value character(len=:),\n  allocatable status message associated with the flag procedure, public, non_overridable :: clear_flag => clear_bspline_flag to reset the iflag saved in the class. private elemental subroutine clear_bspline_flag(me) This sets the iflag variable in the class to 0 (which indicates that everything is OK). It can be used\n  after an error is encountered. Arguments Type Intent Optional Attributes Name class( bspline_class ), intent(inout) :: me generic, public :: initialize => initialize_4d_auto_knots, initialize_4d_specify_knots private pure subroutine initialize_4d_auto_knots(me, x, y, z, q, fcn, kx, ky, kz, kq, iflag, extrap) Initialize a bspline_4d type (with automatically-computed knots).\n  This is a wrapper for db4ink . Arguments Type Intent Optional Attributes Name class( bspline_4d ), intent(inout) :: me real(kind=wp), intent(in), dimension(:) :: x (nx) array of x abcissae. Must be strictly increasing. real(kind=wp), intent(in), dimension(:) :: y (ny) array of y abcissae. Must be strictly increasing. real(kind=wp), intent(in), dimension(:) :: z (nz) array of z abcissae. Must be strictly increasing. real(kind=wp), intent(in), dimension(:) :: q (nq) array of q abcissae. Must be strictly increasing. real(kind=wp), intent(in), dimension(:,:,:,:) :: fcn (nx,ny,nz,nq) matrix of function values to interpolate. fcn(i,j,k,l) should contain the function value at the\n point ( x(i) , y(j) , z(k) , q(l) ) integer, intent(in) :: kx The order of spline pieces in x\n (  2 \\le k_x < n_x  )\n (order = polynomial degree + 1) integer, intent(in) :: ky The order of spline pieces in y\n (  2 \\le k_y < n_y  )\n (order = polynomial degree + 1) integer, intent(in) :: kz The order of spline pieces in z\n (  2 \\le k_z < n_z  )\n (order = polynomial degree + 1) integer, intent(in) :: kq The order of spline pieces in q\n (  2 \\le k_q < n_q  )\n (order = polynomial degree + 1) integer, intent(out) :: iflag status flag (see db4ink ) logical, intent(in), optional :: extrap if true, then extrapolation is allowed\n (default is false) private pure subroutine initialize_4d_specify_knots(me, x, y, z, q, fcn, kx, ky, kz, kq, tx, ty, tz, tq, iflag, extrap) Initialize a bspline_4d type (with user-specified knots).\n  This is a wrapper for db4ink . Arguments Type Intent Optional Attributes Name class( bspline_4d ), intent(inout) :: me real(kind=wp), intent(in), dimension(:) :: x (nx) array of x abcissae. Must be strictly increasing. real(kind=wp), intent(in), dimension(:) :: y (ny) array of y abcissae. Must be strictly increasing. real(kind=wp), intent(in), dimension(:) :: z (nz) array of z abcissae. Must be strictly increasing. real(kind=wp), intent(in), dimension(:) :: q (nq) array of q abcissae. Must be strictly increasing. real(kind=wp), intent(in), dimension(:,:,:,:) :: fcn (nx,ny,nz,nq) matrix of function values to interpolate. fcn(i,j,k,l) should contain the function value at the\n point ( x(i) , y(j) , z(k) , q(l) ) integer, intent(in) :: kx The order of spline pieces in x\n (  2 \\le k_x < n_x  )\n (order = polynomial degree + 1) integer, intent(in) :: ky The order of spline pieces in y\n (  2 \\le k_y < n_y  )\n (order = polynomial degree + 1) integer, intent(in) :: kz The order of spline pieces in z\n (  2 \\le k_z < n_z  )\n (order = polynomial degree + 1) integer, intent(in) :: kq The order of spline pieces in q\n (  2 \\le k_q < n_q  )\n (order = polynomial degree + 1) real(kind=wp), intent(in), dimension(:) :: tx The (nx+kx) knots in the x direction\n for the spline interpolant.\n Must be non-decreasing. real(kind=wp), intent(in), dimension(:) :: ty The (ny+ky) knots in the y direction\n for the spline interpolant.\n Must be non-decreasing. real(kind=wp), intent(in), dimension(:) :: tz The (nz+kz) knots in the z direction\n for the spline interpolant.\n Must be non-decreasing. real(kind=wp), intent(in), dimension(:) :: tq The (nq+kq) knots in the q direction\n for the spline interpolant.\n Must be non-decreasing. integer, intent(out) :: iflag status flag (see db4ink ) logical, intent(in), optional :: extrap if true, then extrapolation is allowed\n (default is false) procedure, public :: evaluate => evaluate_4d private pure subroutine evaluate_4d(me, xval, yval, zval, qval, idx, idy, idz, idq, f, iflag) Evaluate a bspline_4d interpolate.  This is a wrapper for db4val . Arguments Type Intent Optional Attributes Name class( bspline_4d ), intent(inout) :: me real(kind=wp), intent(in) :: xval x coordinate of evaluation point. real(kind=wp), intent(in) :: yval y coordinate of evaluation point. real(kind=wp), intent(in) :: zval z coordinate of evaluation point. real(kind=wp), intent(in) :: qval q coordinate of evaluation point. integer, intent(in) :: idx x derivative of piecewise polynomial to evaluate. integer, intent(in) :: idy y derivative of piecewise polynomial to evaluate. integer, intent(in) :: idz z derivative of piecewise polynomial to evaluate. integer, intent(in) :: idq q derivative of piecewise polynomial to evaluate. real(kind=wp), intent(out) :: f interpolated value integer, intent(out) :: iflag status flag (see db4val ) procedure, public :: destroy => destroy_4d private pure subroutine destroy_4d(me) Destructor for bspline_4d class. Arguments Type Intent Optional Attributes Name class( bspline_4d ), intent(inout) :: me procedure, public :: size_of => size_4d private pure function size_4d(me) result(s) Actual size of a bspline_4d structure in bits. Arguments Type Intent Optional Attributes Name class( bspline_4d ), intent(in) :: me Return Value integer size of the structure in bits Source Code type , extends ( bspline_class ), public :: bspline_4d !! Class for 4d b-spline interpolation. private integer :: nx = 0 !! Number of x abcissae integer :: ny = 0 !! Number of y abcissae integer :: nz = 0 !! Number of z abcissae integer :: nq = 0 !! Number of q abcissae integer :: kx = 0 !! The order of spline pieces in x integer :: ky = 0 !! The order of spline pieces in y integer :: kz = 0 !! The order of spline pieces in z integer :: kq = 0 !! The order of spline pieces in q real ( wp ), dimension (:,:,:,:), allocatable :: bcoef !! array of coefficients of the b-spline interpolant real ( wp ), dimension (:), allocatable :: tx !! The knots in the x direction for the spline interpolant real ( wp ), dimension (:), allocatable :: ty !! The knots in the y direction for the spline interpolant real ( wp ), dimension (:), allocatable :: tz !! The knots in the z direction for the spline interpolant real ( wp ), dimension (:), allocatable :: tq !! The knots in the q direction for the spline interpolant integer :: inbvy = 1 !! internal variable used for efficient processing integer :: inbvz = 1 !! internal variable used for efficient processing integer :: inbvq = 1 !! internal variable used for efficient processing integer :: iloy = 1 !! internal variable used for efficient processing integer :: iloz = 1 !! internal variable used for efficient processing integer :: iloq = 1 !! internal variable used for efficient processing contains private generic , public :: initialize => initialize_4d_auto_knots , initialize_4d_specify_knots procedure :: initialize_4d_auto_knots procedure :: initialize_4d_specify_knots procedure , public :: evaluate => evaluate_4d procedure , public :: destroy => destroy_4d procedure , public :: size_of => size_4d final :: finalize_4d end type bspline_4d","tags":"","loc":"type/bspline_4d.html","title":"bspline_4d â€“ bspline-fortran "},{"text":"type, public, extends( bspline_class ) :: bspline_5d type~~bspline_5d~~InheritsGraph type~bspline_5d bspline_5d type~bspline_class bspline_class type~bspline_class->type~bspline_5d Help Ã— Graph Key Nodes of different colours represent the following: Graph Key Type Type This Page's Entity This Page's Entity Solid arrows point from one derived type to another which extends\n    (inherits from) it. Dashed arrows point from a derived type to another\n    type containing it as a components, with a label listing the name(s) of\n    said component(s). Class for 5d b-spline interpolation. Constructor bspline_5d Finalization Procedures finalize_5d Type-Bound Procedures status_ok status_message clear_flag initialize evaluate destroy size_of Source Code bspline_5d Constructor public interface bspline_5d Constructor for bspline_5d private elemental function bspline_5d_constructor_empty() result(me) It returns an empty [[bspline_5d]] type. Note that INITIALIZE still\n  needs to be called before it can be used.\n  Not really that useful except perhaps in some OpenMP applications. Arguments None Return Value type( bspline_5d ) private pure function bspline_5d_constructor_auto_knots(x, y, z, q, r, fcn, kx, ky, kz, kq, kr, extrap) result(me) Constructor for a [[bspline_5d]] type (auto knots).\n  This is a wrapper for [[initialize_5d_auto_knots]]. Arguments Type Intent Optional Attributes Name real(kind=wp), intent(in), dimension(:) :: x (nx) array of x abcissae. Must be strictly increasing. real(kind=wp), intent(in), dimension(:) :: y (ny) array of y abcissae. Must be strictly increasing. real(kind=wp), intent(in), dimension(:) :: z (nz) array of z abcissae. Must be strictly increasing. real(kind=wp), intent(in), dimension(:) :: q (nq) array of q abcissae. Must be strictly increasing. real(kind=wp), intent(in), dimension(:) :: r (nr) array of r abcissae. Must be strictly increasing. real(kind=wp), intent(in), dimension(:,:,:,:,:) :: fcn (nx,ny,nz,nq,nr) matrix of function values to interpolate. fcn(i,j,k,l,m) should contain the function value at the\n point ( x(i) , y(j) , z(k) , q(l) , r(m) ) integer, intent(in) :: kx The order of spline pieces in x\n (  2 \\le k_x < n_x  )\n (order = polynomial degree + 1) integer, intent(in) :: ky The order of spline pieces in y\n (  2 \\le k_y < n_y  )\n (order = polynomial degree + 1) integer, intent(in) :: kz The order of spline pieces in z\n (  2 \\le k_z < n_z  )\n (order = polynomial degree + 1) integer, intent(in) :: kq The order of spline pieces in q\n (  2 \\le k_q < n_q  )\n (order = polynomial degree + 1) integer, intent(in) :: kr The order of spline pieces in r\n (  2 \\le k_r < n_r  )\n (order = polynomial degree + 1) logical, intent(in), optional :: extrap if true, then extrapolation is allowed\n (default is false) Return Value type( bspline_5d ) private pure function bspline_5d_constructor_specify_knots(x, y, z, q, r, fcn, kx, ky, kz, kq, kr, tx, ty, tz, tq, tr, extrap) result(me) Constructor for a [[bspline_5d]] type (user-specified knots).\n  This is a wrapper for [[initialize_5d_specify_knots]]. Arguments Type Intent Optional Attributes Name real(kind=wp), intent(in), dimension(:) :: x (nx) array of x abcissae. Must be strictly increasing. real(kind=wp), intent(in), dimension(:) :: y (ny) array of y abcissae. Must be strictly increasing. real(kind=wp), intent(in), dimension(:) :: z (nz) array of z abcissae. Must be strictly increasing. real(kind=wp), intent(in), dimension(:) :: q (nq) array of q abcissae. Must be strictly increasing. real(kind=wp), intent(in), dimension(:) :: r (nr) array of r abcissae. Must be strictly increasing. real(kind=wp), intent(in), dimension(:,:,:,:,:) :: fcn (nx,ny,nz,nq,nr) matrix of function values to interpolate. fcn(i,j,k,l,m) should contain the function value at the\n point ( x(i) , y(j) , z(k) , q(l) , r(m) ) integer, intent(in) :: kx The order of spline pieces in x\n (  2 \\le k_x < n_x  )\n (order = polynomial degree + 1) integer, intent(in) :: ky The order of spline pieces in y\n (  2 \\le k_y < n_y  )\n (order = polynomial degree + 1) integer, intent(in) :: kz The order of spline pieces in z\n (  2 \\le k_z < n_z  )\n (order = polynomial degree + 1) integer, intent(in) :: kq The order of spline pieces in q\n (  2 \\le k_q < n_q  )\n (order = polynomial degree + 1) integer, intent(in) :: kr The order of spline pieces in r\n (  2 \\le k_r < n_r  )\n (order = polynomial degree + 1) real(kind=wp), intent(in), dimension(:) :: tx The (nx+kx) knots in the x direction\n for the spline interpolant.\n Must be non-decreasing. real(kind=wp), intent(in), dimension(:) :: ty The (ny+ky) knots in the y direction\n for the spline interpolant.\n Must be non-decreasing. real(kind=wp), intent(in), dimension(:) :: tz The (nz+kz) knots in the z direction\n for the spline interpolant.\n Must be non-decreasing. real(kind=wp), intent(in), dimension(:) :: tq The (nq+kq) knots in the q direction\n for the spline interpolant.\n Must be non-decreasing. real(kind=wp), intent(in), dimension(:) :: tr The (nr+kr) knots in the r direction\n for the spline interpolant.\n Must be non-decreasing. logical, intent(in), optional :: extrap if true, then extrapolation is allowed\n (default is false) Return Value type( bspline_5d ) Finalization Procedures final :: finalize_5d private pure elemental subroutine finalize_5d(me) Finalizer for [[bspline_5d]] class. Just a wrapper for [[destroy_5d]]. Arguments Type Intent Optional Attributes Name type( bspline_5d ), intent(inout) :: me Type-Bound Procedures procedure, public, non_overridable :: status_ok returns true if the last iflag status code was =0 . private elemental function status_ok(me) result(ok) This routines returns true if the iflag code from the last\n  routine called was =0 . Maybe of the routines have output iflag variables, so they can be checked explicitly, or this routine\n  can be used. Arguments Type Intent Optional Attributes Name class( bspline_class ), intent(in) :: me Return Value logical procedure, public, non_overridable :: status_message => get_bspline_status_message retrieve the last status message private pure function get_bspline_status_message(me, iflag) result(msg) Get the status message from a bspline_class routine call. Arguments Type Intent Optional Attributes Name class( bspline_class ), intent(in) :: me integer, intent(in), optional :: iflag the corresponding status code Return Value character(len=:),\n  allocatable status message associated with the flag procedure, public, non_overridable :: clear_flag => clear_bspline_flag to reset the iflag saved in the class. private elemental subroutine clear_bspline_flag(me) This sets the iflag variable in the class to 0 (which indicates that everything is OK). It can be used\n  after an error is encountered. Arguments Type Intent Optional Attributes Name class( bspline_class ), intent(inout) :: me generic, public :: initialize => initialize_5d_auto_knots, initialize_5d_specify_knots private pure subroutine initialize_5d_auto_knots(me, x, y, z, q, r, fcn, kx, ky, kz, kq, kr, iflag, extrap) Initialize a bspline_5d type (with automatically-computed knots).\n  This is a wrapper for db5ink . Arguments Type Intent Optional Attributes Name class( bspline_5d ), intent(inout) :: me real(kind=wp), intent(in), dimension(:) :: x (nx) array of x abcissae. Must be strictly increasing. real(kind=wp), intent(in), dimension(:) :: y (ny) array of y abcissae. Must be strictly increasing. real(kind=wp), intent(in), dimension(:) :: z (nz) array of z abcissae. Must be strictly increasing. real(kind=wp), intent(in), dimension(:) :: q (nq) array of q abcissae. Must be strictly increasing. real(kind=wp), intent(in), dimension(:) :: r (nr) array of r abcissae. Must be strictly increasing. real(kind=wp), intent(in), dimension(:,:,:,:,:) :: fcn (nx,ny,nz,nq,nr) matrix of function values to interpolate. fcn(i,j,k,l,m) should contain the function value at the\n point ( x(i) , y(j) , z(k) , q(l) , r(m) ) integer, intent(in) :: kx The order of spline pieces in x\n (  2 \\le k_x < n_x  )\n (order = polynomial degree + 1) integer, intent(in) :: ky The order of spline pieces in y\n (  2 \\le k_y < n_y  )\n (order = polynomial degree + 1) integer, intent(in) :: kz The order of spline pieces in z\n (  2 \\le k_z < n_z  )\n (order = polynomial degree + 1) integer, intent(in) :: kq The order of spline pieces in q\n (  2 \\le k_q < n_q  )\n (order = polynomial degree + 1) integer, intent(in) :: kr The order of spline pieces in r\n (  2 \\le k_r < n_r  )\n (order = polynomial degree + 1) integer, intent(out) :: iflag status flag (see db5ink ) logical, intent(in), optional :: extrap if true, then extrapolation is allowed\n (default is false) private pure subroutine initialize_5d_specify_knots(me, x, y, z, q, r, fcn, kx, ky, kz, kq, kr, tx, ty, tz, tq, tr, iflag, extrap) Initialize a bspline_5d type (with user-specified knots).\n  This is a wrapper for db5ink . Arguments Type Intent Optional Attributes Name class( bspline_5d ), intent(inout) :: me real(kind=wp), intent(in), dimension(:) :: x (nx) array of x abcissae. Must be strictly increasing. real(kind=wp), intent(in), dimension(:) :: y (ny) array of y abcissae. Must be strictly increasing. real(kind=wp), intent(in), dimension(:) :: z (nz) array of z abcissae. Must be strictly increasing. real(kind=wp), intent(in), dimension(:) :: q (nq) array of q abcissae. Must be strictly increasing. real(kind=wp), intent(in), dimension(:) :: r (nr) array of r abcissae. Must be strictly increasing. real(kind=wp), intent(in), dimension(:,:,:,:,:) :: fcn (nx,ny,nz,nq,nr) matrix of function values to interpolate. fcn(i,j,k,l,m) should contain the function value at the\n point ( x(i) , y(j) , z(k) , q(l) , r(m) ) integer, intent(in) :: kx The order of spline pieces in x\n (  2 \\le k_x < n_x  )\n (order = polynomial degree + 1) integer, intent(in) :: ky The order of spline pieces in y\n (  2 \\le k_y < n_y  )\n (order = polynomial degree + 1) integer, intent(in) :: kz The order of spline pieces in z\n (  2 \\le k_z < n_z  )\n (order = polynomial degree + 1) integer, intent(in) :: kq The order of spline pieces in q\n (  2 \\le k_q < n_q  )\n (order = polynomial degree + 1) integer, intent(in) :: kr The order of spline pieces in r\n (  2 \\le k_r < n_r  )\n (order = polynomial degree + 1) real(kind=wp), intent(in), dimension(:) :: tx The (nx+kx) knots in the x direction\n for the spline interpolant.\n Must be non-decreasing. real(kind=wp), intent(in), dimension(:) :: ty The (ny+ky) knots in the y direction\n for the spline interpolant.\n Must be non-decreasing. real(kind=wp), intent(in), dimension(:) :: tz The (nz+kz) knots in the z direction\n for the spline interpolant.\n Must be non-decreasing. real(kind=wp), intent(in), dimension(:) :: tq The (nq+kq) knots in the q direction\n for the spline interpolant.\n Must be non-decreasing. real(kind=wp), intent(in), dimension(:) :: tr The (nr+kr) knots in the r direction\n for the spline interpolant.\n Must be non-decreasing. integer, intent(out) :: iflag status flag (see db5ink ) logical, intent(in), optional :: extrap if true, then extrapolation is allowed\n (default is false) procedure, public :: evaluate => evaluate_5d private pure subroutine evaluate_5d(me, xval, yval, zval, qval, rval, idx, idy, idz, idq, idr, f, iflag) Evaluate a bspline_5d interpolate.  This is a wrapper for db5val . Arguments Type Intent Optional Attributes Name class( bspline_5d ), intent(inout) :: me real(kind=wp), intent(in) :: xval x coordinate of evaluation point. real(kind=wp), intent(in) :: yval y coordinate of evaluation point. real(kind=wp), intent(in) :: zval z coordinate of evaluation point. real(kind=wp), intent(in) :: qval q coordinate of evaluation point. real(kind=wp), intent(in) :: rval r coordinate of evaluation point. integer, intent(in) :: idx x derivative of piecewise polynomial to evaluate. integer, intent(in) :: idy y derivative of piecewise polynomial to evaluate. integer, intent(in) :: idz z derivative of piecewise polynomial to evaluate. integer, intent(in) :: idq q derivative of piecewise polynomial to evaluate. integer, intent(in) :: idr r derivative of piecewise polynomial to evaluate. real(kind=wp), intent(out) :: f interpolated value integer, intent(out) :: iflag status flag (see db5val ) procedure, public :: destroy => destroy_5d private pure subroutine destroy_5d(me) Destructor for bspline_5d class. Arguments Type Intent Optional Attributes Name class( bspline_5d ), intent(inout) :: me procedure, public :: size_of => size_5d private pure function size_5d(me) result(s) Actual size of a bspline_5d structure in bits. Arguments Type Intent Optional Attributes Name class( bspline_5d ), intent(in) :: me Return Value integer size of the structure in bits Source Code type , extends ( bspline_class ), public :: bspline_5d !! Class for 5d b-spline interpolation. private integer :: nx = 0 !! Number of x abcissae integer :: ny = 0 !! Number of y abcissae integer :: nz = 0 !! Number of z abcissae integer :: nq = 0 !! Number of q abcissae integer :: nr = 0 !! Number of r abcissae integer :: kx = 0 !! The order of spline pieces in x integer :: ky = 0 !! The order of spline pieces in y integer :: kz = 0 !! The order of spline pieces in z integer :: kq = 0 !! The order of spline pieces in q integer :: kr = 0 !! The order of spline pieces in r real ( wp ), dimension (:,:,:,:,:), allocatable :: bcoef !! array of coefficients of the b-spline interpolant real ( wp ), dimension (:), allocatable :: tx !! The knots in the x direction for the spline interpolant real ( wp ), dimension (:), allocatable :: ty !! The knots in the y direction for the spline interpolant real ( wp ), dimension (:), allocatable :: tz !! The knots in the z direction for the spline interpolant real ( wp ), dimension (:), allocatable :: tq !! The knots in the q direction for the spline interpolant real ( wp ), dimension (:), allocatable :: tr !! The knots in the r direction for the spline interpolant integer :: inbvy = 1 !! internal variable used for efficient processing integer :: inbvz = 1 !! internal variable used for efficient processing integer :: inbvq = 1 !! internal variable used for efficient processing integer :: inbvr = 1 !! internal variable used for efficient processing integer :: iloy = 1 !! internal variable used for efficient processing integer :: iloz = 1 !! internal variable used for efficient processing integer :: iloq = 1 !! internal variable used for efficient processing integer :: ilor = 1 !! internal variable used for efficient processing contains private generic , public :: initialize => initialize_5d_auto_knots , initialize_5d_specify_knots procedure :: initialize_5d_auto_knots procedure :: initialize_5d_specify_knots procedure , public :: evaluate => evaluate_5d procedure , public :: destroy => destroy_5d procedure , public :: size_of => size_5d final :: finalize_5d end type bspline_5d","tags":"","loc":"type/bspline_5d.html","title":"bspline_5d â€“ bspline-fortran "},{"text":"type, public, extends( bspline_class ) :: bspline_6d type~~bspline_6d~~InheritsGraph type~bspline_6d bspline_6d type~bspline_class bspline_class type~bspline_class->type~bspline_6d Help Ã— Graph Key Nodes of different colours represent the following: Graph Key Type Type This Page's Entity This Page's Entity Solid arrows point from one derived type to another which extends\n    (inherits from) it. Dashed arrows point from a derived type to another\n    type containing it as a components, with a label listing the name(s) of\n    said component(s). Class for 6d b-spline interpolation. Constructor bspline_6d Finalization Procedures finalize_6d Type-Bound Procedures status_ok status_message clear_flag initialize evaluate destroy size_of Source Code bspline_6d Constructor public interface bspline_6d Constructor for bspline_6d private elemental function bspline_6d_constructor_empty() result(me) It returns an empty [[bspline_6d]] type. Note that INITIALIZE still\n  needs to be called before it can be used.\n  Not really that useful except perhaps in some OpenMP applications. Arguments None Return Value type( bspline_6d ) private pure function bspline_6d_constructor_auto_knots(x, y, z, q, r, s, fcn, kx, ky, kz, kq, kr, ks, extrap) result(me) Constructor for a [[bspline_6d]] type (auto knots).\n  This is a wrapper for [[initialize_6d_auto_knots]]. Arguments Type Intent Optional Attributes Name real(kind=wp), intent(in), dimension(:) :: x (nx) array of x abcissae. Must be strictly increasing. real(kind=wp), intent(in), dimension(:) :: y (ny) array of y abcissae. Must be strictly increasing. real(kind=wp), intent(in), dimension(:) :: z (nz) array of z abcissae. Must be strictly increasing. real(kind=wp), intent(in), dimension(:) :: q (nq) array of q abcissae. Must be strictly increasing. real(kind=wp), intent(in), dimension(:) :: r (nr) array of r abcissae. Must be strictly increasing. real(kind=wp), intent(in), dimension(:) :: s (ns) array of s abcissae. Must be strictly increasing. real(kind=wp), intent(in), dimension(:,:,:,:,:,:) :: fcn (nx,ny,nz,nq,nr,ns) matrix of function values to interpolate. fcn(i,j,k,l,m,n) should contain the function value at the\n point ( x(i) , y(j) , z(k) , q(l) , r(m) , s(n) ) integer, intent(in) :: kx The order of spline pieces in x\n (  2 \\le k_x < n_x  )\n (order = polynomial degree + 1) integer, intent(in) :: ky The order of spline pieces in y\n (  2 \\le k_y < n_y  )\n (order = polynomial degree + 1) integer, intent(in) :: kz The order of spline pieces in z\n (  2 \\le k_z < n_z  )\n (order = polynomial degree + 1) integer, intent(in) :: kq The order of spline pieces in q\n (  2 \\le k_q < n_q  )\n (order = polynomial degree + 1) integer, intent(in) :: kr The order of spline pieces in r\n (  2 \\le k_r < n_r  )\n (order = polynomial degree + 1) integer, intent(in) :: ks The order of spline pieces in z\n (  2 \\le k_z < n_z  )\n (order = polynomial degree + 1) logical, intent(in), optional :: extrap if true, then extrapolation is allowed\n (default is false) Return Value type( bspline_6d ) private pure function bspline_6d_constructor_specify_knots(x, y, z, q, r, s, fcn, kx, ky, kz, kq, kr, ks, tx, ty, tz, tq, tr, ts, extrap) result(me) Constructor for a [[bspline_6d]] type (user-specified knots).\n  This is a wrapper for [[initialize_6d_specify_knots]]. Arguments Type Intent Optional Attributes Name real(kind=wp), intent(in), dimension(:) :: x (nx) array of x abcissae. Must be strictly increasing. real(kind=wp), intent(in), dimension(:) :: y (ny) array of y abcissae. Must be strictly increasing. real(kind=wp), intent(in), dimension(:) :: z (nz) array of z abcissae. Must be strictly increasing. real(kind=wp), intent(in), dimension(:) :: q (nq) array of q abcissae. Must be strictly increasing. real(kind=wp), intent(in), dimension(:) :: r (nr) array of r abcissae. Must be strictly increasing. real(kind=wp), intent(in), dimension(:) :: s (ns) array of s abcissae. Must be strictly increasing. real(kind=wp), intent(in), dimension(:,:,:,:,:,:) :: fcn (nx,ny,nz,nq,nr,ns) matrix of function values to interpolate. fcn(i,j,k,l,m,n) should contain the function value at the\n point ( x(i) , y(j) , z(k) , q(l) , r(m) , s(n) ) integer, intent(in) :: kx The order of spline pieces in x\n (  2 \\le k_x < n_x  )\n (order = polynomial degree + 1) integer, intent(in) :: ky The order of spline pieces in y\n (  2 \\le k_y < n_y  )\n (order = polynomial degree + 1) integer, intent(in) :: kz The order of spline pieces in z\n (  2 \\le k_z < n_z  )\n (order = polynomial degree + 1) integer, intent(in) :: kq The order of spline pieces in q\n (  2 \\le k_q < n_q  )\n (order = polynomial degree + 1) integer, intent(in) :: kr The order of spline pieces in r\n (  2 \\le k_r < n_r  )\n (order = polynomial degree + 1) integer, intent(in) :: ks The order of spline pieces in z\n (  2 \\le k_z < n_z  )\n (order = polynomial degree + 1) real(kind=wp), intent(in), dimension(:) :: tx The (nx+kx) knots in the x direction\n for the spline interpolant.\n Must be non-decreasing. real(kind=wp), intent(in), dimension(:) :: ty The (ny+ky) knots in the y direction\n for the spline interpolant.\n Must be non-decreasing. real(kind=wp), intent(in), dimension(:) :: tz The (nz+kz) knots in the z direction\n for the spline interpolant.\n Must be non-decreasing. real(kind=wp), intent(in), dimension(:) :: tq The (nq+kq) knots in the q direction\n for the spline interpolant.\n Must be non-decreasing. real(kind=wp), intent(in), dimension(:) :: tr The (nr+kr) knots in the r direction\n for the spline interpolant.\n Must be non-decreasing. real(kind=wp), intent(in), dimension(:) :: ts The (ns+ks) knots in the s direction\n for the spline interpolant.\n Must be non-decreasing. logical, intent(in), optional :: extrap if true, then extrapolation is allowed\n (default is false) Return Value type( bspline_6d ) Finalization Procedures final :: finalize_6d private pure elemental subroutine finalize_6d(me) Finalizer for [[bspline_6d]] class. Just a wrapper for [[destroy_6d]]. Arguments Type Intent Optional Attributes Name type( bspline_6d ), intent(inout) :: me Type-Bound Procedures procedure, public, non_overridable :: status_ok returns true if the last iflag status code was =0 . private elemental function status_ok(me) result(ok) This routines returns true if the iflag code from the last\n  routine called was =0 . Maybe of the routines have output iflag variables, so they can be checked explicitly, or this routine\n  can be used. Arguments Type Intent Optional Attributes Name class( bspline_class ), intent(in) :: me Return Value logical procedure, public, non_overridable :: status_message => get_bspline_status_message retrieve the last status message private pure function get_bspline_status_message(me, iflag) result(msg) Get the status message from a bspline_class routine call. Arguments Type Intent Optional Attributes Name class( bspline_class ), intent(in) :: me integer, intent(in), optional :: iflag the corresponding status code Return Value character(len=:),\n  allocatable status message associated with the flag procedure, public, non_overridable :: clear_flag => clear_bspline_flag to reset the iflag saved in the class. private elemental subroutine clear_bspline_flag(me) This sets the iflag variable in the class to 0 (which indicates that everything is OK). It can be used\n  after an error is encountered. Arguments Type Intent Optional Attributes Name class( bspline_class ), intent(inout) :: me generic, public :: initialize => initialize_6d_auto_knots, initialize_6d_specify_knots private pure subroutine initialize_6d_auto_knots(me, x, y, z, q, r, s, fcn, kx, ky, kz, kq, kr, ks, iflag, extrap) Initialize a bspline_6d type (with automatically-computed knots).\n  This is a wrapper for db6ink . Arguments Type Intent Optional Attributes Name class( bspline_6d ), intent(inout) :: me real(kind=wp), intent(in), dimension(:) :: x (nx) array of x abcissae. Must be strictly increasing. real(kind=wp), intent(in), dimension(:) :: y (ny) array of y abcissae. Must be strictly increasing. real(kind=wp), intent(in), dimension(:) :: z (nz) array of z abcissae. Must be strictly increasing. real(kind=wp), intent(in), dimension(:) :: q (nq) array of q abcissae. Must be strictly increasing. real(kind=wp), intent(in), dimension(:) :: r (nr) array of r abcissae. Must be strictly increasing. real(kind=wp), intent(in), dimension(:) :: s (ns) array of s abcissae. Must be strictly increasing. real(kind=wp), intent(in), dimension(:,:,:,:,:,:) :: fcn (nx,ny,nz,nq,nr,ns) matrix of function values to interpolate. fcn(i,j,k,l,m,n) should contain the function value at the\n point ( x(i) , y(j) , z(k) , q(l) , r(m) , s(n) ) integer, intent(in) :: kx The order of spline pieces in x\n (  2 \\le k_x < n_x  )\n (order = polynomial degree + 1) integer, intent(in) :: ky The order of spline pieces in y\n (  2 \\le k_y < n_y  )\n (order = polynomial degree + 1) integer, intent(in) :: kz The order of spline pieces in z\n (  2 \\le k_z < n_z  )\n (order = polynomial degree + 1) integer, intent(in) :: kq The order of spline pieces in q\n (  2 \\le k_q < n_q  )\n (order = polynomial degree + 1) integer, intent(in) :: kr The order of spline pieces in r\n (  2 \\le k_r < n_r  )\n (order = polynomial degree + 1) integer, intent(in) :: ks The order of spline pieces in z\n (  2 \\le k_z < n_z  )\n (order = polynomial degree + 1) integer, intent(out) :: iflag status flag (see db6ink ) logical, intent(in), optional :: extrap if true, then extrapolation is allowed\n (default is false) private pure subroutine initialize_6d_specify_knots(me, x, y, z, q, r, s, fcn, kx, ky, kz, kq, kr, ks, tx, ty, tz, tq, tr, ts, iflag, extrap) Initialize a bspline_6d type (with user-specified knots).\n  This is a wrapper for db6ink . Arguments Type Intent Optional Attributes Name class( bspline_6d ), intent(inout) :: me real(kind=wp), intent(in), dimension(:) :: x (nx) array of x abcissae. Must be strictly increasing. real(kind=wp), intent(in), dimension(:) :: y (ny) array of y abcissae. Must be strictly increasing. real(kind=wp), intent(in), dimension(:) :: z (nz) array of z abcissae. Must be strictly increasing. real(kind=wp), intent(in), dimension(:) :: q (nq) array of q abcissae. Must be strictly increasing. real(kind=wp), intent(in), dimension(:) :: r (nr) array of r abcissae. Must be strictly increasing. real(kind=wp), intent(in), dimension(:) :: s (ns) array of s abcissae. Must be strictly increasing. real(kind=wp), intent(in), dimension(:,:,:,:,:,:) :: fcn (nx,ny,nz,nq,nr,ns) matrix of function values to interpolate. fcn(i,j,k,l,m,n) should contain the function value at the\n point ( x(i) , y(j) , z(k) , q(l) , r(m) , s(n) ) integer, intent(in) :: kx The order of spline pieces in x\n (  2 \\le k_x < n_x  )\n (order = polynomial degree + 1) integer, intent(in) :: ky The order of spline pieces in y\n (  2 \\le k_y < n_y  )\n (order = polynomial degree + 1) integer, intent(in) :: kz The order of spline pieces in z\n (  2 \\le k_z < n_z  )\n (order = polynomial degree + 1) integer, intent(in) :: kq The order of spline pieces in q\n (  2 \\le k_q < n_q  )\n (order = polynomial degree + 1) integer, intent(in) :: kr The order of spline pieces in r\n (  2 \\le k_r < n_r  )\n (order = polynomial degree + 1) integer, intent(in) :: ks The order of spline pieces in z\n (  2 \\le k_z < n_z  )\n (order = polynomial degree + 1) real(kind=wp), intent(in), dimension(:) :: tx The (nx+kx) knots in the x direction\n for the spline interpolant.\n Must be non-decreasing. real(kind=wp), intent(in), dimension(:) :: ty The (ny+ky) knots in the y direction\n for the spline interpolant.\n Must be non-decreasing. real(kind=wp), intent(in), dimension(:) :: tz The (nz+kz) knots in the z direction\n for the spline interpolant.\n Must be non-decreasing. real(kind=wp), intent(in), dimension(:) :: tq The (nq+kq) knots in the q direction\n for the spline interpolant.\n Must be non-decreasing. real(kind=wp), intent(in), dimension(:) :: tr The (nr+kr) knots in the r direction\n for the spline interpolant.\n Must be non-decreasing. real(kind=wp), intent(in), dimension(:) :: ts The (ns+ks) knots in the s direction\n for the spline interpolant.\n Must be non-decreasing. integer, intent(out) :: iflag status flag (see db6ink ) logical, intent(in), optional :: extrap if true, then extrapolation is allowed\n (default is false) procedure, public :: evaluate => evaluate_6d private pure subroutine evaluate_6d(me, xval, yval, zval, qval, rval, sval, idx, idy, idz, idq, idr, ids, f, iflag) Evaluate a bspline_6d interpolate.  This is a wrapper for db6val . Arguments Type Intent Optional Attributes Name class( bspline_6d ), intent(inout) :: me real(kind=wp), intent(in) :: xval x coordinate of evaluation point. real(kind=wp), intent(in) :: yval y coordinate of evaluation point. real(kind=wp), intent(in) :: zval z coordinate of evaluation point. real(kind=wp), intent(in) :: qval q coordinate of evaluation point. real(kind=wp), intent(in) :: rval r coordinate of evaluation point. real(kind=wp), intent(in) :: sval s coordinate of evaluation point. integer, intent(in) :: idx x derivative of piecewise polynomial to evaluate. integer, intent(in) :: idy y derivative of piecewise polynomial to evaluate. integer, intent(in) :: idz z derivative of piecewise polynomial to evaluate. integer, intent(in) :: idq q derivative of piecewise polynomial to evaluate. integer, intent(in) :: idr r derivative of piecewise polynomial to evaluate. integer, intent(in) :: ids s derivative of piecewise polynomial to evaluate. real(kind=wp), intent(out) :: f interpolated value integer, intent(out) :: iflag status flag (see db6val ) procedure, public :: destroy => destroy_6d private pure subroutine destroy_6d(me) Destructor for bspline_6d class. Arguments Type Intent Optional Attributes Name class( bspline_6d ), intent(inout) :: me procedure, public :: size_of => size_6d private pure function size_6d(me) result(s) Actual size of a bspline_6d structure in bits. Arguments Type Intent Optional Attributes Name class( bspline_6d ), intent(in) :: me Return Value integer size of the structure in bits Source Code type , extends ( bspline_class ), public :: bspline_6d !! Class for 6d b-spline interpolation. private integer :: nx = 0 !! Number of x abcissae integer :: ny = 0 !! Number of y abcissae integer :: nz = 0 !! Number of z abcissae integer :: nq = 0 !! Number of q abcissae integer :: nr = 0 !! Number of r abcissae integer :: ns = 0 !! Number of s abcissae integer :: kx = 0 !! The order of spline pieces in x integer :: ky = 0 !! The order of spline pieces in y integer :: kz = 0 !! The order of spline pieces in z integer :: kq = 0 !! The order of spline pieces in q integer :: kr = 0 !! The order of spline pieces in r integer :: ks = 0 !! The order of spline pieces in s real ( wp ), dimension (:,:,:,:,:,:), allocatable :: bcoef !! array of coefficients of the b-spline interpolant real ( wp ), dimension (:), allocatable :: tx !! The knots in the x direction for the spline interpolant real ( wp ), dimension (:), allocatable :: ty !! The knots in the y direction for the spline interpolant real ( wp ), dimension (:), allocatable :: tz !! The knots in the z direction for the spline interpolant real ( wp ), dimension (:), allocatable :: tq !! The knots in the q direction for the spline interpolant real ( wp ), dimension (:), allocatable :: tr !! The knots in the r direction for the spline interpolant real ( wp ), dimension (:), allocatable :: ts !! The knots in the s direction for the spline interpolant integer :: inbvy = 1 !! internal variable used for efficient processing integer :: inbvz = 1 !! internal variable used for efficient processing integer :: inbvq = 1 !! internal variable used for efficient processing integer :: inbvr = 1 !! internal variable used for efficient processing integer :: inbvs = 1 !! internal variable used for efficient processing integer :: iloy = 1 !! internal variable used for efficient processing integer :: iloz = 1 !! internal variable used for efficient processing integer :: iloq = 1 !! internal variable used for efficient processing integer :: ilor = 1 !! internal variable used for efficient processing integer :: ilos = 1 !! internal variable used for efficient processing contains private generic , public :: initialize => initialize_6d_auto_knots , initialize_6d_specify_knots procedure :: initialize_6d_auto_knots procedure :: initialize_6d_specify_knots procedure , public :: evaluate => evaluate_6d procedure , public :: destroy => destroy_6d procedure , public :: size_of => size_6d final :: finalize_6d end type bspline_6d","tags":"","loc":"type/bspline_6d.html","title":"bspline_6d â€“ bspline-fortran "},{"text":"abstract interface public function b1fqad_func(x) result(f) Arguments Type Intent Optional Attributes Name real(kind=wp), intent(in) :: x Return Value real(kind=wp) f(x) Description interface for the input function in [[dbfqad]]","tags":"","loc":"interface/b1fqad_func.html","title":"b1fqad_func â€“ bspline-fortran"},{"text":"public pure function get_status_message(iflag) result(msg) Returns a message string associated with the status code. Arguments Type Intent Optional Attributes Name integer, intent(in) :: iflag return code from one of the routines Return Value character(len=:),\n  allocatable status message associated with the flag Source Code get_status_message Source Code pure function get_status_message ( iflag ) result ( msg ) implicit none integer , intent ( in ) :: iflag !! return code from one of the routines character ( len = :), allocatable :: msg !! status message associated with the flag character ( len = 10 ) :: istr !! for integer to string conversion integer :: istat !! for write statement select case ( iflag ) case ( 0 ); msg = 'Successful execution' case ( 1 ); msg = 'Error in evaluate_*d: class is not initialized' case ( 2 ); msg = 'Error in db*ink: iknot out of range' case ( 3 ); msg = 'Error in db*ink: nx out of range' case ( 4 ); msg = 'Error in db*ink: kx out of range' case ( 5 ); msg = 'Error in db*ink: x not strictly increasing' case ( 6 ); msg = 'Error in db*ink: tx not non-decreasing' case ( 7 ); msg = 'Error in db*ink: ny out of range' case ( 8 ); msg = 'Error in db*ink: ky out of range' case ( 9 ); msg = 'Error in db*ink: y not strictly increasing' case ( 10 ); msg = 'Error in db*ink: ty not non-decreasing' case ( 11 ); msg = 'Error in db*ink: nz out of range' case ( 12 ); msg = 'Error in db*ink: kz out of range' case ( 13 ); msg = 'Error in db*ink: z not strictly increasing' case ( 14 ); msg = 'Error in db*ink: tz not non-decreasing' case ( 15 ); msg = 'Error in db*ink: nq out of range' case ( 16 ); msg = 'Error in db*ink: kq out of range' case ( 17 ); msg = 'Error in db*ink: q not strictly increasing' case ( 18 ); msg = 'Error in db*ink: tq not non-decreasing' case ( 19 ); msg = 'Error in db*ink: nr out of range' case ( 20 ); msg = 'Error in db*ink: kr out of range' case ( 21 ); msg = 'Error in db*ink: r not strictly increasing' case ( 22 ); msg = 'Error in db*ink: tr not non-decreasing' case ( 23 ); msg = 'Error in db*ink: ns out of range' case ( 24 ); msg = 'Error in db*ink: ks out of range' case ( 25 ); msg = 'Error in db*ink: s not strictly increasing' case ( 26 ); msg = 'Error in db*ink: ts not non-decreasing' case ( 700 ); msg = 'Error in db*ink: size(x) /= size(fcn,1)' case ( 701 ); msg = 'Error in db*ink: size(y) /= size(fcn,2)' case ( 702 ); msg = 'Error in db*ink: size(z) /= size(fcn,3)' case ( 703 ); msg = 'Error in db*ink: size(q) /= size(fcn,4)' case ( 704 ); msg = 'Error in db*ink: size(r) /= size(fcn,5)' case ( 705 ); msg = 'Error in db*ink: size(s) /= size(fcn,6)' case ( 706 ); msg = 'Error in db*ink: size(x) /= nx' case ( 707 ); msg = 'Error in db*ink: size(y) /= ny' case ( 708 ); msg = 'Error in db*ink: size(z) /= nz' case ( 709 ); msg = 'Error in db*ink: size(q) /= nq' case ( 710 ); msg = 'Error in db*ink: size(r) /= nr' case ( 711 ); msg = 'Error in db*ink: size(s) /= ns' case ( 712 ); msg = 'Error in db*ink: size(tx) /= nx+kx' case ( 713 ); msg = 'Error in db*ink: size(ty) /= ny+ky' case ( 714 ); msg = 'Error in db*ink: size(tz) /= nz+kz' case ( 715 ); msg = 'Error in db*ink: size(tq) /= nq+kq' case ( 716 ); msg = 'Error in db*ink: size(tr) /= nr+kr' case ( 717 ); msg = 'Error in db*ink: size(ts) /= ns+ks' case ( 800 ); msg = 'Error in db*ink: size(x) /= size(bcoef,1)' case ( 801 ); msg = 'Error in db*ink: size(y) /= size(bcoef,2)' case ( 802 ); msg = 'Error in db*ink: size(z) /= size(bcoef,3)' case ( 803 ); msg = 'Error in db*ink: size(q) /= size(bcoef,4)' case ( 804 ); msg = 'Error in db*ink: size(r) /= size(bcoef,5)' case ( 805 ); msg = 'Error in db*ink: size(s) /= size(bcoef,6)' case ( 100 ); msg = 'Error in dbintk: k does not satisfy k>=1' case ( 101 ); msg = 'Error in dbintk: n does not satisfy n>=k' case ( 102 ); msg = 'Error in dbintk: x(i) does not satisfy x(i)<x(i+1) for some i' case ( 103 ); msg = 'Error in dbintk: some abscissa was not in the support of the ' // & 'corresponding basis function and the system is singular' case ( 104 ); msg = 'Error in dbintk: the system of solver detects a singular system ' // & 'although the theoretical conditions for a solution were satisfied' case ( 201 ); msg = 'Error in dbspvn: k does not satisfy k>=1' case ( 202 ); msg = 'Error in dbspvn: jhigh does not satisfy 1<=jhigh<=k' case ( 203 ); msg = 'Error in dbspvn: index is not 1 or 2' case ( 204 ); msg = 'Error in dbspvn: x does not satisfy t(ileft)<=x<=t(ileft+1)' case ( 301 ); msg = 'Error in dbtpcf: n should be > 0' case ( 401 ); msg = 'Error in dbvalu: k does not satisfy k>=1' case ( 402 ); msg = 'Error in dbvalu: n does not satisfy n>=k' case ( 403 ); msg = 'Error in dbvalu: ideriv does not satisfy 0<=ideriv<k' case ( 404 ); msg = 'Error in dbvalu: x is not greater than or equal to t(k)' case ( 405 ); msg = 'Error in dbvalu: x is not less than or equal to t(n+1)' case ( 406 ); msg = 'Error in dbvalu: a left limiting value cannot be obtained at t(k)' case ( 501 ); msg = 'Error in initialize_*d_specify_knots: tx is not the correct size (kx+nx)' case ( 502 ); msg = 'Error in initialize_*d_specify_knots: ty is not the correct size (ky+ny)' case ( 503 ); msg = 'Error in initialize_*d_specify_knots: tz is not the correct size (kz+nz)' case ( 504 ); msg = 'Error in initialize_*d_specify_knots: tq is not the correct size (kq+nq)' case ( 505 ); msg = 'Error in initialize_*d_specify_knots: tr is not the correct size (kr+nr)' case ( 506 ); msg = 'Error in initialize_*d_specify_knots: ts is not the correct size (ks+ns)' case ( 601 ); msg = 'Error in db*val: x value out of bounds' case ( 602 ); msg = 'Error in db*val: y value out of bounds' case ( 603 ); msg = 'Error in db*val: z value out of bounds' case ( 604 ); msg = 'Error in db*val: q value out of bounds' case ( 605 ); msg = 'Error in db*val: r value out of bounds' case ( 606 ); msg = 'Error in db*val: s value out of bounds' case ( 901 ); msg = 'Error in dbsqad: k does not satisfy 1<=k<=20' case ( 902 ); msg = 'Error in dbsqad: n does not satisfy n>=k' case ( 903 ); msg = 'Error in dbsqad: x1 or x2 or both do not satisfy t(k)<=x<=t(n+1)' case ( 1001 ); msg = 'Error in dbfqad: k does not satisfy k>=1' case ( 1002 ); msg = 'Error in dbfqad: n does not satisfy n>=k' case ( 1003 ); msg = 'Error in dbfqad: d does not satisfy 0<=id<k' case ( 1004 ); msg = 'Error in dbfqad: x1 or x2 or both do not satisfy t(k)<=x<=t(n+1)' case ( 1005 ); msg = 'Error in dbfqad: is less than machine epsilon or greater than 0.1' case ( 1101 ); msg = 'Warning in dbsgq8: a and b are too nearly equal to allow normal integration.' case ( 1102 ); msg = 'Error in dbsgq8: ans is probably insufficiently accurate.' case default write ( istr , fmt = '(I10)' , iostat = istat ) iflag msg = 'Unknown status flag: ' // trim ( adjustl ( istr )) end select end function get_status_message","tags":"","loc":"proc/get_status_message.html","title":"get_status_message â€“ bspline-fortran"},{"text":"public pure subroutine db1ink(x, nx, fcn, kx, iknot, tx, bcoef, iflag) Determines the parameters of a function that interpolates\n  the one-dimensional gridded data\n   [x(i),\\mathrm{fcn}(i)] ~\\mathrm{for}~ i=1,..,n_x \n  The interpolating function and its derivatives may\n  subsequently be evaluated by the function db1val . History Jacob Williams, 10/30/2015 : Created 1D routine. Arguments Type Intent Optional Attributes Name real(kind=wp), intent(in), dimension(:) :: x (nx) array of x abcissae. Must be strictly increasing. integer, intent(in) :: nx Number of x abcissae real(kind=wp), intent(in), dimension(:) :: fcn (nx) array of function values to interpolate. fcn(i) should\n contain the function value at the point x(i) integer, intent(in) :: kx The order of spline pieces in x\n (  2 \\le k_x < n_x  )\n (order = polynomial degree + 1) integer, intent(in) :: iknot knot sequence flag: 0 = knot sequence chosen by db1ink . 1 = knot sequence chosen by user. real(kind=wp), intent(inout), dimension(:) :: tx The (nx+kx) knots in the x direction\n for the spline interpolant: If iknot=0 these are chosen by db1ink . If iknot=1 these are specified by the user. Must be non-decreasing. real(kind=wp), intent(out), dimension(:) :: bcoef (nx) array of coefficients of the b-spline interpolant. integer, intent(out) :: iflag status flag: 0 = successful execution. 2 = iknot out of range. 3 = nx out of range. 4 = kx out of range. 5 = x not strictly increasing. 6 = tx not non-decreasing. 700 = size(x)  \\ne  size(fcn,1) . 706 = size(x)  \\ne  nx . 712 = size(tx)  \\ne  nx+kx . 800 = size(x)  \\ne  size(bcoef,1) . Source Code db1ink Source Code pure subroutine db1ink ( x , nx , fcn , kx , iknot , tx , bcoef , iflag ) implicit none integer , intent ( in ) :: nx !! Number of x abcissae integer , intent ( in ) :: kx !! The order of spline pieces in x !! (  2 \\le k_x < n_x  ) !! (order = polynomial degree + 1) real ( wp ), dimension (:), intent ( in ) :: x !! `(nx)` array of x abcissae. Must be strictly increasing. real ( wp ), dimension (:), intent ( in ) :: fcn !! `(nx)` array of function values to interpolate. `fcn(i)` should !! contain the function value at the point `x(i)` integer , intent ( in ) :: iknot !! knot sequence flag: !! !! * 0 = knot sequence chosen by [[db1ink]]. !! * 1 = knot sequence chosen by user. real ( wp ), dimension (:), intent ( inout ) :: tx !! The `(nx+kx)` knots in the x direction !! for the spline interpolant: !! !! * If `iknot=0` these are chosen by [[db1ink]]. !! * If `iknot=1` these are specified by the user. !! !! Must be non-decreasing. real ( wp ), dimension (:), intent ( out ) :: bcoef !! `(nx)` array of coefficients of the b-spline interpolant. integer , intent ( out ) :: iflag !! status flag: !! !! * 0 = successful execution. !! * 2 = `iknot` out of range. !! * 3 = `nx` out of range. !! * 4 = `kx` out of range. !! * 5 = `x` not strictly increasing. !! * 6 = `tx` not non-decreasing. !! * 700 = `size(x)`  \\ne  `size(fcn,1)`. !! * 706 = `size(x)`  \\ne  `nx`. !! * 712 = `size(tx)`  \\ne  `nx+kx`. !! * 800 = `size(x)`  \\ne  `size(bcoef,1)`. real ( wp ), dimension ( 2 * kx * ( nx + 1 )) :: work logical :: status_ok !check validity of inputs call check_inputs ( 'db1ink' ,& iknot ,& iflag ,& nx = nx ,& kx = kx ,& x = x ,& f1 = fcn ,& bcoef1 = bcoef ,& tx = tx ,& status_ok = status_ok ) if ( status_ok ) then !choose knots if ( iknot == 0 ) then call dbknot ( x , nx , kx , tx ) end if !construct b-spline coefficients call dbtpcf ( x , nx , fcn , nx , 1 , tx , kx , bcoef , work , iflag ) end if end subroutine db1ink","tags":"","loc":"proc/db1ink.html","title":"db1ink â€“ bspline-fortran"},{"text":"public pure subroutine db1val(xval, idx, tx, nx, kx, bcoef, f, iflag, inbvx, extrap) Evaluates the tensor product piecewise polynomial\n  interpolant constructed by the routine db1ink or one of its\n  derivatives at the point xval . To evaluate the interpolant itself, set idx=0 ,\n  to evaluate the first partial with respect to x , set idx=1 , and so on. db1val returns 0.0 if ( xval , yval ) is out of range. that is, if xval < tx ( 1 ) . or . xval > tx ( nx + kx ) if the knots tx were chosen by db1ink , then this is equivalent to: xval < x ( 1 ) . or . xval > x ( nx ) + epsx where epsx = 0.1 * ( x ( nx ) - x ( nx - 1 )) The input quantities tx , nx , kx , and bcoef should be\n  unchanged since the last call of db1ink . History Jacob Williams, 10/30/2015 : Created 1D routine. Arguments Type Intent Optional Attributes Name real(kind=wp), intent(in) :: xval x coordinate of evaluation point. integer, intent(in) :: idx x derivative of piecewise polynomial to evaluate. real(kind=wp), intent(in), dimension(nx+kx) :: tx sequence of knots defining the piecewise polynomial\n in the x direction. (same as in last call to db1ink ) integer, intent(in) :: nx the number of interpolation points in x.\n (same as in last call to db1ink ) integer, intent(in) :: kx order of polynomial pieces in x.\n (same as in last call to db1ink ) real(kind=wp), intent(in), dimension(nx) :: bcoef the b-spline coefficients computed by db1ink . real(kind=wp), intent(out) :: f interpolated value integer, intent(out) :: iflag status flag:  = 0    : no errors  \\ne 0  : error integer, intent(inout) :: inbvx initialization parameter which must be set\n to 1 the first time this routine is called,\n and must not be changed by the user. logical, intent(in), optional :: extrap if extrapolation is allowed\n (if not present, default is False) Source Code db1val Source Code pure subroutine db1val ( xval , idx , tx , nx , kx , bcoef , f , iflag , inbvx , extrap ) implicit none integer , intent ( in ) :: idx !! x derivative of piecewise polynomial to evaluate. integer , intent ( in ) :: nx !! the number of interpolation points in x. !! (same as in last call to [[db1ink]]) integer , intent ( in ) :: kx !! order of polynomial pieces in x. !! (same as in last call to [[db1ink]]) real ( wp ), intent ( in ) :: xval !! x coordinate of evaluation point. real ( wp ), dimension ( nx + kx ), intent ( in ) :: tx !! sequence of knots defining the piecewise polynomial !! in the x direction. (same as in last call to [[db1ink]]) real ( wp ), dimension ( nx ), intent ( in ) :: bcoef !! the b-spline coefficients computed by [[db1ink]]. real ( wp ), intent ( out ) :: f !! interpolated value integer , intent ( out ) :: iflag !! status flag: !! !! *  = 0    : no errors !! *  \\ne 0  : error integer , intent ( inout ) :: inbvx !! initialization parameter which must be set !! to 1 the first time this routine is called, !! and must not be changed by the user. logical , intent ( in ), optional :: extrap !! if extrapolation is allowed !! (if not present, default is False) real ( wp ), dimension ( 3 * kx ) :: work f = 0.0_wp iflag = check_value ( xval , tx , 1 , extrap ); if ( iflag /= 0 ) return call dbvalu ( tx , bcoef , nx , kx , idx , xval , inbvx , work , iflag , f , extrap ) end subroutine db1val","tags":"","loc":"proc/db1val.html","title":"db1val â€“ bspline-fortran"},{"text":"public pure subroutine db1sqad(tx, bcoef, nx, kx, x1, x2, f, iflag) Computes the integral on (x1,x2) of a kx -th order b-spline.\n  Orders kx as high as 20 are permitted by applying a 2, 6, or 10\n  point gauss formula on subintervals of (x1,x2) which are\n  formed by included (distinct) knots. See also [[dbsqad]] -- the core routine. Arguments Type Intent Optional Attributes Name real(kind=wp), intent(in), dimension(nx+kx) :: tx knot array real(kind=wp), intent(in), dimension(nx) :: bcoef b-spline coefficient array integer, intent(in) :: nx length of coefficient array integer, intent(in) :: kx order of b-spline, 1 <= k <= 20 real(kind=wp), intent(in) :: x1 left point of quadrature interval in t(kx) <= x <= t(nx+1) real(kind=wp), intent(in) :: x2 right point of quadrature interval in t(kx) <= x <= t(nx+1) real(kind=wp), intent(out) :: f integral of the b-spline over ( x1 , x2 ) integer, intent(out) :: iflag status flag:  = 0    : no errors  \\ne 0  : error Source Code db1sqad Source Code pure subroutine db1sqad ( tx , bcoef , nx , kx , x1 , x2 , f , iflag ) implicit none integer , intent ( in ) :: nx !! length of coefficient array integer , intent ( in ) :: kx !! order of b-spline, `1 <= k <= 20` real ( wp ), dimension ( nx + kx ), intent ( in ) :: tx !! knot array real ( wp ), dimension ( nx ), intent ( in ) :: bcoef !! b-spline coefficient array real ( wp ), intent ( in ) :: x1 !! left point of quadrature interval in `t(kx) <= x <= t(nx+1)` real ( wp ), intent ( in ) :: x2 !! right point of quadrature interval in `t(kx) <= x <= t(nx+1)` real ( wp ), intent ( out ) :: f !! integral of the b-spline over (`x1`,`x2`) integer , intent ( out ) :: iflag !! status flag: !! !! *  = 0    : no errors !! *  \\ne 0  : error real ( wp ), dimension ( 3 * kx ) :: work !! work array for [[dbsqad]] call dbsqad ( tx , bcoef , nx , kx , x1 , x2 , f , work , iflag ) end subroutine db1sqad","tags":"","loc":"proc/db1sqad.html","title":"db1sqad â€“ bspline-fortran"},{"text":"public subroutine db1fqad(fun, tx, bcoef, nx, kx, idx, x1, x2, tol, f, iflag) Computes the integral on (x1,x2) of a product of a\n  function fun and the idx -th derivative of a kx -th order b-spline,\n  using the b-representation (tx,bcoef,nx,kx) , with an adaptive\n  8-point Legendre-Gauss algorithm. (x1,x2) must be a subinterval of t(kx) <= x <= t(nx+1) . See also [[dbfqad]] -- the core routine. Note This one is not pure, because we are not enforcing\n      that the user function fun be pure. Arguments Type Intent Optional Attributes Name procedure( b1fqad_func ) :: fun external function of one argument for the\n integrand bf(x)=fun(x)*dbvalu(tx,bcoef,nx,kx,id,x,inbv,work) real(kind=wp), intent(in), dimension(nx+kx) :: tx knot array real(kind=wp), intent(in), dimension(nx) :: bcoef b-spline coefficient array integer, intent(in) :: nx length of coefficient array integer, intent(in) :: kx order of b-spline, kx >= 1 integer, intent(in) :: idx order of the spline derivative, 0 <= idx <= k-1 idx=0 gives the spline function real(kind=wp), intent(in) :: x1 left point of quadrature interval in t(k) <= x <= t(n+1) real(kind=wp), intent(in) :: x2 right point of quadrature interval in t(k) <= x <= t(n+1) real(kind=wp), intent(in) :: tol desired accuracy for the quadrature, suggest 10*dtol < tol <= 0.1 where dtol is the maximum\n of 1.0e-18 and real(wp) unit roundoff for\n the machine real(kind=wp), intent(out) :: f integral of bf(x) on (x1,x2) integer, intent(out) :: iflag status flag:  = 0    : no errors  \\ne 0  : error Source Code db1fqad Source Code subroutine db1fqad ( fun , tx , bcoef , nx , kx , idx , x1 , x2 , tol , f , iflag ) implicit none procedure ( b1fqad_func ) :: fun !! external function of one argument for the !! integrand `bf(x)=fun(x)*dbvalu(tx,bcoef,nx,kx,id,x,inbv,work)` integer , intent ( in ) :: nx !! length of coefficient array integer , intent ( in ) :: kx !! order of b-spline, `kx >= 1` real ( wp ), dimension ( nx + kx ), intent ( in ) :: tx !! knot array real ( wp ), dimension ( nx ), intent ( in ) :: bcoef !! b-spline coefficient array integer , intent ( in ) :: idx !! order of the spline derivative, `0 <= idx <= k-1` !! `idx=0` gives the spline function real ( wp ), intent ( in ) :: x1 !! left point of quadrature interval in `t(k) <= x <= t(n+1)` real ( wp ), intent ( in ) :: x2 !! right point of quadrature interval in `t(k) <= x <= t(n+1)` real ( wp ), intent ( in ) :: tol !! desired accuracy for the quadrature, suggest !! `10*dtol < tol <= 0.1` where `dtol` is the maximum !! of `1.0e-18` and real(wp) unit roundoff for !! the machine real ( wp ), intent ( out ) :: f !! integral of `bf(x)` on `(x1,x2)` integer , intent ( out ) :: iflag !! status flag: !! !! *  = 0    : no errors !! *  \\ne 0  : error real ( wp ), dimension ( 3 * kx ) :: work !! work array for [[dbfqad]] call dbfqad ( fun , tx , bcoef , nx , kx , idx , x1 , x2 , tol , f , iflag , work ) end subroutine db1fqad","tags":"","loc":"proc/db1fqad.html","title":"db1fqad â€“ bspline-fortran"},{"text":"public pure subroutine db2ink(x, nx, y, ny, fcn, kx, ky, iknot, tx, ty, bcoef, iflag) Determines the parameters of a function that interpolates\n  the two-dimensional gridded data\n   [x(i),y(j),\\mathrm{fcn}(i,j)] ~\\mathrm{for}~ i=1,..,n_x ~\\mathrm{and}~ j=1,..,n_y \n  The interpolating function and its derivatives may\n  subsequently be evaluated by the function db2val . The interpolating function is a piecewise polynomial function\n  represented as a tensor product of one-dimensional b-splines. the\n  form of this function is  s(x,y) = \\sum_{i=1}&#94;{n_x} \\sum_{j=1}&#94;{n_y} a_{ij} u_i(x) v_j(y)  where the functions u_i and v_j are one-dimensional b-spline\n  basis functions. the coefficients  a_{ij}  are chosen so that  s(x(i),y(j)) = \\mathrm{fcn}(i,j) ~\\mathrm{for}~ i=1,..,n_x ~\\mathrm{and}~ j=1,..,n_y  Note that for each fixed value of y,  s(x,y)  is a piecewise\n  polynomial function of x alone, and for each fixed value of x,  s(x,y) \n  is a piecewise polynomial function of y alone. in one dimension\n  a piecewise polynomial may be created by partitioning a given\n  interval into subintervals and defining a distinct polynomial piece\n  on each one. the points where adjacent subintervals meet are called\n  knots. each of the functions u_i and v_j above is a piecewise\n  polynomial. Users of db2ink choose the order (degree+1) of the polynomial\n  pieces used to define the piecewise polynomial in each of the x and\n  y directions ( kx and ky ). users also may define their own knot\n  sequence in x and y separately ( tx and ty ). if iflag=0 , however, db2ink will choose sequences of knots that result in a piecewise\n  polynomial interpolant with kx-2 continuous partial derivatives in\n  x and ky-2 continuous partial derivatives in y. ( kx knots are taken\n  near each endpoint in the x direction, not-a-knot end conditions\n  are used, and the remaining knots are placed at data points if kx is even or at midpoints between data points if kx is odd. the y\n  direction is treated similarly.) After a call to db2ink , all information necessary to define the\n  interpolating function are contained in the parameters nx , ny , kx , ky , tx , ty , and bcoef . These quantities should not be altered until\n  after the last call of the evaluation routine db2val . History Boisvert, Ronald, NBS : 25 may 1982 : Author of original routine. JEC : 000330 modified array declarations. Jacob Williams, 2/24/2015 : extensive refactoring of CMLIB routine. Arguments Type Intent Optional Attributes Name real(kind=wp), intent(in), dimension(:) :: x (nx) array of x abcissae. Must be strictly increasing. integer, intent(in) :: nx Number of x abcissae real(kind=wp), intent(in), dimension(:) :: y (ny) array of y abcissae. Must be strictly increasing. integer, intent(in) :: ny Number of y abcissae real(kind=wp), intent(in), dimension(:,:) :: fcn (nx,ny) matrix of function values to interpolate. fcn(i,j) should contain the function value at the\n point ( x(i) , y(j) ) integer, intent(in) :: kx The order of spline pieces in x\n (  2 \\le k_x < n_x  )\n (order = polynomial degree + 1) integer, intent(in) :: ky The order of spline pieces in y\n (  2 \\le k_y < n_y  )\n (order = polynomial degree + 1) integer, intent(in) :: iknot knot sequence flag: 0 = knot sequence chosen by db1ink . 1 = knot sequence chosen by user. real(kind=wp), intent(inout), dimension(:) :: tx The (nx+kx) knots in the x direction for the spline interpolant. If iknot=0 these are chosen by db2ink . If iknot=1 these are specified by the user. Must be non-decreasing. real(kind=wp), intent(inout), dimension(:) :: ty The (ny+ky) knots in the y direction for the spline interpolant. If iknot=0 these are chosen by db2ink . If iknot=1 these are specified by the user. Must be non-decreasing. real(kind=wp), intent(out), dimension(:,:) :: bcoef (nx,ny) matrix of coefficients of the b-spline interpolant. integer, intent(out) :: iflag 0 = successful execution. 2 = iknot out of range. 3 = nx out of range. 4 = kx out of range. 5 = x not strictly increasing. 6 = tx not non-decreasing. 7 = ny out of range. 8 = ky out of range. 9 = y not strictly increasing. 10 = ty not non-decreasing. 700 = size(x)  \\ne  size(fcn,1) 701 = size(y)  \\ne  size(fcn,2) 706 = size(x)  \\ne  nx 707 = size(y)  \\ne  ny 712 = size(tx)  \\ne  nx+kx 713 = size(ty)  \\ne  ny+ky 800 = size(x)  \\ne  size(bcoef,1) 801 = size(y)  \\ne  size(bcoef,2) Source Code db2ink Source Code pure subroutine db2ink ( x , nx , y , ny , fcn , kx , ky , iknot , tx , ty , bcoef , iflag ) implicit none integer , intent ( in ) :: nx !! Number of x abcissae integer , intent ( in ) :: ny !! Number of y abcissae integer , intent ( in ) :: kx !! The order of spline pieces in x !! (  2 \\le k_x < n_x  ) !! (order = polynomial degree + 1) integer , intent ( in ) :: ky !! The order of spline pieces in y !! (  2 \\le k_y < n_y  ) !! (order = polynomial degree + 1) real ( wp ), dimension (:), intent ( in ) :: x !! `(nx)` array of x abcissae. Must be strictly increasing. real ( wp ), dimension (:), intent ( in ) :: y !! `(ny)` array of y abcissae. Must be strictly increasing. real ( wp ), dimension (:,:), intent ( in ) :: fcn !! `(nx,ny)` matrix of function values to interpolate. !! `fcn(i,j)` should contain the function value at the !! point (`x(i)`,`y(j)`) integer , intent ( in ) :: iknot !! knot sequence flag: !! !! * 0 = knot sequence chosen by [[db1ink]]. !! * 1 = knot sequence chosen by user. real ( wp ), dimension (:), intent ( inout ) :: tx !! The `(nx+kx)` knots in the x direction for the spline interpolant. !! !! * If `iknot=0` these are chosen by [[db2ink]]. !! * If `iknot=1` these are specified by the user. !! !! Must be non-decreasing. real ( wp ), dimension (:), intent ( inout ) :: ty !! The `(ny+ky)` knots in the y direction for the spline interpolant. !! !! * If `iknot=0` these are chosen by [[db2ink]]. !! * If `iknot=1` these are specified by the user. !! !! Must be non-decreasing. real ( wp ), dimension (:,:), intent ( out ) :: bcoef !! `(nx,ny)` matrix of coefficients of the b-spline interpolant. integer , intent ( out ) :: iflag !! *  0 = successful execution. !! *  2 = `iknot` out of range. !! *  3 = `nx` out of range. !! *  4 = `kx` out of range. !! *  5 = `x` not strictly increasing. !! *  6 = `tx` not non-decreasing. !! *  7 = `ny` out of range. !! *  8 = `ky` out of range. !! *  9 = `y` not strictly increasing. !! * 10 = `ty` not non-decreasing. !! * 700 = `size(x)`   \\ne  `size(fcn,1)` !! * 701 = `size(y)`   \\ne  `size(fcn,2)` !! * 706 = `size(x)`   \\ne  `nx` !! * 707 = `size(y)`   \\ne  `ny` !! * 712 = `size(tx)`  \\ne  `nx+kx` !! * 713 = `size(ty)`  \\ne  `ny+ky` !! * 800 = `size(x)`   \\ne  `size(bcoef,1)` !! * 801 = `size(y)`   \\ne  `size(bcoef,2)` real ( wp ), dimension ( nx * ny ) :: temp real ( wp ), dimension ( max ( 2 * kx * ( nx + 1 ), 2 * ky * ( ny + 1 ))) :: work logical :: status_ok !check validity of inputs call check_inputs ( 'db2ink' ,& iknot ,& iflag ,& nx = nx , ny = ny ,& kx = kx , ky = ky ,& x = x , y = y ,& tx = tx , ty = ty ,& f2 = fcn ,& bcoef2 = bcoef ,& status_ok = status_ok ) if ( status_ok ) then !choose knots if ( iknot == 0 ) then call dbknot ( x , nx , kx , tx ) call dbknot ( y , ny , ky , ty ) end if !construct b-spline coefficients call dbtpcf ( x , nx , fcn , nx , ny , tx , kx , temp , work , iflag ) if ( iflag == 0 ) call dbtpcf ( y , ny , temp , ny , nx , ty , ky , bcoef , work , iflag ) end if end subroutine db2ink","tags":"","loc":"proc/db2ink.html","title":"db2ink â€“ bspline-fortran"},{"text":"public pure subroutine db2val(xval, yval, idx, idy, tx, ty, nx, ny, kx, ky, bcoef, f, iflag, inbvx, inbvy, iloy, extrap) Evaluates the tensor product piecewise polynomial\n  interpolant constructed by the routine db2ink or one of its\n  derivatives at the point ( xval , yval ). To evaluate the interpolant\n  itself, set idx=idy=0 , to evaluate the first partial with respect\n  to x , set idx=1,idy=0 , and so on. db2val returns 0.0 if (xval,yval) is out of range. that is, if xval < tx ( 1 ) . or . xval > tx ( nx + kx ) . or . yval < ty ( 1 ) . or . yval > ty ( ny + ky ) if the knots tx and ty were chosen by db2ink , then this is equivalent to: xval < x ( 1 ) . or . xval > x ( nx ) + epsx . or . yval < y ( 1 ) . or . yval > y ( ny ) + epsy where epsx = 0.1 * ( x ( nx ) - x ( nx - 1 )) epsy = 0.1 * ( y ( ny ) - y ( ny - 1 )) The input quantities tx , ty , nx , ny , kx , ky , and bcoef should be\n  unchanged since the last call of db2ink . History Boisvert, Ronald, NBS : 25 may 1982 : Author of original routine. JEC : 000330 modified array declarations. Jacob Williams, 2/24/2015 : extensive refactoring of CMLIB routine. Arguments Type Intent Optional Attributes Name real(kind=wp), intent(in) :: xval x coordinate of evaluation point. real(kind=wp), intent(in) :: yval y coordinate of evaluation point. integer, intent(in) :: idx x derivative of piecewise polynomial to evaluate. integer, intent(in) :: idy y derivative of piecewise polynomial to evaluate. real(kind=wp), intent(in), dimension(nx+kx) :: tx sequence of knots defining the piecewise polynomial\n in the x direction.\n (same as in last call to db2ink ) real(kind=wp), intent(in), dimension(ny+ky) :: ty sequence of knots defining the piecewise\n polynomial in the y direction.\n (same as in last call to db2ink ) integer, intent(in) :: nx the number of interpolation points in x.\n (same as in last call to db2ink ) integer, intent(in) :: ny the number of interpolation points in y.\n (same as in last call to db2ink ) integer, intent(in) :: kx order of polynomial pieces in x.\n (same as in last call to db2ink ) integer, intent(in) :: ky order of polynomial pieces in y.\n (same as in last call to db2ink ) real(kind=wp), intent(in), dimension(nx,ny) :: bcoef the b-spline coefficients computed by db2ink . real(kind=wp), intent(out) :: f interpolated value integer, intent(out) :: iflag status flag:  = 0    : no errors  \\ne 0  : error integer, intent(inout) :: inbvx initialization parameter which must be set to 1\n the first time this routine is called,\n and must not be changed by the user. integer, intent(inout) :: inbvy initialization parameter which must be set to 1\n the first time this routine is called,\n and must not be changed by the user. integer, intent(inout) :: iloy initialization parameter which must be set to 1\n the first time this routine is called,\n and must not be changed by the user. logical, intent(in), optional :: extrap if extrapolation is allowed\n (if not present, default is False) Source Code db2val Source Code pure subroutine db2val ( xval , yval , idx , idy , tx , ty , nx , ny , kx , ky , bcoef , f , iflag , inbvx , inbvy , iloy , extrap ) implicit none integer , intent ( in ) :: idx !! x derivative of piecewise polynomial to evaluate. integer , intent ( in ) :: idy !! y derivative of piecewise polynomial to evaluate. integer , intent ( in ) :: nx !! the number of interpolation points in x. !! (same as in last call to [[db2ink]]) integer , intent ( in ) :: ny !! the number of interpolation points in y. !! (same as in last call to [[db2ink]]) integer , intent ( in ) :: kx !! order of polynomial pieces in x. !! (same as in last call to [[db2ink]]) integer , intent ( in ) :: ky !! order of polynomial pieces in y. !! (same as in last call to [[db2ink]]) real ( wp ), intent ( in ) :: xval !! x coordinate of evaluation point. real ( wp ), intent ( in ) :: yval !! y coordinate of evaluation point. real ( wp ), dimension ( nx + kx ), intent ( in ) :: tx !! sequence of knots defining the piecewise polynomial !! in the x direction. !! (same as in last call to [[db2ink]]) real ( wp ), dimension ( ny + ky ), intent ( in ) :: ty !! sequence of knots defining the piecewise !! polynomial in the y direction. !! (same as in last call to [[db2ink]]) real ( wp ), dimension ( nx , ny ), intent ( in ) :: bcoef !! the b-spline coefficients computed by [[db2ink]]. real ( wp ), intent ( out ) :: f !! interpolated value integer , intent ( out ) :: iflag !! status flag: !! !! *  = 0    : no errors !! *  \\ne 0  : error integer , intent ( inout ) :: inbvx !! initialization parameter which must be set to 1 !! the first time this routine is called, !! and must not be changed by the user. integer , intent ( inout ) :: inbvy !! initialization parameter which must be set to 1 !! the first time this routine is called, !! and must not be changed by the user. integer , intent ( inout ) :: iloy !! initialization parameter which must be set to 1 !! the first time this routine is called, !! and must not be changed by the user. logical , intent ( in ), optional :: extrap !! if extrapolation is allowed !! (if not present, default is False) integer :: k , lefty , mflag , kcol real ( wp ), dimension ( ky ) :: temp real ( wp ), dimension ( 3 * max ( kx , ky )) :: work f = 0.0_wp iflag = check_value ( xval , tx , 1 , extrap ); if ( iflag /= 0 ) return iflag = check_value ( yval , ty , 2 , extrap ); if ( iflag /= 0 ) return iflag = - 1 call dintrv ( ty , ny + ky , yval , iloy , lefty , mflag , extrap ); if ( mflag /= 0 ) return kcol = lefty - ky do k = 1 , ky kcol = kcol + 1 call dbvalu ( tx , bcoef (:, kcol ), nx , kx , idx , xval , inbvx , work , iflag , temp ( k ), extrap ) if ( iflag /= 0 ) return !error end do kcol = lefty - ky + 1 call dbvalu ( ty ( kcol :), temp , ky , ky , idy , yval , inbvy , work , iflag , f , extrap ) end subroutine db2val","tags":"","loc":"proc/db2val.html","title":"db2val â€“ bspline-fortran"},{"text":"public pure subroutine db3ink(x, nx, y, ny, z, nz, fcn, kx, ky, kz, iknot, tx, ty, tz, bcoef, iflag) Determines the parameters of a function that interpolates\n  the three-dimensional gridded data\n   [x(i),y(j),z(k),\\mathrm{fcn}(i,j,k)] ~\\mathrm{for}~\n     i=1,..,n_x ~\\mathrm{and}~ j=1,..,n_y, ~\\mathrm{and}~ k=1,..,n_z \n  The interpolating function and\n  its derivatives may subsequently be evaluated by the function db3val . The interpolating function is a piecewise polynomial function\n  represented as a tensor product of one-dimensional b-splines. the\n  form of this function is\n   s(x,y,z) = \\sum_{i=1}&#94;{n_x} \\sum_{j=1}&#94;{n_y} \\sum_{k=1}&#94;{n_z}\n                a_{ijk} u_i(x) v_j(y) w_k(z)  where the functions u_i, v_j, and w_k are one-dimensional b-\n  spline basis functions. the coefficients a_{ijk} are chosen so that:  s(x(i),y(j),z(k)) = \\mathrm{fcn}(i,j,k)\n     ~\\mathrm{for}~ i=1,..,n_x , j=1,..,n_y , k=1,..,n_z  Note that for fixed values of y and z s(x,y,z) is a piecewise\n  polynomial function of x alone, for fixed values of x and z s(x,y,z)\n  is a piecewise polynomial function of y alone, and for fixed\n  values of x and y s(x,y,z) is a function of z alone. in one\n  dimension a piecewise polynomial may be created by partitioning a\n  given interval into subintervals and defining a distinct polynomial\n  piece on each one. the points where adjacent subintervals meet are\n  called knots. each of the functions u_i, v_j, and w_k above is a\n  piecewise polynomial. Users of db3ink choose the order (degree+1) of the polynomial\n  pieces used to define the piecewise polynomial in each of the x, y,\n  and z directions ( kx , ky , and kz ). users also may define their own\n  knot sequence in x, y, z separately ( tx , ty , and tz ). if iflag=0 ,\n  however, db3ink will choose sequences of knots that result in a\n  piecewise polynomial interpolant with kx-2 continuous partial\n  derivatives in x, ky-2 continuous partial derivatives in y, and kz-2 continuous partial derivatives in z. ( kx knots are taken near\n  each endpoint in x, not-a-knot end conditions are used, and the\n  remaining knots are placed at data points if kx is even or at\n  midpoints between data points if kx is odd. the y and z directions\n  are treated similarly.) After a call to db3ink , all information necessary to define the\n  interpolating function are contained in the parameters nx , ny , nz , kx , ky , kz , tx , ty , tz , and bcoef . these quantities should not be\n  altered until after the last call of the evaluation routine db3val . History Boisvert, Ronald, NBS : 25 may 1982 : Author of original routine. JEC : 000330 modified array declarations. Jacob Williams, 2/24/2015 : extensive refactoring of CMLIB routine. Arguments Type Intent Optional Attributes Name real(kind=wp), intent(in), dimension(:) :: x (nx) array of x abcissae. must be strictly increasing. integer, intent(in) :: nx number of x abcissae (  \\ge 3  ) real(kind=wp), intent(in), dimension(:) :: y (ny) array of y abcissae. must be strictly increasing. integer, intent(in) :: ny number of y abcissae (  \\ge 3  ) real(kind=wp), intent(in), dimension(:) :: z (nz) array of z abcissae. must be strictly increasing. integer, intent(in) :: nz number of z abcissae (  \\ge 3  ) real(kind=wp), intent(in), dimension(:,:,:) :: fcn (nx,ny,nz) matrix of function values to interpolate. fcn(i,j,k) should\n contain the function value at the point ( x(i) , y(j) , z(k) ) integer, intent(in) :: kx The order of spline pieces in x\n (  2 \\le k_x < n_x  )\n (order = polynomial degree + 1) integer, intent(in) :: ky The order of spline pieces in y\n (  2 \\le k_y < n_y  )\n (order = polynomial degree + 1) integer, intent(in) :: kz the order of spline pieces in z\n (  2 \\le k_z < n_z  )\n (order = polynomial degree + 1) integer, intent(in) :: iknot knot sequence flag: 0 = knot sequence chosen by db3ink . 1 = knot sequence chosen by user. real(kind=wp), intent(inout), dimension(:) :: tx The (nx+kx) knots in the x direction for the spline interpolant. If iknot=0 these are chosen by db3ink . If iknot=1 these are specified by the user. Must be non-decreasing. real(kind=wp), intent(inout), dimension(:) :: ty The (ny+ky) knots in the y direction for the spline interpolant. If iknot=0 these are chosen by db3ink . If iknot=1 these are specified by the user. Must be non-decreasing. real(kind=wp), intent(inout), dimension(:) :: tz The (nz+kz) knots in the z direction for the spline interpolant. If iknot=0 these are chosen by db3ink . If iknot=1 these are specified by the user. Must be non-decreasing. real(kind=wp), intent(out), dimension(:,:,:) :: bcoef (nx,ny,nz) matrix of coefficients of the b-spline interpolant. integer, intent(out) :: iflag 0 = successful execution. 2 = iknot out of range. 3 = nx out of range. 4 = kx out of range. 5 = x not strictly increasing. 6 = tx not non-decreasing. 7 = ny out of range. 8 = ky out of range. 9 = y not strictly increasing. 10 = ty not non-decreasing. 11 = nz out of range. 12 = kz out of range. 13 = z not strictly increasing. 14 = ty not non-decreasing. 700 = size(x) \\ne size(fcn,1) 701 = size(y) \\ne size(fcn,2) 702 = size(z) \\ne size(fcn,3) 706 = size(x) \\ne nx 707 = size(y) \\ne ny 708 = size(z) \\ne nz 712 = size(tx) \\ne nx+kx 713 = size(ty) \\ne ny+ky 714 = size(tz) \\ne nz+kz 800 = size(x) \\ne size(bcoef,1) 801 = size(y) \\ne size(bcoef,2) 802 = size(z) \\ne size(bcoef,3) Source Code db3ink Source Code pure subroutine db3ink ( x , nx , y , ny , z , nz , fcn , kx , ky , kz , iknot , tx , ty , tz , bcoef , iflag ) implicit none integer , intent ( in ) :: nx !! number of x abcissae (  \\ge 3  ) integer , intent ( in ) :: ny !! number of y abcissae (  \\ge 3  ) integer , intent ( in ) :: nz !! number of z abcissae (  \\ge 3  ) integer , intent ( in ) :: kx !! The order of spline pieces in x !! (  2 \\le k_x < n_x  ) !! (order = polynomial degree + 1) integer , intent ( in ) :: ky !! The order of spline pieces in y !! (  2 \\le k_y < n_y  ) !! (order = polynomial degree + 1) integer , intent ( in ) :: kz !! the order of spline pieces in z !! (  2 \\le k_z < n_z  ) !! (order = polynomial degree + 1) real ( wp ), dimension (:), intent ( in ) :: x !! `(nx)` array of x abcissae. must be strictly increasing. real ( wp ), dimension (:), intent ( in ) :: y !! `(ny)` array of y abcissae. must be strictly increasing. real ( wp ), dimension (:), intent ( in ) :: z !! `(nz)` array of z abcissae. must be strictly increasing. real ( wp ), dimension (:,:,:), intent ( in ) :: fcn !! `(nx,ny,nz)` matrix of function values to interpolate. `fcn(i,j,k)` should !! contain the function value at the point (`x(i)`,`y(j)`,`z(k)`) integer , intent ( in ) :: iknot !! knot sequence flag: !! !! * 0 = knot sequence chosen by [[db3ink]]. !! * 1 = knot sequence chosen by user. real ( wp ), dimension (:), intent ( inout ) :: tx !! The `(nx+kx)` knots in the x direction for the spline interpolant. !! !! * If `iknot=0` these are chosen by [[db3ink]]. !! * If `iknot=1` these are specified by the user. !! !! Must be non-decreasing. real ( wp ), dimension (:), intent ( inout ) :: ty !! The `(ny+ky)` knots in the y direction for the spline interpolant. !! !! * If `iknot=0` these are chosen by [[db3ink]]. !! * If `iknot=1` these are specified by the user. !! !! Must be non-decreasing. real ( wp ), dimension (:), intent ( inout ) :: tz !! The `(nz+kz)` knots in the z direction for the spline interpolant. !! !! * If `iknot=0` these are chosen by [[db3ink]]. !! * If `iknot=1` these are specified by the user. !! !! Must be non-decreasing. real ( wp ), dimension (:,:,:), intent ( out ) :: bcoef !! `(nx,ny,nz)` matrix of coefficients of the b-spline interpolant. integer , intent ( out ) :: iflag !! *  0 = successful execution. !! *  2 = `iknot` out of range. !! *  3 = `nx` out of range. !! *  4 = `kx` out of range. !! *  5 = `x` not strictly increasing. !! *  6 = `tx` not non-decreasing. !! *  7 = `ny` out of range. !! *  8 = `ky` out of range. !! *  9 = `y` not strictly increasing. !! * 10 = `ty` not non-decreasing. !! * 11 = `nz` out of range. !! * 12 = `kz` out of range. !! * 13 = `z` not strictly increasing. !! * 14 = `ty` not non-decreasing. !! * 700 = `size(x) ` \\ne `size(fcn,1)` !! * 701 = `size(y) ` \\ne `size(fcn,2)` !! * 702 = `size(z) ` \\ne `size(fcn,3)` !! * 706 = `size(x) ` \\ne `nx` !! * 707 = `size(y) ` \\ne `ny` !! * 708 = `size(z) ` \\ne `nz` !! * 712 = `size(tx)` \\ne `nx+kx` !! * 713 = `size(ty)` \\ne `ny+ky` !! * 714 = `size(tz)` \\ne `nz+kz` !! * 800 = `size(x) ` \\ne `size(bcoef,1)` !! * 801 = `size(y) ` \\ne `size(bcoef,2)` !! * 802 = `size(z) ` \\ne `size(bcoef,3)` real ( wp ), dimension ( nx * ny * nz ) :: temp real ( wp ), dimension ( max ( 2 * kx * ( nx + 1 ), 2 * ky * ( ny + 1 ), 2 * kz * ( nz + 1 ))) :: work logical :: status_ok ! check validity of input call check_inputs ( 'db3ink' ,& iknot ,& iflag ,& nx = nx , ny = ny , nz = nz ,& kx = kx , ky = ky , kz = kz ,& x = x , y = y , z = z ,& tx = tx , ty = ty , tz = tz ,& f3 = fcn ,& bcoef3 = bcoef ,& status_ok = status_ok ) if ( status_ok ) then ! choose knots if ( iknot == 0 ) then call dbknot ( x , nx , kx , tx ) call dbknot ( y , ny , ky , ty ) call dbknot ( z , nz , kz , tz ) end if ! copy fcn to work in packed for dbtpcf temp ( 1 : nx * ny * nz ) = reshape ( fcn , [ nx * ny * nz ] ) ! construct b-spline coefficients call dbtpcf ( x , nx , temp , nx , ny * nz , tx , kx , bcoef , work , iflag ) if ( iflag == 0 ) call dbtpcf ( y , ny , bcoef , ny , nx * nz , ty , ky , temp , work , iflag ) if ( iflag == 0 ) call dbtpcf ( z , nz , temp , nz , nx * ny , tz , kz , bcoef , work , iflag ) end if end subroutine db3ink","tags":"","loc":"proc/db3ink.html","title":"db3ink â€“ bspline-fortran"},{"text":"public pure subroutine db3val(xval, yval, zval, idx, idy, idz, tx, ty, tz, nx, ny, nz, kx, ky, kz, bcoef, f, iflag, inbvx, inbvy, inbvz, iloy, iloz, extrap) Evaluates the tensor product piecewise polynomial\n  interpolant constructed by the routine db3ink or one of its\n  derivatives at the point ( xval , yval , zval ). To evaluate the\n  interpolant itself, set idx=idy=idz=0 , to evaluate the first\n  partial with respect to x , set idx=1 , idy=idz=0 , and so on. db3val returns 0.0 if ( xval , yval , zval ) is out of range. that is, xval < tx ( 1 ) . or . xval > tx ( nx + kx ) . or . yval < ty ( 1 ) . or . yval > ty ( ny + ky ) . or . zval < tz ( 1 ) . or . zval > tz ( nz + kz ) if the knots tx , ty , and tz were chosen by db3ink , then this is\n  equivalent to xval < x ( 1 ) . or . xval > x ( nx ) + epsx . or . yval < y ( 1 ) . or . yval > y ( ny ) + epsy . or . zval < z ( 1 ) . or . zval > z ( nz ) + epsz where epsx = 0.1 * ( x ( nx ) - x ( nx - 1 )) epsy = 0.1 * ( y ( ny ) - y ( ny - 1 )) epsz = 0.1 * ( z ( nz ) - z ( nz - 1 )) The input quantities tx , ty , tz , nx , ny , nz , kx , ky , kz , and bcoef should remain unchanged since the last call of db3ink . History Boisvert, Ronald, NBS : 25 may 1982 : Author of original routine. JEC : 000330 modified array declarations. Jacob Williams, 2/24/2015 : extensive refactoring of CMLIB routine. Arguments Type Intent Optional Attributes Name real(kind=wp), intent(in) :: xval x coordinate of evaluation point. real(kind=wp), intent(in) :: yval y coordinate of evaluation point. real(kind=wp), intent(in) :: zval z coordinate of evaluation point. integer, intent(in) :: idx x derivative of piecewise polynomial to evaluate. integer, intent(in) :: idy y derivative of piecewise polynomial to evaluate. integer, intent(in) :: idz z derivative of piecewise polynomial to evaluate. real(kind=wp), intent(in), dimension(nx+kx) :: tx sequence of knots defining the piecewise polynomial\n in the x direction. (same as in last call to db3ink ) real(kind=wp), intent(in), dimension(ny+ky) :: ty sequence of knots defining the piecewise polynomial\n in the y direction. (same as in last call to db3ink ) real(kind=wp), intent(in), dimension(nz+kz) :: tz sequence of knots defining the piecewise polynomial\n in the z direction. (same as in last call to db3ink ) integer, intent(in) :: nx the number of interpolation points in x.\n (same as in last call to db3ink ) integer, intent(in) :: ny the number of interpolation points in y.\n (same as in last call to db3ink ) integer, intent(in) :: nz the number of interpolation points in z.\n (same as in last call to db3ink ) integer, intent(in) :: kx order of polynomial pieces in z.\n (same as in last call to db3ink ) integer, intent(in) :: ky order of polynomial pieces in y.\n (same as in last call to db3ink ) integer, intent(in) :: kz order of polynomial pieces in z.\n (same as in last call to db3ink ) real(kind=wp), intent(in), dimension(nx,ny,nz) :: bcoef the b-spline coefficients computed by db3ink . real(kind=wp), intent(out) :: f interpolated value integer, intent(out) :: iflag status flag:  = 0    : no errors  \\ne 0  : error integer, intent(inout) :: inbvx initialization parameter which must be\n set to 1 the first time this routine is called,\n and must not be changed by the user. integer, intent(inout) :: inbvy initialization parameter which must be\n set to 1 the first time this routine is called,\n and must not be changed by the user. integer, intent(inout) :: inbvz initialization parameter which must be\n set to 1 the first time this routine is called,\n and must not be changed by the user. integer, intent(inout) :: iloy initialization parameter which must be\n set to 1 the first time this routine is called,\n and must not be changed by the user. integer, intent(inout) :: iloz initialization parameter which must be\n set to 1 the first time this routine is called,\n and must not be changed by the user. logical, intent(in), optional :: extrap if extrapolation is allowed\n (if not present, default is False) Source Code db3val Source Code pure subroutine db3val ( xval , yval , zval , idx , idy , idz ,& tx , ty , tz ,& nx , ny , nz , kx , ky , kz , bcoef , f , iflag ,& inbvx , inbvy , inbvz , iloy , iloz , extrap ) implicit none integer , intent ( in ) :: idx !! x derivative of piecewise polynomial to evaluate. integer , intent ( in ) :: idy !! y derivative of piecewise polynomial to evaluate. integer , intent ( in ) :: idz !! z derivative of piecewise polynomial to evaluate. integer , intent ( in ) :: nx !! the number of interpolation points in x. !! (same as in last call to [[db3ink]]) integer , intent ( in ) :: ny !! the number of interpolation points in y. !! (same as in last call to [[db3ink]]) integer , intent ( in ) :: nz !! the number of interpolation points in z. !! (same as in last call to [[db3ink]]) integer , intent ( in ) :: kx !! order of polynomial pieces in z. !! (same as in last call to [[db3ink]]) integer , intent ( in ) :: ky !! order of polynomial pieces in y. !! (same as in last call to [[db3ink]]) integer , intent ( in ) :: kz !! order of polynomial pieces in z. !! (same as in last call to [[db3ink]]) real ( wp ), intent ( in ) :: xval !! x coordinate of evaluation point. real ( wp ), intent ( in ) :: yval !! y coordinate of evaluation point. real ( wp ), intent ( in ) :: zval !! z coordinate of evaluation point. real ( wp ), dimension ( nx + kx ), intent ( in ) :: tx !! sequence of knots defining the piecewise polynomial !! in the x direction. (same as in last call to [[db3ink]]) real ( wp ), dimension ( ny + ky ), intent ( in ) :: ty !! sequence of knots defining the piecewise polynomial !! in the y direction. (same as in last call to [[db3ink]]) real ( wp ), dimension ( nz + kz ), intent ( in ) :: tz !! sequence of knots defining the piecewise polynomial !! in the z direction. (same as in last call to [[db3ink]]) real ( wp ), dimension ( nx , ny , nz ), intent ( in ) :: bcoef !! the b-spline coefficients computed by [[db3ink]]. real ( wp ), intent ( out ) :: f !! interpolated value integer , intent ( out ) :: iflag !! status flag: !! !! *  = 0    : no errors !! *  \\ne 0  : error integer , intent ( inout ) :: inbvx !! initialization parameter which must be !! set to 1 the first time this routine is called, !! and must not be changed by the user. integer , intent ( inout ) :: inbvy !! initialization parameter which must be !! set to 1 the first time this routine is called, !! and must not be changed by the user. integer , intent ( inout ) :: inbvz !! initialization parameter which must be !! set to 1 the first time this routine is called, !! and must not be changed by the user. integer , intent ( inout ) :: iloy !! initialization parameter which must be !! set to 1 the first time this routine is called, !! and must not be changed by the user. integer , intent ( inout ) :: iloz !! initialization parameter which must be !! set to 1 the first time this routine is called, !! and must not be changed by the user. logical , intent ( in ), optional :: extrap !! if extrapolation is allowed !! (if not present, default is False) real ( wp ), dimension ( ky , kz ) :: temp1 real ( wp ), dimension ( kz ) :: temp2 real ( wp ), dimension ( 3 * max ( kx , ky , kz )) :: work integer :: lefty , leftz , mflag ,& kcoly , kcolz , j , k f = 0.0_wp iflag = check_value ( xval , tx , 1 , extrap ); if ( iflag /= 0 ) return iflag = check_value ( yval , ty , 2 , extrap ); if ( iflag /= 0 ) return iflag = check_value ( zval , tz , 3 , extrap ); if ( iflag /= 0 ) return iflag = - 1 call dintrv ( ty , ny + ky , yval , iloy , lefty , mflag , extrap ); if ( mflag /= 0 ) return call dintrv ( tz , nz + kz , zval , iloz , leftz , mflag , extrap ); if ( mflag /= 0 ) return iflag = 0 kcolz = leftz - kz do k = 1 , kz kcolz = kcolz + 1 kcoly = lefty - ky do j = 1 , ky kcoly = kcoly + 1 call dbvalu ( tx , bcoef (:, kcoly , kcolz ), nx , kx , idx , xval , inbvx , work , iflag , temp1 ( j , k ), extrap ) if ( iflag /= 0 ) return end do end do kcoly = lefty - ky + 1 do k = 1 , kz call dbvalu ( ty ( kcoly :), temp1 (:, k ), ky , ky , idy , yval , inbvy , work , iflag , temp2 ( k ), extrap ) if ( iflag /= 0 ) return end do kcolz = leftz - kz + 1 call dbvalu ( tz ( kcolz :), temp2 , kz , kz , idz , zval , inbvz , work , iflag , f , extrap ) end subroutine db3val","tags":"","loc":"proc/db3val.html","title":"db3val â€“ bspline-fortran"},{"text":"public pure subroutine db4ink(x, nx, y, ny, z, nz, q, nq, fcn, kx, ky, kz, kq, iknot, tx, ty, tz, tq, bcoef, iflag) Determines the parameters of a function that interpolates\n  the four-dimensional gridded data\n   [x(i),y(j),z(k),q(l),\\mathrm{fcn}(i,j,k,l)] ~\\mathrm{for}~\n     i=1,..,n_x ~\\mathrm{and}~ j=1,..,n_y, ~\\mathrm{and}~ k=1,..,n_z,\n     ~\\mathrm{and}~ l=1,..,n_q \n  The interpolating function and its derivatives may\n  subsequently be evaluated by the function db4val . See db3ink header for more details. History Jacob Williams, 2/24/2015 : Created this routine. Arguments Type Intent Optional Attributes Name real(kind=wp), intent(in), dimension(:) :: x (nx) array of x abcissae. must be strictly increasing. integer, intent(in) :: nx number of x abcissae (  \\ge 3  ) real(kind=wp), intent(in), dimension(:) :: y (ny) array of y abcissae. must be strictly increasing. integer, intent(in) :: ny number of y abcissae (  \\ge 3  ) real(kind=wp), intent(in), dimension(:) :: z (nz) array of z abcissae. must be strictly increasing. integer, intent(in) :: nz number of z abcissae (  \\ge 3  ) real(kind=wp), intent(in), dimension(:) :: q (nq) array of q abcissae. must be strictly increasing. integer, intent(in) :: nq number of q abcissae (  \\ge 3  ) real(kind=wp), intent(in), dimension(:,:,:,:) :: fcn (nx,ny,nz,nq) matrix of function values to interpolate. fcn(i,j,k,q) should\n contain the function value at the point ( x(i) , y(j) , z(k) , q(l) ) integer, intent(in) :: kx the order of spline pieces in x\n (  2 \\le k_x < n_x  ).\n (order = polynomial degree + 1) integer, intent(in) :: ky the order of spline pieces in y\n (  2 \\le k_y < n_y  ).\n (order = polynomial degree + 1) integer, intent(in) :: kz the order of spline pieces in z\n (  2 \\le k_z < n_z  ).\n (order = polynomial degree + 1) integer, intent(in) :: kq the order of spline pieces in q\n (  2 \\le k_q < n_q  ).\n (order = polynomial degree + 1) integer, intent(in) :: iknot knot sequence flag: 0 = knot sequence chosen by db4ink . 1 = knot sequence chosen by user. real(kind=wp), intent(inout), dimension(:) :: tx The (nx+kx) knots in the x direction for the spline interpolant. If iknot=0 these are chosen by db4ink . If iknot=1 these are specified by the user. Must be non-decreasing. real(kind=wp), intent(inout), dimension(:) :: ty The (ny+ky) knots in the y direction for the spline interpolant. If iknot=0 these are chosen by db4ink . If iknot=1 these are specified by the user. Must be non-decreasing. real(kind=wp), intent(inout), dimension(:) :: tz The (nz+kz) knots in the z direction for the spline interpolant. If iknot=0 these are chosen by db4ink . If iknot=1 these are specified by the user. Must be non-decreasing. real(kind=wp), intent(inout), dimension(:) :: tq The (nq+kq) knots in the q direction for the spline interpolant. If iknot=0 these are chosen by db4ink . If iknot=1 these are specified by the user. Must be non-decreasing. real(kind=wp), intent(out), dimension(:,:,:,:) :: bcoef (nx,ny,nz,nq) matrix of coefficients of the b-spline interpolant. integer, intent(out) :: iflag 0 = successful execution. 2 = iknot out of range. 3 = nx out of range. 4 = kx out of range. 5 = x not strictly increasing. 6 = tx not non-decreasing. 7 = ny out of range. 8 = ky out of range. 9 = y not strictly increasing. 10 = ty not non-decreasing. 11 = nz out of range. 12 = kz out of range. 13 = z not strictly increasing. 14 = tz not non-decreasing. 15 = nq out of range. 16 = kq out of range. 17 = q not strictly increasing. 18 = tq not non-decreasing. 700 = size(x)  \\ne  size(fcn,1) 701 = size(y)  \\ne  size(fcn,2) 702 = size(z)  \\ne  size(fcn,3) 703 = size(q)  \\ne  size(fcn,4) 706 = size(x)  \\ne  nx 707 = size(y)  \\ne  ny 708 = size(z)  \\ne  nz 709 = size(q)  \\ne  nq 712 = size(tx )  \\ne  nx+kx 713 = size(ty )  \\ne  ny+ky 714 = size(tz )  \\ne  nz+kz 715 = size(tq )  \\ne  nq+kq 800 = size(x)  \\ne  size(bcoef,1) 801 = size(y)  \\ne  size(bcoef,2) 802 = size(z)  \\ne  size(bcoef,3) 803 = size(q)  \\ne  size(bcoef,4) Source Code db4ink Source Code pure subroutine db4ink ( x , nx , y , ny , z , nz , q , nq ,& fcn ,& kx , ky , kz , kq ,& iknot ,& tx , ty , tz , tq ,& bcoef , iflag ) implicit none integer , intent ( in ) :: nx !! number of x abcissae (  \\ge 3  ) integer , intent ( in ) :: ny !! number of y abcissae (  \\ge 3  ) integer , intent ( in ) :: nz !! number of z abcissae (  \\ge 3  ) integer , intent ( in ) :: nq !! number of q abcissae (  \\ge 3  ) integer , intent ( in ) :: kx !! the order of spline pieces in x !! (  2 \\le k_x < n_x  ). !! (order = polynomial degree + 1) integer , intent ( in ) :: ky !! the order of spline pieces in y !! (  2 \\le k_y < n_y  ). !! (order = polynomial degree + 1) integer , intent ( in ) :: kz !! the order of spline pieces in z !! (  2 \\le k_z < n_z  ). !! (order = polynomial degree + 1) integer , intent ( in ) :: kq !! the order of spline pieces in q !! (  2 \\le k_q < n_q  ). !! (order = polynomial degree + 1) real ( wp ), dimension (:), intent ( in ) :: x !! `(nx)` array of x abcissae. must be strictly increasing. real ( wp ), dimension (:), intent ( in ) :: y !! `(ny)` array of y abcissae. must be strictly increasing. real ( wp ), dimension (:), intent ( in ) :: z !! `(nz)` array of z abcissae. must be strictly increasing. real ( wp ), dimension (:), intent ( in ) :: q !! `(nq)` array of q abcissae. must be strictly increasing. real ( wp ), dimension (:,:,:,:), intent ( in ) :: fcn !! `(nx,ny,nz,nq)` matrix of function values to interpolate. `fcn(i,j,k,q)` should !! contain the function value at the point (`x(i)`,`y(j)`,`z(k)`,`q(l)`) integer , intent ( in ) :: iknot !! knot sequence flag: !! !! * 0 = knot sequence chosen by [[db4ink]]. !! * 1 = knot sequence chosen by user. real ( wp ), dimension (:), intent ( inout ) :: tx !! The `(nx+kx)` knots in the x direction for the spline interpolant. !! !! * If `iknot=0` these are chosen by [[db4ink]]. !! * If `iknot=1` these are specified by the user. !! !! Must be non-decreasing. real ( wp ), dimension (:), intent ( inout ) :: ty !! The `(ny+ky)` knots in the y direction for the spline interpolant. !! !! * If `iknot=0` these are chosen by [[db4ink]]. !! * If `iknot=1` these are specified by the user. !! !! Must be non-decreasing. real ( wp ), dimension (:), intent ( inout ) :: tz !! The `(nz+kz)` knots in the z direction for the spline interpolant. !! !! * If `iknot=0` these are chosen by [[db4ink]]. !! * If `iknot=1` these are specified by the user. !! !! Must be non-decreasing. real ( wp ), dimension (:), intent ( inout ) :: tq !! The `(nq+kq)` knots in the q direction for the spline interpolant. !! !! * If `iknot=0` these are chosen by [[db4ink]]. !! * If `iknot=1` these are specified by the user. !! !! Must be non-decreasing. real ( wp ), dimension (:,:,:,:), intent ( out ) :: bcoef !! `(nx,ny,nz,nq)` matrix of coefficients of the b-spline interpolant. integer , intent ( out ) :: iflag !! *  0 = successful execution. !! *  2 = `iknot` out of range. !! *  3 = `nx` out of range. !! *  4 = `kx` out of range. !! *  5 = `x` not strictly increasing. !! *  6 = `tx` not non-decreasing. !! *  7 = `ny` out of range. !! *  8 = `ky` out of range. !! *  9 = `y` not strictly increasing. !! * 10 = `ty` not non-decreasing. !! * 11 = `nz` out of range. !! * 12 = `kz` out of range. !! * 13 = `z` not strictly increasing. !! * 14 = `tz` not non-decreasing. !! * 15 = `nq` out of range. !! * 16 = `kq` out of range. !! * 17 = `q` not strictly increasing. !! * 18 = `tq` not non-decreasing. !! * 700 = `size(x)`   \\ne  `size(fcn,1)` !! * 701 = `size(y)`   \\ne  `size(fcn,2)` !! * 702 = `size(z)`   \\ne  `size(fcn,3)` !! * 703 = `size(q)`   \\ne  `size(fcn,4)` !! * 706 = `size(x)`   \\ne  `nx` !! * 707 = `size(y)`   \\ne  `ny` !! * 708 = `size(z)`   \\ne  `nz` !! * 709 = `size(q)`   \\ne  `nq` !! * 712 = `size(tx`)  \\ne  `nx+kx` !! * 713 = `size(ty`)  \\ne  `ny+ky` !! * 714 = `size(tz`)  \\ne  `nz+kz` !! * 715 = `size(tq`)  \\ne  `nq+kq` !! * 800 = `size(x)`   \\ne  `size(bcoef,1)` !! * 801 = `size(y)`   \\ne  `size(bcoef,2)` !! * 802 = `size(z)`   \\ne  `size(bcoef,3)` !! * 803 = `size(q)`   \\ne  `size(bcoef,4)` real ( wp ), dimension ( nx * ny * nz * nq ) :: temp real ( wp ), dimension ( max ( 2 * kx * ( nx + 1 ), 2 * ky * ( ny + 1 ), 2 * kz * ( nz + 1 ), 2 * kq * ( nq + 1 ))) :: work logical :: status_ok ! check validity of input call check_inputs ( 'db4ink' ,& iknot ,& iflag ,& nx = nx , ny = ny , nz = nz , nq = nq ,& kx = kx , ky = ky , kz = kz , kq = kq ,& x = x , y = y , z = z , q = q ,& tx = tx , ty = ty , tz = tz , tq = tq ,& f4 = fcn ,& bcoef4 = bcoef ,& status_ok = status_ok ) if ( status_ok ) then ! choose knots if ( iknot == 0 ) then call dbknot ( x , nx , kx , tx ) call dbknot ( y , ny , ky , ty ) call dbknot ( z , nz , kz , tz ) call dbknot ( q , nq , kq , tq ) end if ! construct b-spline coefficients call dbtpcf ( x , nx , fcn , nx , ny * nz * nq , tx , kx , temp , work , iflag ) if ( iflag == 0 ) call dbtpcf ( y , ny , temp , ny , nx * nz * nq , ty , ky , bcoef , work , iflag ) if ( iflag == 0 ) call dbtpcf ( z , nz , bcoef , nz , nx * ny * nq , tz , kz , temp , work , iflag ) if ( iflag == 0 ) call dbtpcf ( q , nq , temp , nq , nx * ny * nz , tq , kq , bcoef , work , iflag ) end if end subroutine db4ink","tags":"","loc":"proc/db4ink.html","title":"db4ink â€“ bspline-fortran"},{"text":"public pure subroutine db4val(xval, yval, zval, qval, idx, idy, idz, idq, tx, ty, tz, tq, nx, ny, nz, nq, kx, ky, kz, kq, bcoef, f, iflag, inbvx, inbvy, inbvz, inbvq, iloy, iloz, iloq, extrap) Evaluates the tensor product piecewise polynomial\n  interpolant constructed by the routine db4ink or one of its\n  derivatives at the point ( xval , yval , zval , qval ). To evaluate the\n  interpolant itself, set idx=idy=idz=idq=0 , to evaluate the first\n  partial with respect to x , set idx=1,idy=idz=idq=0 , and so on. See db3val header for more information. History Jacob Williams, 2/24/2015 : Created this routine. Arguments Type Intent Optional Attributes Name real(kind=wp), intent(in) :: xval x coordinate of evaluation point. real(kind=wp), intent(in) :: yval y coordinate of evaluation point. real(kind=wp), intent(in) :: zval z coordinate of evaluation point. real(kind=wp), intent(in) :: qval q coordinate of evaluation point. integer, intent(in) :: idx x derivative of piecewise polynomial to evaluate. integer, intent(in) :: idy y derivative of piecewise polynomial to evaluate. integer, intent(in) :: idz z derivative of piecewise polynomial to evaluate. integer, intent(in) :: idq q derivative of piecewise polynomial to evaluate. real(kind=wp), intent(in), dimension(nx+kx) :: tx sequence of knots defining the piecewise polynomial\n in the x direction. (same as in last call to db4ink ) real(kind=wp), intent(in), dimension(ny+ky) :: ty sequence of knots defining the piecewise polynomial\n in the y direction. (same as in last call to db4ink ) real(kind=wp), intent(in), dimension(nz+kz) :: tz sequence of knots defining the piecewise polynomial\n in the z direction. (same as in last call to db4ink ) real(kind=wp), intent(in), dimension(nq+kq) :: tq sequence of knots defining the piecewise polynomial\n in the q direction. (same as in last call to db4ink ) integer, intent(in) :: nx the number of interpolation points in x.\n (same as in last call to db4ink ) integer, intent(in) :: ny the number of interpolation points in y.\n (same as in last call to db4ink ) integer, intent(in) :: nz the number of interpolation points in z.\n (same as in last call to db4ink ) integer, intent(in) :: nq the number of interpolation points in q.\n (same as in last call to db4ink ) integer, intent(in) :: kx order of polynomial pieces in x.\n (same as in last call to db4ink ) integer, intent(in) :: ky order of polynomial pieces in y.\n (same as in last call to db4ink ) integer, intent(in) :: kz order of polynomial pieces in z.\n (same as in last call to db4ink ) integer, intent(in) :: kq order of polynomial pieces in q.\n (same as in last call to db4ink ) real(kind=wp), intent(in), dimension(nx,ny,nz,nq) :: bcoef the b-spline coefficients computed by db4ink . real(kind=wp), intent(out) :: f interpolated value integer, intent(out) :: iflag status flag:  = 0    : no errors  \\ne 0  : error integer, intent(inout) :: inbvx initialization parameter which must be set\n to 1 the first time this routine is called,\n and must not be changed by the user. integer, intent(inout) :: inbvy initialization parameter which must be set\n to 1 the first time this routine is called,\n and must not be changed by the user. integer, intent(inout) :: inbvz initialization parameter which must be set\n to 1 the first time this routine is called,\n and must not be changed by the user. integer, intent(inout) :: inbvq initialization parameter which must be set\n to 1 the first time this routine is called,\n and must not be changed by the user. integer, intent(inout) :: iloy initialization parameter which must be set\n to 1 the first time this routine is called,\n and must not be changed by the user. integer, intent(inout) :: iloz initialization parameter which must be set\n to 1 the first time this routine is called,\n and must not be changed by the user. integer, intent(inout) :: iloq initialization parameter which must be set\n to 1 the first time this routine is called,\n and must not be changed by the user. logical, intent(in), optional :: extrap if extrapolation is allowed\n (if not present, default is False) Source Code db4val Source Code pure subroutine db4val ( xval , yval , zval , qval ,& idx , idy , idz , idq ,& tx , ty , tz , tq ,& nx , ny , nz , nq ,& kx , ky , kz , kq ,& bcoef , f , iflag ,& inbvx , inbvy , inbvz , inbvq ,& iloy , iloz , iloq , extrap ) implicit none integer , intent ( in ) :: idx !! x derivative of piecewise polynomial to evaluate. integer , intent ( in ) :: idy !! y derivative of piecewise polynomial to evaluate. integer , intent ( in ) :: idz !! z derivative of piecewise polynomial to evaluate. integer , intent ( in ) :: idq !! q derivative of piecewise polynomial to evaluate. integer , intent ( in ) :: nx !! the number of interpolation points in x. !! (same as in last call to [[db4ink]]) integer , intent ( in ) :: ny !! the number of interpolation points in y. !! (same as in last call to [[db4ink]]) integer , intent ( in ) :: nz !! the number of interpolation points in z. !! (same as in last call to [[db4ink]]) integer , intent ( in ) :: nq !! the number of interpolation points in q. !! (same as in last call to [[db4ink]]) integer , intent ( in ) :: kx !! order of polynomial pieces in x. !! (same as in last call to [[db4ink]]) integer , intent ( in ) :: ky !! order of polynomial pieces in y. !! (same as in last call to [[db4ink]]) integer , intent ( in ) :: kz !! order of polynomial pieces in z. !! (same as in last call to [[db4ink]]) integer , intent ( in ) :: kq !! order of polynomial pieces in q. !! (same as in last call to [[db4ink]]) real ( wp ), intent ( in ) :: xval !! x coordinate of evaluation point. real ( wp ), intent ( in ) :: yval !! y coordinate of evaluation point. real ( wp ), intent ( in ) :: zval !! z coordinate of evaluation point. real ( wp ), intent ( in ) :: qval !! q coordinate of evaluation point. real ( wp ), dimension ( nx + kx ), intent ( in ) :: tx !! sequence of knots defining the piecewise polynomial !! in the x direction. (same as in last call to [[db4ink]]) real ( wp ), dimension ( ny + ky ), intent ( in ) :: ty !! sequence of knots defining the piecewise polynomial !! in the y direction. (same as in last call to [[db4ink]]) real ( wp ), dimension ( nz + kz ), intent ( in ) :: tz !! sequence of knots defining the piecewise polynomial !! in the z direction. (same as in last call to [[db4ink]]) real ( wp ), dimension ( nq + kq ), intent ( in ) :: tq !! sequence of knots defining the piecewise polynomial !! in the q direction. (same as in last call to [[db4ink]]) real ( wp ), dimension ( nx , ny , nz , nq ), intent ( in ) :: bcoef !! the b-spline coefficients computed by [[db4ink]]. real ( wp ), intent ( out ) :: f !! interpolated value integer , intent ( out ) :: iflag !! status flag: !! !! *  = 0    : no errors !! *  \\ne 0  : error integer , intent ( inout ) :: inbvx !! initialization parameter which must be set !! to 1 the first time this routine is called, !! and must not be changed by the user. integer , intent ( inout ) :: inbvy !! initialization parameter which must be set !! to 1 the first time this routine is called, !! and must not be changed by the user. integer , intent ( inout ) :: inbvz !! initialization parameter which must be set !! to 1 the first time this routine is called, !! and must not be changed by the user. integer , intent ( inout ) :: inbvq !! initialization parameter which must be set !! to 1 the first time this routine is called, !! and must not be changed by the user. integer , intent ( inout ) :: iloy !! initialization parameter which must be set !! to 1 the first time this routine is called, !! and must not be changed by the user. integer , intent ( inout ) :: iloz !! initialization parameter which must be set !! to 1 the first time this routine is called, !! and must not be changed by the user. integer , intent ( inout ) :: iloq !! initialization parameter which must be set !! to 1 the first time this routine is called, !! and must not be changed by the user. logical , intent ( in ), optional :: extrap !! if extrapolation is allowed !! (if not present, default is False) real ( wp ), dimension ( ky , kz , kq ) :: temp1 real ( wp ), dimension ( kz , kq ) :: temp2 real ( wp ), dimension ( kq ) :: temp3 real ( wp ), dimension ( 3 * max ( kx , ky , kz , kq )) :: work integer :: lefty , leftz , leftq , mflag ,& kcoly , kcolz , kcolq , j , k , q f = 0.0_wp iflag = check_value ( xval , tx , 1 , extrap ); if ( iflag /= 0 ) return iflag = check_value ( yval , ty , 2 , extrap ); if ( iflag /= 0 ) return iflag = check_value ( zval , tz , 3 , extrap ); if ( iflag /= 0 ) return iflag = check_value ( qval , tq , 4 , extrap ); if ( iflag /= 0 ) return iflag = - 1 call dintrv ( ty , ny + ky , yval , iloy , lefty , mflag , extrap ); if ( mflag /= 0 ) return call dintrv ( tz , nz + kz , zval , iloz , leftz , mflag , extrap ); if ( mflag /= 0 ) return call dintrv ( tq , nq + kq , qval , iloq , leftq , mflag , extrap ); if ( mflag /= 0 ) return iflag = 0 ! x -> y, z, q kcolq = leftq - kq do q = 1 , kq kcolq = kcolq + 1 kcolz = leftz - kz do k = 1 , kz kcolz = kcolz + 1 kcoly = lefty - ky do j = 1 , ky kcoly = kcoly + 1 call dbvalu ( tx , bcoef (:, kcoly , kcolz , kcolq ),& nx , kx , idx , xval , inbvx , work , iflag ,& temp1 ( j , k , q ), extrap ) if ( iflag /= 0 ) return end do end do end do ! y -> z, q kcoly = lefty - ky + 1 do q = 1 , kq do k = 1 , kz call dbvalu ( ty ( kcoly :), temp1 (:, k , q ),& ky , ky , idy , yval , inbvy , work , iflag ,& temp2 ( k , q ), extrap ) if ( iflag /= 0 ) return end do end do ! z -> q kcolz = leftz - kz + 1 do q = 1 , kq call dbvalu ( tz ( kcolz :), temp2 (:, q ),& kz , kz , idz , zval , inbvz , work , iflag ,& temp3 ( q ), extrap ) if ( iflag /= 0 ) return end do ! q kcolq = leftq - kq + 1 call dbvalu ( tq ( kcolq :), temp3 , kq , kq , idq , qval , inbvq , work , iflag , f , extrap ) end subroutine db4val","tags":"","loc":"proc/db4val.html","title":"db4val â€“ bspline-fortran"},{"text":"public pure subroutine db5ink(x, nx, y, ny, z, nz, q, nq, r, nr, fcn, kx, ky, kz, kq, kr, iknot, tx, ty, tz, tq, tr, bcoef, iflag) Determines the parameters of a function that interpolates\n the five-dimensional gridded data:  [x(i),y(j),z(k),q(l),r(m),\\mathrm{fcn}(i,j,k,l,m)]  for:  i=1,..,n_x ~\\mathrm{and}~ j=1,..,n_y, ~\\mathrm{and}~ k=1,..,n_z,\n    ~\\mathrm{and}~ l=1,..,n_q, ~\\mathrm{and}~ m=1,..,n_r  The interpolating function and its derivatives may subsequently be evaluated\n by the function db5val . See db3ink header for more details. History Jacob Williams, 2/24/2015 : Created this routine. Arguments Type Intent Optional Attributes Name real(kind=wp), intent(in), dimension(:) :: x (nx) array of x abcissae. must be strictly increasing. integer, intent(in) :: nx number of x abcissae (  \\ge 3  ) real(kind=wp), intent(in), dimension(:) :: y (ny) array of y abcissae. must be strictly increasing. integer, intent(in) :: ny number of y abcissae (  \\ge 3  ) real(kind=wp), intent(in), dimension(:) :: z (nz) array of z abcissae. must be strictly increasing. integer, intent(in) :: nz number of z abcissae (  \\ge 3  ) real(kind=wp), intent(in), dimension(:) :: q (nq) array of q abcissae. must be strictly increasing. integer, intent(in) :: nq number of q abcissae (  \\ge 3  ) real(kind=wp), intent(in), dimension(:) :: r (nr) array of r abcissae. must be strictly increasing. integer, intent(in) :: nr number of r abcissae (  \\ge 3  ) real(kind=wp), intent(in), dimension(:,:,:,:,:) :: fcn (nx,ny,nz,nq,nr) matrix of function values to interpolate. fcn(i,j,k,q,r) should\n contain the function value at the point ( x(i) , y(j) , z(k) , q(l) , r(m) ) integer, intent(in) :: kx the order of spline pieces in x\n (  2 \\le k_x < n_x  ).\n (order = polynomial degree + 1) integer, intent(in) :: ky the order of spline pieces in y\n (  2 \\le k_y < n_y  ).\n (order = polynomial degree + 1) integer, intent(in) :: kz the order of spline pieces in z\n (  2 \\le k_z < n_z  ).\n (order = polynomial degree + 1) integer, intent(in) :: kq the order of spline pieces in q\n (  2 \\le k_q < n_q  ).\n (order = polynomial degree + 1) integer, intent(in) :: kr the order of spline pieces in r\n (  2 \\le k_r < n_r  ).\n (order = polynomial degree + 1) integer, intent(in) :: iknot knot sequence flag: 0 = knot sequence chosen by db5ink . 1 = knot sequence chosen by user. real(kind=wp), intent(inout), dimension(:) :: tx The (nx+kx) knots in the x direction for the spline interpolant. If iknot=0 these are chosen by db5ink . If iknot=1 these are specified by the user. Must be non-decreasing. real(kind=wp), intent(inout), dimension(:) :: ty The (ny+ky) knots in the y direction for the spline interpolant. If iknot=0 these are chosen by db5ink . If iknot=1 these are specified by the user. Must be non-decreasing. real(kind=wp), intent(inout), dimension(:) :: tz The (nz+kz) knots in the z direction for the spline interpolant. If iknot=0 these are chosen by db5ink . If iknot=1 these are specified by the user. Must be non-decreasing. real(kind=wp), intent(inout), dimension(:) :: tq The (nq+kq) knots in the q direction for the spline interpolant. If iknot=0 these are chosen by db5ink . If iknot=1 these are specified by the user. Must be non-decreasing. real(kind=wp), intent(inout), dimension(:) :: tr The (nr+kr) knots in the r direction for the spline interpolant. If iknot=0 these are chosen by db5ink . If iknot=1 these are specified by the user. Must be non-decreasing. real(kind=wp), intent(out), dimension(:,:,:,:,:) :: bcoef (nx,ny,nz,nq,nr) matrix of coefficients of the b-spline interpolant. integer, intent(out) :: iflag 0 = successful execution. 2 = iknot out of range. 3 = nx out of range. 4 = kx out of range. 5 = x not strictly increasing. 6 = tx not non-decreasing. 7 = ny out of range. 8 = ky out of range. 9 = y not strictly increasing. 10 = ty not non-decreasing. 11 = nz out of range. 12 = kz out of range. 13 = z not strictly increasing. 14 = tz not non-decreasing. 15 = nq out of range. 16 = kq out of range. 17 = q not strictly increasing. 18 = tq not non-decreasing. 19 = nr out of range. 20 = kr out of range. 21 = r not strictly increasing. 22 = tr not non-decreasing. 700 = size(x)  \\ne  size(fcn,1) 701 = size(y)  \\ne  size(fcn,2) 702 = size(z)  \\ne  size(fcn,3) 703 = size(q)  \\ne  size(fcn,4) 704 = size(r)  \\ne  size(fcn,5) 706 = size(x)  \\ne  nx 707 = size(y)  \\ne  ny 708 = size(z)  \\ne  nz 709 = size(q)  \\ne  nq 710 = size(r)  \\ne  nr 712 = size(tx)  \\ne  nx+kx 713 = size(ty)  \\ne  ny+ky 714 = size(tz)  \\ne  nz+kz 715 = size(tq)  \\ne  nq+kq 716 = size(tr)  \\ne  nr+kr 800 = size(x)  \\ne  size(bcoef,1) 801 = size(y)  \\ne  size(bcoef,2) 802 = size(z)  \\ne  size(bcoef,3) 803 = size(q)  \\ne  size(bcoef,4) 804 = size(r)  \\ne  size(bcoef,5) Source Code db5ink Source Code pure subroutine db5ink ( x , nx , y , ny , z , nz , q , nq , r , nr ,& fcn ,& kx , ky , kz , kq , kr ,& iknot ,& tx , ty , tz , tq , tr ,& bcoef , iflag ) implicit none integer , intent ( in ) :: nx !! number of x abcissae (  \\ge 3  ) integer , intent ( in ) :: ny !! number of y abcissae (  \\ge 3  ) integer , intent ( in ) :: nz !! number of z abcissae (  \\ge 3  ) integer , intent ( in ) :: nq !! number of q abcissae (  \\ge 3  ) integer , intent ( in ) :: nr !! number of r abcissae (  \\ge 3  ) integer , intent ( in ) :: kx !! the order of spline pieces in x !! (  2 \\le k_x < n_x  ). !! (order = polynomial degree + 1) integer , intent ( in ) :: ky !! the order of spline pieces in y !! (  2 \\le k_y < n_y  ). !! (order = polynomial degree + 1) integer , intent ( in ) :: kz !! the order of spline pieces in z !! (  2 \\le k_z < n_z  ). !! (order = polynomial degree + 1) integer , intent ( in ) :: kq !! the order of spline pieces in q !! (  2 \\le k_q < n_q  ). !! (order = polynomial degree + 1) integer , intent ( in ) :: kr !! the order of spline pieces in r !! (  2 \\le k_r < n_r  ). !! (order = polynomial degree + 1) real ( wp ), dimension (:), intent ( in ) :: x !! `(nx)` array of x abcissae. must be strictly increasing. real ( wp ), dimension (:), intent ( in ) :: y !! `(ny)` array of y abcissae. must be strictly increasing. real ( wp ), dimension (:), intent ( in ) :: z !! `(nz)` array of z abcissae. must be strictly increasing. real ( wp ), dimension (:), intent ( in ) :: q !! `(nq)` array of q abcissae. must be strictly increasing. real ( wp ), dimension (:), intent ( in ) :: r !! `(nr)` array of r abcissae. must be strictly increasing. real ( wp ), dimension (:,:,:,:,:), intent ( in ) :: fcn !! `(nx,ny,nz,nq,nr)` matrix of function values to interpolate. `fcn(i,j,k,q,r)` should !! contain the function value at the point (`x(i)`,`y(j)`,`z(k)`,`q(l)`,`r(m)`) integer , intent ( in ) :: iknot !! knot sequence flag: !! !! * 0 = knot sequence chosen by [[db5ink]]. !! * 1 = knot sequence chosen by user. real ( wp ), dimension (:), intent ( inout ) :: tx !! The `(nx+kx)` knots in the x direction for the spline interpolant. !! !! * If `iknot=0` these are chosen by [[db5ink]]. !! * If `iknot=1` these are specified by the user. !! !! Must be non-decreasing. real ( wp ), dimension (:), intent ( inout ) :: ty !! The `(ny+ky)` knots in the y direction for the spline interpolant. !! !! * If `iknot=0` these are chosen by [[db5ink]]. !! * If `iknot=1` these are specified by the user. !! !! Must be non-decreasing. real ( wp ), dimension (:), intent ( inout ) :: tz !! The `(nz+kz)` knots in the z direction for the spline interpolant. !! !! * If `iknot=0` these are chosen by [[db5ink]]. !! * If `iknot=1` these are specified by the user. !! !! Must be non-decreasing. real ( wp ), dimension (:), intent ( inout ) :: tq !! The `(nq+kq)` knots in the q direction for the spline interpolant. !! !! * If `iknot=0` these are chosen by [[db5ink]]. !! * If `iknot=1` these are specified by the user. !! !! Must be non-decreasing. real ( wp ), dimension (:), intent ( inout ) :: tr !! The `(nr+kr)` knots in the r direction for the spline interpolant. !! !! * If `iknot=0` these are chosen by [[db5ink]]. !! * If `iknot=1` these are specified by the user. !! !! Must be non-decreasing. real ( wp ), dimension (:,:,:,:,:), intent ( out ) :: bcoef !! `(nx,ny,nz,nq,nr)` matrix of coefficients of the b-spline interpolant. integer , intent ( out ) :: iflag !! *  0 = successful execution. !! *  2 = `iknot` out of range. !! *  3 = `nx` out of range. !! *  4 = `kx` out of range. !! *  5 = `x` not strictly increasing. !! *  6 = `tx` not non-decreasing. !! *  7 = `ny` out of range. !! *  8 = `ky` out of range. !! *  9 = `y` not strictly increasing. !! * 10 = `ty` not non-decreasing. !! * 11 = `nz` out of range. !! * 12 = `kz` out of range. !! * 13 = `z` not strictly increasing. !! * 14 = `tz` not non-decreasing. !! * 15 = `nq` out of range. !! * 16 = `kq` out of range. !! * 17 = `q` not strictly increasing. !! * 18 = `tq` not non-decreasing. !! * 19 = `nr` out of range. !! * 20 = `kr` out of range. !! * 21 = `r` not strictly increasing. !! * 22 = `tr` not non-decreasing. !! * 700 = `size(x)`   \\ne  `size(fcn,1)` !! * 701 = `size(y)`   \\ne  `size(fcn,2)` !! * 702 = `size(z)`   \\ne  `size(fcn,3)` !! * 703 = `size(q)`   \\ne  `size(fcn,4)` !! * 704 = `size(r)`   \\ne  `size(fcn,5)` !! * 706 = `size(x)`   \\ne  `nx` !! * 707 = `size(y)`   \\ne  `ny` !! * 708 = `size(z)`   \\ne  `nz` !! * 709 = `size(q)`   \\ne  `nq` !! * 710 = `size(r)`   \\ne  `nr` !! * 712 = `size(tx)`  \\ne  `nx+kx` !! * 713 = `size(ty)`  \\ne  `ny+ky` !! * 714 = `size(tz)`  \\ne  `nz+kz` !! * 715 = `size(tq)`  \\ne  `nq+kq` !! * 716 = `size(tr)`  \\ne  `nr+kr` !! * 800 = `size(x)`   \\ne  `size(bcoef,1)` !! * 801 = `size(y)`   \\ne  `size(bcoef,2)` !! * 802 = `size(z)`   \\ne  `size(bcoef,3)` !! * 803 = `size(q)`   \\ne  `size(bcoef,4)` !! * 804 = `size(r)`   \\ne  `size(bcoef,5)` real ( wp ), dimension ( nx * ny * nz * nq * nr ) :: temp real ( wp ), dimension ( max ( 2 * kx * ( nx + 1 ),& 2 * ky * ( ny + 1 ),& 2 * kz * ( nz + 1 ),& 2 * kq * ( nq + 1 ),& 2 * kr * ( nr + 1 ) )) :: work logical :: status_ok !  check validity of input call check_inputs ( 'db5ink' ,& iknot ,& iflag ,& nx = nx , ny = ny , nz = nz , nq = nq , nr = nr ,& kx = kx , ky = ky , kz = kz , kq = kq , kr = kr ,& x = x , y = y , z = z , q = q , r = r ,& tx = tx , ty = ty , tz = tz , tq = tq , tr = tr ,& f5 = fcn ,& bcoef5 = bcoef ,& status_ok = status_ok ) if ( status_ok ) then !  choose knots if ( iknot == 0 ) then call dbknot ( x , nx , kx , tx ) call dbknot ( y , ny , ky , ty ) call dbknot ( z , nz , kz , tz ) call dbknot ( q , nq , kq , tq ) call dbknot ( r , nr , kr , tr ) end if ! copy fcn to work in packed for dbtpcf temp ( 1 : nx * ny * nz * nq * nr ) = reshape ( fcn , [ nx * ny * nz * nq * nr ] ) !  construct b-spline coefficients call dbtpcf ( x , nx , temp , nx , ny * nz * nq * nr , tx , kx , bcoef , work , iflag ) if ( iflag == 0 ) call dbtpcf ( y , ny , bcoef , ny , nx * nz * nq * nr , ty , ky , temp , work , iflag ) if ( iflag == 0 ) call dbtpcf ( z , nz , temp , nz , nx * ny * nq * nr , tz , kz , bcoef , work , iflag ) if ( iflag == 0 ) call dbtpcf ( q , nq , bcoef , nq , nx * ny * nz * nr , tq , kq , temp , work , iflag ) if ( iflag == 0 ) call dbtpcf ( r , nr , temp , nr , nx * ny * nz * nq , tr , kr , bcoef , work , iflag ) end if end subroutine db5ink","tags":"","loc":"proc/db5ink.html","title":"db5ink â€“ bspline-fortran"},{"text":"public pure subroutine db5val(xval, yval, zval, qval, rval, idx, idy, idz, idq, idr, tx, ty, tz, tq, tr, nx, ny, nz, nq, nr, kx, ky, kz, kq, kr, bcoef, f, iflag, inbvx, inbvy, inbvz, inbvq, inbvr, iloy, iloz, iloq, ilor, extrap) Evaluates the tensor product piecewise polynomial\n  interpolant constructed by the routine db5ink or one of its\n  derivatives at the point ( xval , yval , zval , qval , rval ). To evaluate the\n  interpolant itself, set idx=idy=idz=idq=idr=0 , to evaluate the first\n  partial with respect to x , set idx=1,idy=idz=idq=idr=0, and so on. See db3val header for more information. History Jacob Williams, 2/24/2015 : Created this routine. Arguments Type Intent Optional Attributes Name real(kind=wp), intent(in) :: xval x coordinate of evaluation point. real(kind=wp), intent(in) :: yval y coordinate of evaluation point. real(kind=wp), intent(in) :: zval z coordinate of evaluation point. real(kind=wp), intent(in) :: qval q coordinate of evaluation point. real(kind=wp), intent(in) :: rval r coordinate of evaluation point. integer, intent(in) :: idx x derivative of piecewise polynomial to evaluate. integer, intent(in) :: idy y derivative of piecewise polynomial to evaluate. integer, intent(in) :: idz z derivative of piecewise polynomial to evaluate. integer, intent(in) :: idq q derivative of piecewise polynomial to evaluate. integer, intent(in) :: idr r derivative of piecewise polynomial to evaluate. real(kind=wp), intent(in), dimension(nx+kx) :: tx sequence of knots defining the piecewise polynomial\n in the x direction.\n (same as in last call to db5ink ) real(kind=wp), intent(in), dimension(ny+ky) :: ty sequence of knots defining the piecewise polynomial\n in the y direction.\n (same as in last call to db5ink ) real(kind=wp), intent(in), dimension(nz+kz) :: tz sequence of knots defining the piecewise polynomial\n in the z direction.\n (same as in last call to db5ink ) real(kind=wp), intent(in), dimension(nq+kq) :: tq sequence of knots defining the piecewise polynomial\n in the q direction.\n (same as in last call to db5ink ) real(kind=wp), intent(in), dimension(nr+kr) :: tr sequence of knots defining the piecewise polynomial\n in the r direction.\n (same as in last call to db5ink ) integer, intent(in) :: nx the number of interpolation points in x.\n (same as in last call to db5ink ) integer, intent(in) :: ny the number of interpolation points in y.\n (same as in last call to db5ink ) integer, intent(in) :: nz the number of interpolation points in z.\n (same as in last call to db5ink ) integer, intent(in) :: nq the number of interpolation points in q.\n (same as in last call to db5ink ) integer, intent(in) :: nr the number of interpolation points in r.\n (same as in last call to db5ink ) integer, intent(in) :: kx order of polynomial pieces in x.\n (same as in last call to db5ink ) integer, intent(in) :: ky order of polynomial pieces in y.\n (same as in last call to db5ink ) integer, intent(in) :: kz order of polynomial pieces in z.\n (same as in last call to db5ink ) integer, intent(in) :: kq order of polynomial pieces in q.\n (same as in last call to db5ink ) integer, intent(in) :: kr order of polynomial pieces in r.\n (same as in last call to db5ink ) real(kind=wp), intent(in), dimension(nx,ny,nz,nq,nr) :: bcoef the b-spline coefficients computed by db5ink . real(kind=wp), intent(out) :: f interpolated value integer, intent(out) :: iflag status flag:  = 0    : no errors  \\ne 0  : error integer, intent(inout) :: inbvx initialization parameter which must be set\n to 1 the first time this routine is called,\n and must not be changed by the user. integer, intent(inout) :: inbvy initialization parameter which must be set\n to 1 the first time this routine is called,\n and must not be changed by the user. integer, intent(inout) :: inbvz initialization parameter which must be set\n to 1 the first time this routine is called,\n and must not be changed by the user. integer, intent(inout) :: inbvq initialization parameter which must be set\n to 1 the first time this routine is called,\n and must not be changed by the user. integer, intent(inout) :: inbvr initialization parameter which must be set\n to 1 the first time this routine is called,\n and must not be changed by the user. integer, intent(inout) :: iloy initialization parameter which must be set\n to 1 the first time this routine is called,\n and must not be changed by the user. integer, intent(inout) :: iloz initialization parameter which must be set\n to 1 the first time this routine is called,\n and must not be changed by the user. integer, intent(inout) :: iloq initialization parameter which must be set\n to 1 the first time this routine is called,\n and must not be changed by the user. integer, intent(inout) :: ilor initialization parameter which must be set\n to 1 the first time this routine is called,\n and must not be changed by the user. logical, intent(in), optional :: extrap if extrapolation is allowed\n (if not present, default is False) Source Code db5val Source Code pure subroutine db5val ( xval , yval , zval , qval , rval ,& idx , idy , idz , idq , idr ,& tx , ty , tz , tq , tr ,& nx , ny , nz , nq , nr ,& kx , ky , kz , kq , kr ,& bcoef , f , iflag ,& inbvx , inbvy , inbvz , inbvq , inbvr ,& iloy , iloz , iloq , ilor , extrap ) implicit none integer , intent ( in ) :: idx !! x derivative of piecewise polynomial to evaluate. integer , intent ( in ) :: idy !! y derivative of piecewise polynomial to evaluate. integer , intent ( in ) :: idz !! z derivative of piecewise polynomial to evaluate. integer , intent ( in ) :: idq !! q derivative of piecewise polynomial to evaluate. integer , intent ( in ) :: idr !! r derivative of piecewise polynomial to evaluate. integer , intent ( in ) :: nx !! the number of interpolation points in x. !! (same as in last call to [[db5ink]]) integer , intent ( in ) :: ny !! the number of interpolation points in y. !! (same as in last call to [[db5ink]]) integer , intent ( in ) :: nz !! the number of interpolation points in z. !! (same as in last call to [[db5ink]]) integer , intent ( in ) :: nq !! the number of interpolation points in q. !! (same as in last call to [[db5ink]]) integer , intent ( in ) :: nr !! the number of interpolation points in r. !! (same as in last call to [[db5ink]]) integer , intent ( in ) :: kx !! order of polynomial pieces in x. !! (same as in last call to [[db5ink]]) integer , intent ( in ) :: ky !! order of polynomial pieces in y. !! (same as in last call to [[db5ink]]) integer , intent ( in ) :: kz !! order of polynomial pieces in z. !! (same as in last call to [[db5ink]]) integer , intent ( in ) :: kq !! order of polynomial pieces in q. !! (same as in last call to [[db5ink]]) integer , intent ( in ) :: kr !! order of polynomial pieces in r. !! (same as in last call to [[db5ink]]) real ( wp ), intent ( in ) :: xval !! x coordinate of evaluation point. real ( wp ), intent ( in ) :: yval !! y coordinate of evaluation point. real ( wp ), intent ( in ) :: zval !! z coordinate of evaluation point. real ( wp ), intent ( in ) :: qval !! q coordinate of evaluation point. real ( wp ), intent ( in ) :: rval !! r coordinate of evaluation point. real ( wp ), dimension ( nx + kx ), intent ( in ) :: tx !! sequence of knots defining the piecewise polynomial !! in the x direction. !! (same as in last call to [[db5ink]]) real ( wp ), dimension ( ny + ky ), intent ( in ) :: ty !! sequence of knots defining the piecewise polynomial !! in the y direction. !! (same as in last call to [[db5ink]]) real ( wp ), dimension ( nz + kz ), intent ( in ) :: tz !! sequence of knots defining the piecewise polynomial !! in the z direction. !! (same as in last call to [[db5ink]]) real ( wp ), dimension ( nq + kq ), intent ( in ) :: tq !! sequence of knots defining the piecewise polynomial !! in the q direction. !! (same as in last call to [[db5ink]]) real ( wp ), dimension ( nr + kr ), intent ( in ) :: tr !! sequence of knots defining the piecewise polynomial !! in the r direction. !! (same as in last call to [[db5ink]]) real ( wp ), dimension ( nx , ny , nz , nq , nr ), intent ( in ) :: bcoef !! the b-spline coefficients computed by [[db5ink]]. real ( wp ), intent ( out ) :: f !! interpolated value integer , intent ( out ) :: iflag !! status flag: !! !! *  = 0    : no errors !! *  \\ne 0  : error integer , intent ( inout ) :: inbvx !! initialization parameter which must be set !! to 1 the first time this routine is called, !! and must not be changed by the user. integer , intent ( inout ) :: inbvy !! initialization parameter which must be set !! to 1 the first time this routine is called, !! and must not be changed by the user. integer , intent ( inout ) :: inbvz !! initialization parameter which must be set !! to 1 the first time this routine is called, !! and must not be changed by the user. integer , intent ( inout ) :: inbvq !! initialization parameter which must be set !! to 1 the first time this routine is called, !! and must not be changed by the user. integer , intent ( inout ) :: inbvr !! initialization parameter which must be set !! to 1 the first time this routine is called, !! and must not be changed by the user. integer , intent ( inout ) :: iloy !! initialization parameter which must be set !! to 1 the first time this routine is called, !! and must not be changed by the user. integer , intent ( inout ) :: iloz !! initialization parameter which must be set !! to 1 the first time this routine is called, !! and must not be changed by the user. integer , intent ( inout ) :: iloq !! initialization parameter which must be set !! to 1 the first time this routine is called, !! and must not be changed by the user. integer , intent ( inout ) :: ilor !! initialization parameter which must be set !! to 1 the first time this routine is called, !! and must not be changed by the user. logical , intent ( in ), optional :: extrap !! if extrapolation is allowed !! (if not present, default is False) real ( wp ), dimension ( ky , kz , kq , kr ) :: temp1 real ( wp ), dimension ( kz , kq , kr ) :: temp2 real ( wp ), dimension ( kq , kr ) :: temp3 real ( wp ), dimension ( kr ) :: temp4 real ( wp ), dimension ( 3 * max ( kx , ky , kz , kq , kr )) :: work integer :: lefty , leftz , leftq , leftr , mflag ,& kcoly , kcolz , kcolq , kcolr , j , k , q , r f = 0.0_wp iflag = check_value ( xval , tx , 1 , extrap ); if ( iflag /= 0 ) return iflag = check_value ( yval , ty , 2 , extrap ); if ( iflag /= 0 ) return iflag = check_value ( zval , tz , 3 , extrap ); if ( iflag /= 0 ) return iflag = check_value ( qval , tq , 4 , extrap ); if ( iflag /= 0 ) return iflag = check_value ( rval , tr , 5 , extrap ); if ( iflag /= 0 ) return iflag = - 1 call dintrv ( ty , ny + ky , yval , iloy , lefty , mflag , extrap ); if ( mflag /= 0 ) return call dintrv ( tz , nz + kz , zval , iloz , leftz , mflag , extrap ); if ( mflag /= 0 ) return call dintrv ( tq , nq + kq , qval , iloq , leftq , mflag , extrap ); if ( mflag /= 0 ) return call dintrv ( tr , nr + kr , rval , ilor , leftr , mflag , extrap ); if ( mflag /= 0 ) return iflag = 0 ! x -> y, z, q, r kcolr = leftr - kr do r = 1 , kr kcolr = kcolr + 1 kcolq = leftq - kq do q = 1 , kq kcolq = kcolq + 1 kcolz = leftz - kz do k = 1 , kz kcolz = kcolz + 1 kcoly = lefty - ky do j = 1 , ky kcoly = kcoly + 1 call dbvalu ( tx , bcoef (:, kcoly , kcolz , kcolq , kcolr ),& nx , kx , idx , xval , inbvx , work , iflag , temp1 ( j , k , q , r ),& extrap ) if ( iflag /= 0 ) return end do end do end do end do ! y -> z, q, r kcoly = lefty - ky + 1 do r = 1 , kr do q = 1 , kq do k = 1 , kz call dbvalu ( ty ( kcoly :), temp1 (:, k , q , r ), ky , ky , idy , yval , inbvy ,& work , iflag , temp2 ( k , q , r ), extrap ) if ( iflag /= 0 ) return end do end do end do ! z -> q, r kcolz = leftz - kz + 1 do r = 1 , kr do q = 1 , kq call dbvalu ( tz ( kcolz :), temp2 (:, q , r ), kz , kz , idz , zval , inbvz ,& work , iflag , temp3 ( q , r ), extrap ) if ( iflag /= 0 ) return end do end do ! q -> r kcolq = leftq - kq + 1 do r = 1 , kr call dbvalu ( tq ( kcolq :), temp3 (:, r ), kq , kq , idq , qval , inbvq ,& work , iflag , temp4 ( r ), extrap ) if ( iflag /= 0 ) return end do ! r kcolr = leftr - kr + 1 call dbvalu ( tr ( kcolr :), temp4 , kr , kr , idr , rval , inbvr , work , iflag , f , extrap ) end subroutine db5val","tags":"","loc":"proc/db5val.html","title":"db5val â€“ bspline-fortran"},{"text":"public pure subroutine db6ink(x, nx, y, ny, z, nz, q, nq, r, nr, s, ns, fcn, kx, ky, kz, kq, kr, ks, iknot, tx, ty, tz, tq, tr, ts, bcoef, iflag) Determines the parameters of a function that interpolates\n  the six-dimensional gridded data:  [x(i),y(j),z(k),q(l),r(m),s(n),\\mathrm{fcn}(i,j,k,l,m,n)]  for:  i=1,..,n_x, j=1,..,n_y, k=1,..,n_z, l=1,..,n_q, m=1,..,n_r, n=1,..,n_s  the interpolating function and its derivatives may subsequently be evaluated\n  by the function db6val . See db3ink header for more details. History Jacob Williams, 2/24/2015 : Created this routine. Arguments Type Intent Optional Attributes Name real(kind=wp), intent(in), dimension(:) :: x (nx) array of x abcissae.\n must be strictly increasing. integer, intent(in) :: nx number of x abcissae (  \\ge 3  ) real(kind=wp), intent(in), dimension(:) :: y (ny) array of y abcissae.\n must be strictly increasing. integer, intent(in) :: ny number of y abcissae (  \\ge 3  ) real(kind=wp), intent(in), dimension(:) :: z (nz) array of z abcissae.\n must be strictly increasing. integer, intent(in) :: nz number of z abcissae (  \\ge 3  ) real(kind=wp), intent(in), dimension(:) :: q (nq) array of q abcissae.\n must be strictly increasing. integer, intent(in) :: nq number of q abcissae (  \\ge 3  ) real(kind=wp), intent(in), dimension(:) :: r (nr) array of r abcissae.\n must be strictly increasing. integer, intent(in) :: nr number of r abcissae (  \\ge 3  ) real(kind=wp), intent(in), dimension(:) :: s (ns) array of s abcissae.\n must be strictly increasing. integer, intent(in) :: ns number of s abcissae (  \\ge 3  ) real(kind=wp), intent(in), dimension(:,:,:,:,:,:) :: fcn (nx,ny,nz,nq,nr,ns) matrix of function values to interpolate. fcn(i,j,k,q,r,s) should contain the function value\n at the point ( x(i) , y(j) , z(k) , q(l) , r(m) , s(n) ) integer, intent(in) :: kx the order of spline pieces in x\n (  2 \\le k_x < n_x  )\n (order = polynomial degree + 1) integer, intent(in) :: ky the order of spline pieces in y\n (  2 \\le k_y < n_y  )\n (order = polynomial degree + 1) integer, intent(in) :: kz the order of spline pieces in z\n (  2 \\le k_z < n_z  )\n (order = polynomial degree + 1) integer, intent(in) :: kq the order of spline pieces in q\n (  2 \\le k_q < n_q  )\n (order = polynomial degree + 1) integer, intent(in) :: kr the order of spline pieces in r\n (  2 \\le k_r < n_r  )\n (order = polynomial degree + 1) integer, intent(in) :: ks the order of spline pieces in s\n (  2 \\le k_s < n_s  )\n (order = polynomial degree + 1) integer, intent(in) :: iknot knot sequence flag: 0 = knot sequence chosen by db6ink . 1 = knot sequence chosen by user. real(kind=wp), intent(inout), dimension(:) :: tx The (nx+kx) knots in the x direction for the spline interpolant. f iknot=0 these are chosen by db6ink . f iknot=1 these are specified by the user. Must be non-decreasing. real(kind=wp), intent(inout), dimension(:) :: ty The (ny+ky) knots in the y direction for the spline interpolant. If iknot=0 these are chosen by db6ink . If iknot=1 these are specified by the user. Must be non-decreasing. real(kind=wp), intent(inout), dimension(:) :: tz The (nz+kz) knots in the z direction for the spline interpolant. If iknot=0 these are chosen by db6ink . If iknot=1 these are specified by the user. Must be non-decreasing. real(kind=wp), intent(inout), dimension(:) :: tq The (nq+kq) knots in the q direction for the spline interpolant. If iknot=0 these are chosen by db6ink . If iknot=1 these are specified by the user. Must be non-decreasing. real(kind=wp), intent(inout), dimension(:) :: tr The (nr+kr) knots in the r direction for the spline interpolant. If iknot=0 these are chosen by db6ink . If iknot=1 these are specified by the user. Must be non-decreasing. real(kind=wp), intent(inout), dimension(:) :: ts The (ns+ks) knots in the s direction for the spline interpolant. If iknot=0 these are chosen by db6ink . If iknot=1 these are specified by the user. Must be non-decreasing. real(kind=wp), intent(out), dimension(:,:,:,:,:,:) :: bcoef (nx,ny,nz,nq,nr,ns) matrix of coefficients of the b-spline interpolant. integer, intent(out) :: iflag 0 = successful execution. 2 = iknot out of range. 3 = nx out of range. 4 = kx out of range. 5 = x not strictly increasing. 6 = tx not non-decreasing. 7 = ny out of range. 8 = ky out of range. 9 = y not strictly increasing. 10 = ty not non-decreasing. 11 = nz out of range. 12 = kz out of range. 13 = z not strictly increasing. 14 = tz not non-decreasing. 15 = nq out of range. 16 = kq out of range. 17 = q not strictly increasing. 18 = tq not non-decreasing. 19 = nr out of range. 20 = kr out of range. 21 = r not strictly increasing. 22 = tr not non-decreasing. 23 = ns out of range. 24 = ks out of range. 25 = s not strictly increasing. 26 = ts not non-decreasing. 700 = size(x)  \\ne  size(fcn,1) 701 = size(y)  \\ne  size(fcn,2) 702 = size(z)  \\ne  size(fcn,3) 703 = size(q)  \\ne  size(fcn,4) 704 = size(r)  \\ne  size(fcn,5) 705 = size(s)  \\ne  size(fcn,6) 706 = size(x)  \\ne  nx 707 = size(y)  \\ne  ny 708 = size(z)  \\ne  nz 709 = size(q)  \\ne  nq 710 = size(r)  \\ne  nr 711 = size(s)  \\ne  ns 712 = size(tx)  \\ne  nx+kx 713 = size(ty)  \\ne  ny+ky 714 = size(tz)  \\ne  nz+kz 715 = size(tq)  \\ne  nq+kq 716 = size(tr)  \\ne  nr+kr 717 = size(ts)  \\ne  ns+ks 800 = size(x)  \\ne  size(bcoef,1) 801 = size(y)  \\ne  size(bcoef,2) 802 = size(z)  \\ne  size(bcoef,3) 803 = size(q)  \\ne  size(bcoef,4) 804 = size(r)  \\ne  size(bcoef,5) 805 = size(s)  \\ne  size(bcoef,6) Source Code db6ink Source Code pure subroutine db6ink ( x , nx , y , ny , z , nz , q , nq , r , nr , s , ns ,& fcn ,& kx , ky , kz , kq , kr , ks ,& iknot ,& tx , ty , tz , tq , tr , ts ,& bcoef , iflag ) implicit none integer , intent ( in ) :: nx !! number of x abcissae (  \\ge 3  ) integer , intent ( in ) :: ny !! number of y abcissae (  \\ge 3  ) integer , intent ( in ) :: nz !! number of z abcissae (  \\ge 3  ) integer , intent ( in ) :: nq !! number of q abcissae (  \\ge 3  ) integer , intent ( in ) :: nr !! number of r abcissae (  \\ge 3  ) integer , intent ( in ) :: ns !! number of s abcissae (  \\ge 3  ) integer , intent ( in ) :: kx !! the order of spline pieces in x !! (  2 \\le k_x < n_x  ) !! (order = polynomial degree + 1) integer , intent ( in ) :: ky !! the order of spline pieces in y !! (  2 \\le k_y < n_y  ) !! (order = polynomial degree + 1) integer , intent ( in ) :: kz !! the order of spline pieces in z !! (  2 \\le k_z < n_z  ) !! (order = polynomial degree + 1) integer , intent ( in ) :: kq !! the order of spline pieces in q !! (  2 \\le k_q < n_q  ) !! (order = polynomial degree + 1) integer , intent ( in ) :: kr !! the order of spline pieces in r !! (  2 \\le k_r < n_r  ) !! (order = polynomial degree + 1) integer , intent ( in ) :: ks !! the order of spline pieces in s !! (  2 \\le k_s < n_s  ) !! (order = polynomial degree + 1) real ( wp ), dimension (:), intent ( in ) :: x !! `(nx)` array of x abcissae. !! must be strictly increasing. real ( wp ), dimension (:), intent ( in ) :: y !! `(ny)` array of y abcissae. !! must be strictly increasing. real ( wp ), dimension (:), intent ( in ) :: z !! `(nz)` array of z abcissae. !! must be strictly increasing. real ( wp ), dimension (:), intent ( in ) :: q !! `(nq)` array of q abcissae. !! must be strictly increasing. real ( wp ), dimension (:), intent ( in ) :: r !! `(nr)` array of r abcissae. !! must be strictly increasing. real ( wp ), dimension (:), intent ( in ) :: s !! `(ns)` array of s abcissae. !! must be strictly increasing. real ( wp ), dimension (:,:,:,:,:,:), intent ( in ) :: fcn !! `(nx,ny,nz,nq,nr,ns)` matrix of function values to interpolate. !! `fcn(i,j,k,q,r,s)` should contain the function value !! at the point (`x(i)`,`y(j)`,`z(k)`,`q(l)`,`r(m)`,`s(n)`) integer , intent ( in ) :: iknot !! knot sequence flag: !! !! * 0 = knot sequence chosen by [[db6ink]]. !! * 1 = knot sequence chosen by user. real ( wp ), dimension (:), intent ( inout ) :: tx !! The `(nx+kx)` knots in the x direction for the spline interpolant. !! !! * f `iknot=0` these are chosen by [[db6ink]]. !! * f `iknot=1` these are specified by the user. !! !! Must be non-decreasing. real ( wp ), dimension (:), intent ( inout ) :: ty !! The `(ny+ky)` knots in the y direction for the spline interpolant. !! !! * If `iknot=0` these are chosen by [[db6ink]]. !! * If `iknot=1` these are specified by the user. !! !! Must be non-decreasing. real ( wp ), dimension (:), intent ( inout ) :: tz !! The `(nz+kz)` knots in the z direction for the spline interpolant. !! !! * If `iknot=0` these are chosen by [[db6ink]]. !! * If `iknot=1` these are specified by the user. !! !! Must be non-decreasing. real ( wp ), dimension (:), intent ( inout ) :: tq !! The `(nq+kq)` knots in the q direction for the spline interpolant. !! !! * If `iknot=0` these are chosen by [[db6ink]]. !! * If `iknot=1` these are specified by the user. !! !! Must be non-decreasing. real ( wp ), dimension (:), intent ( inout ) :: tr !! The `(nr+kr)` knots in the r direction for the spline interpolant. !! !! * If `iknot=0` these are chosen by [[db6ink]]. !! * If `iknot=1` these are specified by the user. !! !! Must be non-decreasing. real ( wp ), dimension (:), intent ( inout ) :: ts !! The `(ns+ks)` knots in the s direction for the spline interpolant. !! !! * If `iknot=0` these are chosen by [[db6ink]]. !! * If `iknot=1` these are specified by the user. !! !! Must be non-decreasing. real ( wp ), dimension (:,:,:,:,:,:), intent ( out ) :: bcoef !! `(nx,ny,nz,nq,nr,ns)` matrix of coefficients of the b-spline interpolant. integer , intent ( out ) :: iflag !! *  0 = successful execution. !! *  2 = `iknot` out of range. !! *  3 = `nx` out of range. !! *  4 = `kx` out of range. !! *  5 = `x` not strictly increasing. !! *  6 = `tx` not non-decreasing. !! *  7 = `ny` out of range. !! *  8 = `ky` out of range. !! *  9 = `y` not strictly increasing. !! * 10 = `ty` not non-decreasing. !! * 11 = `nz` out of range. !! * 12 = `kz` out of range. !! * 13 = `z` not strictly increasing. !! * 14 = `tz` not non-decreasing. !! * 15 = `nq` out of range. !! * 16 = `kq` out of range. !! * 17 = `q` not strictly increasing. !! * 18 = `tq` not non-decreasing. !! * 19 = `nr` out of range. !! * 20 = `kr` out of range. !! * 21 = `r` not strictly increasing. !! * 22 = `tr` not non-decreasing. !! * 23 = `ns` out of range. !! * 24 = `ks` out of range. !! * 25 = `s` not strictly increasing. !! * 26 = `ts` not non-decreasing. !! * 700 = `size(x) `  \\ne  `size(fcn,1)` !! * 701 = `size(y) `  \\ne  `size(fcn,2)` !! * 702 = `size(z) `  \\ne  `size(fcn,3)` !! * 703 = `size(q) `  \\ne  `size(fcn,4)` !! * 704 = `size(r) `  \\ne  `size(fcn,5)` !! * 705 = `size(s) `  \\ne  `size(fcn,6)` !! * 706 = `size(x) `  \\ne  `nx` !! * 707 = `size(y) `  \\ne  `ny` !! * 708 = `size(z) `  \\ne  `nz` !! * 709 = `size(q) `  \\ne  `nq` !! * 710 = `size(r) `  \\ne  `nr` !! * 711 = `size(s) `  \\ne  `ns` !! * 712 = `size(tx)`  \\ne  `nx+kx` !! * 713 = `size(ty)`  \\ne  `ny+ky` !! * 714 = `size(tz)`  \\ne  `nz+kz` !! * 715 = `size(tq)`  \\ne  `nq+kq` !! * 716 = `size(tr)`  \\ne  `nr+kr` !! * 717 = `size(ts)`  \\ne  `ns+ks` !! * 800 = `size(x) `  \\ne  `size(bcoef,1)` !! * 801 = `size(y) `  \\ne  `size(bcoef,2)` !! * 802 = `size(z) `  \\ne  `size(bcoef,3)` !! * 803 = `size(q) `  \\ne  `size(bcoef,4)` !! * 804 = `size(r) `  \\ne  `size(bcoef,5)` !! * 805 = `size(s) `  \\ne  `size(bcoef,6)` real ( wp ), dimension ( nx * ny * nz * nq * nr * ns ) :: temp real ( wp ), dimension ( max ( 2 * kx * ( nx + 1 ),& 2 * ky * ( ny + 1 ),& 2 * kz * ( nz + 1 ),& 2 * kq * ( nq + 1 ),& 2 * kr * ( nr + 1 ),& 2 * ks * ( ns + 1 ))) :: work logical :: status_ok ! check validity of input call check_inputs ( 'db6ink' ,& iknot ,& iflag ,& nx = nx , ny = ny , nz = nz , nq = nq , nr = nr , ns = ns ,& kx = kx , ky = ky , kz = kz , kq = kq , kr = kr , ks = ks ,& x = x , y = y , z = z , q = q , r = r , s = s ,& tx = tx , ty = ty , tz = tz , tq = tq , tr = tr , ts = ts ,& f6 = fcn ,& bcoef6 = bcoef ,& status_ok = status_ok ) if ( status_ok ) then ! choose knots if ( iknot == 0 ) then call dbknot ( x , nx , kx , tx ) call dbknot ( y , ny , ky , ty ) call dbknot ( z , nz , kz , tz ) call dbknot ( q , nq , kq , tq ) call dbknot ( r , nr , kr , tr ) call dbknot ( s , ns , ks , ts ) end if ! construct b-spline coefficients call dbtpcf ( x , nx , fcn , nx , ny * nz * nq * nr * ns , tx , kx , temp , work , iflag ) if ( iflag == 0 ) call dbtpcf ( y , ny , temp , ny , nx * nz * nq * nr * ns , ty , ky , bcoef , work , iflag ) if ( iflag == 0 ) call dbtpcf ( z , nz , bcoef , nz , nx * ny * nq * nr * ns , tz , kz , temp , work , iflag ) if ( iflag == 0 ) call dbtpcf ( q , nq , temp , nq , nx * ny * nz * nr * ns , tq , kq , bcoef , work , iflag ) if ( iflag == 0 ) call dbtpcf ( r , nr , bcoef , nr , nx * ny * nz * nq * ns , tr , kr , temp , work , iflag ) if ( iflag == 0 ) call dbtpcf ( s , ns , temp , ns , nx * ny * nz * nq * nr , ts , ks , bcoef , work , iflag ) end if end subroutine db6ink","tags":"","loc":"proc/db6ink.html","title":"db6ink â€“ bspline-fortran"},{"text":"public pure subroutine db6val(xval, yval, zval, qval, rval, sval, idx, idy, idz, idq, idr, ids, tx, ty, tz, tq, tr, ts, nx, ny, nz, nq, nr, ns, kx, ky, kz, kq, kr, ks, bcoef, f, iflag, inbvx, inbvy, inbvz, inbvq, inbvr, inbvs, iloy, iloz, iloq, ilor, ilos, extrap) Evaluates the tensor product piecewise polynomial\n  interpolant constructed by the routine db6ink or one of its\n  derivatives at the point ( xval , yval , zval , qval , rval , sval ). To evaluate the\n  interpolant itself, set idx=idy=idz=idq=idr=ids=0 , to evaluate the first\n  partial with respect to x , set idx=1,idy=idz=idq=idr=ids=0 , and so on. See db3val header for more information. History Jacob Williams, 2/24/2015 : Created this routine. Arguments Type Intent Optional Attributes Name real(kind=wp), intent(in) :: xval x coordinate of evaluation point. real(kind=wp), intent(in) :: yval y coordinate of evaluation point. real(kind=wp), intent(in) :: zval z coordinate of evaluation point. real(kind=wp), intent(in) :: qval q coordinate of evaluation point. real(kind=wp), intent(in) :: rval r coordinate of evaluation point. real(kind=wp), intent(in) :: sval s coordinate of evaluation point. integer, intent(in) :: idx x derivative of piecewise polynomial to evaluate. integer, intent(in) :: idy y derivative of piecewise polynomial to evaluate. integer, intent(in) :: idz z derivative of piecewise polynomial to evaluate. integer, intent(in) :: idq q derivative of piecewise polynomial to evaluate. integer, intent(in) :: idr r derivative of piecewise polynomial to evaluate. integer, intent(in) :: ids s derivative of piecewise polynomial to evaluate. real(kind=wp), intent(in), dimension(nx+kx) :: tx sequence of knots defining the piecewise polynomial\n in the x direction.\n (same as in last call to db6ink ) real(kind=wp), intent(in), dimension(ny+ky) :: ty sequence of knots defining the piecewise polynomial\n in the y direction.\n (same as in last call to db6ink ) real(kind=wp), intent(in), dimension(nz+kz) :: tz sequence of knots defining the piecewise polynomial\n in the z direction.\n (same as in last call to db6ink ) real(kind=wp), intent(in), dimension(nq+kq) :: tq sequence of knots defining the piecewise polynomial\n in the q direction.\n (same as in last call to db6ink ) real(kind=wp), intent(in), dimension(nr+kr) :: tr sequence of knots defining the piecewise polynomial\n in the r direction.\n (same as in last call to db6ink ) real(kind=wp), intent(in), dimension(ns+ks) :: ts sequence of knots defining the piecewise polynomial\n in the s direction.\n (same as in last call to db6ink ) integer, intent(in) :: nx the number of interpolation points in x.\n (same as in last call to db6ink ) integer, intent(in) :: ny the number of interpolation points in y.\n (same as in last call to db6ink ) integer, intent(in) :: nz the number of interpolation points in z.\n (same as in last call to db6ink ) integer, intent(in) :: nq the number of interpolation points in q.\n (same as in last call to db6ink ) integer, intent(in) :: nr the number of interpolation points in r.\n (same as in last call to db6ink ) integer, intent(in) :: ns the number of interpolation points in s.\n (same as in last call to db6ink ) integer, intent(in) :: kx order of polynomial pieces in x.\n (same as in last call to db6ink ) integer, intent(in) :: ky order of polynomial pieces in y.\n (same as in last call to db6ink ) integer, intent(in) :: kz order of polynomial pieces in z.\n (same as in last call to db6ink ) integer, intent(in) :: kq order of polynomial pieces in q.\n (same as in last call to db6ink ) integer, intent(in) :: kr order of polynomial pieces in r.\n (same as in last call to db6ink ) integer, intent(in) :: ks order of polynomial pieces in s.\n (same as in last call to db6ink ) real(kind=wp), intent(in), dimension(nx,ny,nz,nq,nr,ns) :: bcoef the b-spline coefficients computed by db6ink . real(kind=wp), intent(out) :: f interpolated value integer, intent(out) :: iflag status flag:  = 0    : no errors  \\ne 0  : error integer, intent(inout) :: inbvx initialization parameter which must be set\n to 1 the first time this routine is called,\n and must not be changed by the user. integer, intent(inout) :: inbvy initialization parameter which must be set\n to 1 the first time this routine is called,\n and must not be changed by the user. integer, intent(inout) :: inbvz initialization parameter which must be set\n to 1 the first time this routine is called,\n and must not be changed by the user. integer, intent(inout) :: inbvq initialization parameter which must be set\n to 1 the first time this routine is called,\n and must not be changed by the user. integer, intent(inout) :: inbvr initialization parameter which must be set\n to 1 the first time this routine is called,\n and must not be changed by the user. integer, intent(inout) :: inbvs initialization parameter which must be set\n to 1 the first time this routine is called,\n and must not be changed by the user. integer, intent(inout) :: iloy initialization parameter which must be set\n to 1 the first time this routine is called,\n and must not be changed by the user. integer, intent(inout) :: iloz initialization parameter which must be set\n to 1 the first time this routine is called,\n and must not be changed by the user. integer, intent(inout) :: iloq initialization parameter which must be set\n to 1 the first time this routine is called,\n and must not be changed by the user. integer, intent(inout) :: ilor initialization parameter which must be set\n to 1 the first time this routine is called,\n and must not be changed by the user. integer, intent(inout) :: ilos initialization parameter which must be set\n to 1 the first time this routine is called,\n and must not be changed by the user. logical, intent(in), optional :: extrap if extrapolation is allowed\n (if not present, default is False) Source Code db6val Source Code pure subroutine db6val ( xval , yval , zval , qval , rval , sval ,& idx , idy , idz , idq , idr , ids ,& tx , ty , tz , tq , tr , ts ,& nx , ny , nz , nq , nr , ns ,& kx , ky , kz , kq , kr , ks ,& bcoef , f , iflag ,& inbvx , inbvy , inbvz , inbvq , inbvr , inbvs ,& iloy , iloz , iloq , ilor , ilos , extrap ) implicit none integer , intent ( in ) :: idx !! x derivative of piecewise polynomial to evaluate. integer , intent ( in ) :: idy !! y derivative of piecewise polynomial to evaluate. integer , intent ( in ) :: idz !! z derivative of piecewise polynomial to evaluate. integer , intent ( in ) :: idq !! q derivative of piecewise polynomial to evaluate. integer , intent ( in ) :: idr !! r derivative of piecewise polynomial to evaluate. integer , intent ( in ) :: ids !! s derivative of piecewise polynomial to evaluate. integer , intent ( in ) :: nx !! the number of interpolation points in x. !! (same as in last call to [[db6ink]]) integer , intent ( in ) :: ny !! the number of interpolation points in y. !! (same as in last call to [[db6ink]]) integer , intent ( in ) :: nz !! the number of interpolation points in z. !! (same as in last call to [[db6ink]]) integer , intent ( in ) :: nq !! the number of interpolation points in q. !! (same as in last call to [[db6ink]]) integer , intent ( in ) :: nr !! the number of interpolation points in r. !! (same as in last call to [[db6ink]]) integer , intent ( in ) :: ns !! the number of interpolation points in s. !! (same as in last call to [[db6ink]]) integer , intent ( in ) :: kx !! order of polynomial pieces in x. !! (same as in last call to [[db6ink]]) integer , intent ( in ) :: ky !! order of polynomial pieces in y. !! (same as in last call to [[db6ink]]) integer , intent ( in ) :: kz !! order of polynomial pieces in z. !! (same as in last call to [[db6ink]]) integer , intent ( in ) :: kq !! order of polynomial pieces in q. !! (same as in last call to [[db6ink]]) integer , intent ( in ) :: kr !! order of polynomial pieces in r. !! (same as in last call to [[db6ink]]) integer , intent ( in ) :: ks !! order of polynomial pieces in s. !! (same as in last call to [[db6ink]]) real ( wp ), intent ( in ) :: xval !! x coordinate of evaluation point. real ( wp ), intent ( in ) :: yval !! y coordinate of evaluation point. real ( wp ), intent ( in ) :: zval !! z coordinate of evaluation point. real ( wp ), intent ( in ) :: qval !! q coordinate of evaluation point. real ( wp ), intent ( in ) :: rval !! r coordinate of evaluation point. real ( wp ), intent ( in ) :: sval !! s coordinate of evaluation point. real ( wp ), dimension ( nx + kx ), intent ( in ) :: tx !! sequence of knots defining the piecewise polynomial !! in the x direction. !! (same as in last call to [[db6ink]]) real ( wp ), dimension ( ny + ky ), intent ( in ) :: ty !! sequence of knots defining the piecewise polynomial !! in the y direction. !! (same as in last call to [[db6ink]]) real ( wp ), dimension ( nz + kz ), intent ( in ) :: tz !! sequence of knots defining the piecewise polynomial !! in the z direction. !! (same as in last call to [[db6ink]]) real ( wp ), dimension ( nq + kq ), intent ( in ) :: tq !! sequence of knots defining the piecewise polynomial !! in the q direction. !! (same as in last call to [[db6ink]]) real ( wp ), dimension ( nr + kr ), intent ( in ) :: tr !! sequence of knots defining the piecewise polynomial !! in the r direction. !! (same as in last call to [[db6ink]]) real ( wp ), dimension ( ns + ks ), intent ( in ) :: ts !! sequence of knots defining the piecewise polynomial !! in the s direction. !! (same as in last call to [[db6ink]]) real ( wp ), dimension ( nx , ny , nz , nq , nr , ns ), intent ( in ) :: bcoef !! the b-spline coefficients computed by [[db6ink]]. real ( wp ), intent ( out ) :: f !! interpolated value integer , intent ( out ) :: iflag !! status flag: !! !! *  = 0    : no errors !! *  \\ne 0  : error integer , intent ( inout ) :: inbvx !! initialization parameter which must be set !! to 1 the first time this routine is called, !! and must not be changed by the user. integer , intent ( inout ) :: inbvy !! initialization parameter which must be set !! to 1 the first time this routine is called, !! and must not be changed by the user. integer , intent ( inout ) :: inbvz !! initialization parameter which must be set !! to 1 the first time this routine is called, !! and must not be changed by the user. integer , intent ( inout ) :: inbvq !! initialization parameter which must be set !! to 1 the first time this routine is called, !! and must not be changed by the user. integer , intent ( inout ) :: inbvr !! initialization parameter which must be set !! to 1 the first time this routine is called, !! and must not be changed by the user. integer , intent ( inout ) :: inbvs !! initialization parameter which must be set !! to 1 the first time this routine is called, !! and must not be changed by the user. integer , intent ( inout ) :: iloy !! initialization parameter which must be set !! to 1 the first time this routine is called, !! and must not be changed by the user. integer , intent ( inout ) :: iloz !! initialization parameter which must be set !! to 1 the first time this routine is called, !! and must not be changed by the user. integer , intent ( inout ) :: iloq !! initialization parameter which must be set !! to 1 the first time this routine is called, !! and must not be changed by the user. integer , intent ( inout ) :: ilor !! initialization parameter which must be set !! to 1 the first time this routine is called, !! and must not be changed by the user. integer , intent ( inout ) :: ilos !! initialization parameter which must be set !! to 1 the first time this routine is called, !! and must not be changed by the user. logical , intent ( in ), optional :: extrap !! if extrapolation is allowed !! (if not present, default is False) real ( wp ), dimension ( ky , kz , kq , kr , ks ) :: temp1 real ( wp ), dimension ( kz , kq , kr , ks ) :: temp2 real ( wp ), dimension ( kq , kr , ks ) :: temp3 real ( wp ), dimension ( kr , ks ) :: temp4 real ( wp ), dimension ( ks ) :: temp5 real ( wp ), dimension ( 3 * max ( kx , ky , kz , kq , kr , ks )) :: work integer :: lefty , leftz , leftq , leftr , lefts ,& mflag ,& kcoly , kcolz , kcolq , kcolr , kcols ,& j , k , q , r , s f = 0.0_wp iflag = check_value ( xval , tx , 1 , extrap ); if ( iflag /= 0 ) return iflag = check_value ( yval , ty , 2 , extrap ); if ( iflag /= 0 ) return iflag = check_value ( zval , tz , 3 , extrap ); if ( iflag /= 0 ) return iflag = check_value ( qval , tq , 4 , extrap ); if ( iflag /= 0 ) return iflag = check_value ( rval , tr , 5 , extrap ); if ( iflag /= 0 ) return iflag = check_value ( sval , ts , 6 , extrap ); if ( iflag /= 0 ) return iflag = - 1 call dintrv ( ty , ny + ky , yval , iloy , lefty , mflag , extrap ); if ( mflag /= 0 ) return call dintrv ( tz , nz + kz , zval , iloz , leftz , mflag , extrap ); if ( mflag /= 0 ) return call dintrv ( tq , nq + kq , qval , iloq , leftq , mflag , extrap ); if ( mflag /= 0 ) return call dintrv ( tr , nr + kr , rval , ilor , leftr , mflag , extrap ); if ( mflag /= 0 ) return call dintrv ( ts , ns + ks , sval , ilos , lefts , mflag , extrap ); if ( mflag /= 0 ) return iflag = 0 ! x -> y, z, q, r, s kcols = lefts - ks do s = 1 , ks kcols = kcols + 1 kcolr = leftr - kr do r = 1 , kr kcolr = kcolr + 1 kcolq = leftq - kq do q = 1 , kq kcolq = kcolq + 1 kcolz = leftz - kz do k = 1 , kz kcolz = kcolz + 1 kcoly = lefty - ky do j = 1 , ky kcoly = kcoly + 1 call dbvalu ( tx , bcoef (:, kcoly , kcolz , kcolq , kcolr , kcols ),& nx , kx , idx , xval , inbvx , work , iflag ,& temp1 ( j , k , q , r , s ), extrap ) if ( iflag /= 0 ) return end do end do end do end do end do ! y -> z, q, r, s kcoly = lefty - ky + 1 do s = 1 , ks do r = 1 , kr do q = 1 , kq do k = 1 , kz call dbvalu ( ty ( kcoly :), temp1 (:, k , q , r , s ),& ky , ky , idy , yval , inbvy , work , iflag ,& temp2 ( k , q , r , s ), extrap ) if ( iflag /= 0 ) return end do end do end do end do ! z -> q, r, s kcolz = leftz - kz + 1 do s = 1 , ks do r = 1 , kr do q = 1 , kq call dbvalu ( tz ( kcolz :), temp2 (:, q , r , s ),& kz , kz , idz , zval , inbvz , work , iflag ,& temp3 ( q , r , s ), extrap ) if ( iflag /= 0 ) return end do end do end do ! q -> r, s kcolq = leftq - kq + 1 do s = 1 , ks do r = 1 , kr call dbvalu ( tq ( kcolq :), temp3 (:, r , s ),& kq , kq , idq , qval , inbvq , work , iflag ,& temp4 ( r , s ), extrap ) if ( iflag /= 0 ) return end do end do ! r -> s kcolr = leftr - kr + 1 do s = 1 , ks call dbvalu ( tr ( kcolr :), temp4 (:, s ),& kr , kr , idr , rval , inbvr , work , iflag ,& temp5 ( s ), extrap ) if ( iflag /= 0 ) return end do ! s kcols = lefts - ks + 1 call dbvalu ( ts ( kcols :), temp5 , ks , ks , ids , sval , inbvs , work , iflag , f , extrap ) end subroutine db6val","tags":"","loc":"proc/db6val.html","title":"db6val â€“ bspline-fortran"},{"text":"public interface bspline_1d Constructor for bspline_1d Module Procedures bspline_1d_constructor_empty bspline_1d_constructor_auto_knots bspline_1d_constructor_specify_knots Module Procedures private pure elemental function bspline_1d_constructor_empty() result(me) It returns an empty [[bspline_1d]] type. Note that INITIALIZE still\n  needs to be called before it can be used.\n  Not really that useful except perhaps in some OpenMP applications. Arguments None Return Value type( bspline_1d ) private pure function bspline_1d_constructor_auto_knots(x, fcn, kx, extrap) result(me) Constructor for a [[bspline_1d]] type (auto knots).\n  This is a wrapper for [[initialize_1d_auto_knots]]. Arguments Type Intent Optional Attributes Name real(kind=wp), intent(in), dimension(:) :: x (nx) array of x abcissae. Must be strictly increasing. real(kind=wp), intent(in), dimension(:) :: fcn (nx) array of function values to interpolate. fcn(i) should\n contain the function value at the point x(i) integer, intent(in) :: kx The order of spline pieces in x\n (  2 \\le k_x < n_x  )\n (order = polynomial degree + 1) logical, intent(in), optional :: extrap if true, then extrapolation is allowed\n (default is false) Return Value type( bspline_1d ) private pure function bspline_1d_constructor_specify_knots(x, fcn, kx, tx, extrap) result(me) Constructor for a [[bspline_1d]] type (user-specified knots).\n  This is a wrapper for [[initialize_1d_specify_knots]]. Arguments Type Intent Optional Attributes Name real(kind=wp), intent(in), dimension(:) :: x (nx) array of x abcissae. Must be strictly increasing. real(kind=wp), intent(in), dimension(:) :: fcn (nx) array of function values to interpolate. fcn(i) should\n contain the function value at the point x(i) integer, intent(in) :: kx The order of spline pieces in x\n (  2 \\le k_x < n_x  )\n (order = polynomial degree + 1) real(kind=wp), intent(in), dimension(:) :: tx The (nx+kx) knots in the x direction\n for the spline interpolant.\n Must be non-decreasing. logical, intent(in), optional :: extrap if true, then extrapolation is allowed\n (default is false) Return Value type( bspline_1d )","tags":"","loc":"interface/bspline_1d.html","title":"bspline_1d â€“ bspline-fortran"},{"text":"public interface bspline_2d Constructor for bspline_2d Module Procedures bspline_2d_constructor_empty bspline_2d_constructor_auto_knots bspline_2d_constructor_specify_knots Module Procedures private elemental function bspline_2d_constructor_empty() result(me) It returns an empty [[bspline_2d]] type. Note that INITIALIZE still\n  needs to be called before it can be used.\n  Not really that useful except perhaps in some OpenMP applications. Arguments None Return Value type( bspline_2d ) private pure function bspline_2d_constructor_auto_knots(x, y, fcn, kx, ky, extrap) result(me) Constructor for a [[bspline_2d]] type (auto knots).\n  This is a wrapper for [[initialize_2d_auto_knots]]. Arguments Type Intent Optional Attributes Name real(kind=wp), intent(in), dimension(:) :: x (nx) array of x abcissae. Must be strictly increasing. real(kind=wp), intent(in), dimension(:) :: y (ny) array of y abcissae. Must be strictly increasing. real(kind=wp), intent(in), dimension(:,:) :: fcn (nx,ny) matrix of function values to interpolate. fcn(i,j) should contain the function value at the\n point ( x(i) , y(j) ) integer, intent(in) :: kx The order of spline pieces in x\n (  2 \\le k_x < n_x  )\n (order = polynomial degree + 1) integer, intent(in) :: ky The order of spline pieces in y\n (  2 \\le k_y < n_y  )\n (order = polynomial degree + 1) logical, intent(in), optional :: extrap if true, then extrapolation is allowed\n (default is false) Return Value type( bspline_2d ) private pure function bspline_2d_constructor_specify_knots(x, y, fcn, kx, ky, tx, ty, extrap) result(me) Constructor for a [[bspline_2d]] type (user-specified knots).\n  This is a wrapper for [[initialize_2d_specify_knots]]. Arguments Type Intent Optional Attributes Name real(kind=wp), intent(in), dimension(:) :: x (nx) array of x abcissae. Must be strictly increasing. real(kind=wp), intent(in), dimension(:) :: y (ny) array of y abcissae. Must be strictly increasing. real(kind=wp), intent(in), dimension(:,:) :: fcn (nx,ny) matrix of function values to interpolate. fcn(i,j) should contain the function value at the\n point ( x(i) , y(j) ) integer, intent(in) :: kx The order of spline pieces in x\n (  2 \\le k_x < n_x  )\n (order = polynomial degree + 1) integer, intent(in) :: ky The order of spline pieces in y\n (  2 \\le k_y < n_y  )\n (order = polynomial degree + 1) real(kind=wp), intent(in), dimension(:) :: tx The (nx+kx) knots in the x direction\n for the spline interpolant.\n Must be non-decreasing. real(kind=wp), intent(in), dimension(:) :: ty The (ny+ky) knots in the y direction\n for the spline interpolant.\n Must be non-decreasing. logical, intent(in), optional :: extrap if true, then extrapolation is allowed\n (default is false) Return Value type( bspline_2d )","tags":"","loc":"interface/bspline_2d.html","title":"bspline_2d â€“ bspline-fortran"},{"text":"public interface bspline_3d Constructor for bspline_3d Module Procedures bspline_3d_constructor_empty bspline_3d_constructor_auto_knots bspline_3d_constructor_specify_knots Module Procedures private elemental function bspline_3d_constructor_empty() result(me) It returns an empty [[bspline_3d]] type. Note that INITIALIZE still\n  needs to be called before it can be used.\n  Not really that useful except perhaps in some OpenMP applications. Arguments None Return Value type( bspline_3d ) private pure function bspline_3d_constructor_auto_knots(x, y, z, fcn, kx, ky, kz, extrap) result(me) Constructor for a [[bspline_3d]] type (auto knots).\n  This is a wrapper for [[initialize_3d_auto_knots]]. Arguments Type Intent Optional Attributes Name real(kind=wp), intent(in), dimension(:) :: x (nx) array of x abcissae. Must be strictly increasing. real(kind=wp), intent(in), dimension(:) :: y (ny) array of y abcissae. Must be strictly increasing. real(kind=wp), intent(in), dimension(:) :: z (nz) array of z abcissae. Must be strictly increasing. real(kind=wp), intent(in), dimension(:,:,:) :: fcn (nx,ny,nz) matrix of function values to interpolate. fcn(i,j,k) should contain the function value at the\n point ( x(i) , y(j) , z(k) ) integer, intent(in) :: kx The order of spline pieces in x\n (  2 \\le k_x < n_x  )\n (order = polynomial degree + 1) integer, intent(in) :: ky The order of spline pieces in y\n (  2 \\le k_y < n_y  )\n (order = polynomial degree + 1) integer, intent(in) :: kz The order of spline pieces in z\n (  2 \\le k_z < n_z  )\n (order = polynomial degree + 1) logical, intent(in), optional :: extrap if true, then extrapolation is allowed\n (default is false) Return Value type( bspline_3d ) private pure function bspline_3d_constructor_specify_knots(x, y, z, fcn, kx, ky, kz, tx, ty, tz, extrap) result(me) Constructor for a [[bspline_3d]] type (user-specified knots).\n  This is a wrapper for [[initialize_3d_specify_knots]]. Arguments Type Intent Optional Attributes Name real(kind=wp), intent(in), dimension(:) :: x (nx) array of x abcissae. Must be strictly increasing. real(kind=wp), intent(in), dimension(:) :: y (ny) array of y abcissae. Must be strictly increasing. real(kind=wp), intent(in), dimension(:) :: z (nz) array of z abcissae. Must be strictly increasing. real(kind=wp), intent(in), dimension(:,:,:) :: fcn (nx,ny,nz) matrix of function values to interpolate. fcn(i,j,k) should contain the function value at the\n point ( x(i) , y(j) , z(k) ) integer, intent(in) :: kx The order of spline pieces in x\n (  2 \\le k_x < n_x  )\n (order = polynomial degree + 1) integer, intent(in) :: ky The order of spline pieces in y\n (  2 \\le k_y < n_y  )\n (order = polynomial degree + 1) integer, intent(in) :: kz The order of spline pieces in z\n (  2 \\le k_z < n_z  )\n (order = polynomial degree + 1) real(kind=wp), intent(in), dimension(:) :: tx The (nx+kx) knots in the x direction\n for the spline interpolant.\n Must be non-decreasing. real(kind=wp), intent(in), dimension(:) :: ty The (ny+ky) knots in the y direction\n for the spline interpolant.\n Must be non-decreasing. real(kind=wp), intent(in), dimension(:) :: tz The (nz+kz) knots in the z direction\n for the spline interpolant.\n Must be non-decreasing. logical, intent(in), optional :: extrap if true, then extrapolation is allowed\n (default is false) Return Value type( bspline_3d )","tags":"","loc":"interface/bspline_3d.html","title":"bspline_3d â€“ bspline-fortran"},{"text":"public interface bspline_4d Constructor for bspline_4d Module Procedures bspline_4d_constructor_empty bspline_4d_constructor_auto_knots bspline_4d_constructor_specify_knots Module Procedures private elemental function bspline_4d_constructor_empty() result(me) It returns an empty [[bspline_4d]] type. Note that INITIALIZE still\n  needs to be called before it can be used.\n  Not really that useful except perhaps in some OpenMP applications. Arguments None Return Value type( bspline_4d ) private pure function bspline_4d_constructor_auto_knots(x, y, z, q, fcn, kx, ky, kz, kq, extrap) result(me) Constructor for a [[bspline_4d]] type (auto knots).\n  This is a wrapper for [[initialize_4d_auto_knots]]. Arguments Type Intent Optional Attributes Name real(kind=wp), intent(in), dimension(:) :: x (nx) array of x abcissae. Must be strictly increasing. real(kind=wp), intent(in), dimension(:) :: y (ny) array of y abcissae. Must be strictly increasing. real(kind=wp), intent(in), dimension(:) :: z (nz) array of z abcissae. Must be strictly increasing. real(kind=wp), intent(in), dimension(:) :: q (nq) array of q abcissae. Must be strictly increasing. real(kind=wp), intent(in), dimension(:,:,:,:) :: fcn (nx,ny,nz,nq) matrix of function values to interpolate. fcn(i,j,k,l) should contain the function value at the\n point ( x(i) , y(j) , z(k) , q(l) ) integer, intent(in) :: kx The order of spline pieces in x\n (  2 \\le k_x < n_x  )\n (order = polynomial degree + 1) integer, intent(in) :: ky The order of spline pieces in y\n (  2 \\le k_y < n_y  )\n (order = polynomial degree + 1) integer, intent(in) :: kz The order of spline pieces in z\n (  2 \\le k_z < n_z  )\n (order = polynomial degree + 1) integer, intent(in) :: kq The order of spline pieces in q\n (  2 \\le k_q < n_q  )\n (order = polynomial degree + 1) logical, intent(in), optional :: extrap if true, then extrapolation is allowed\n (default is false) Return Value type( bspline_4d ) private pure function bspline_4d_constructor_specify_knots(x, y, z, q, fcn, kx, ky, kz, kq, tx, ty, tz, tq, extrap) result(me) Constructor for a [[bspline_4d]] type (user-specified knots).\n  This is a wrapper for [[initialize_4d_specify_knots]]. Arguments Type Intent Optional Attributes Name real(kind=wp), intent(in), dimension(:) :: x (nx) array of x abcissae. Must be strictly increasing. real(kind=wp), intent(in), dimension(:) :: y (ny) array of y abcissae. Must be strictly increasing. real(kind=wp), intent(in), dimension(:) :: z (nz) array of z abcissae. Must be strictly increasing. real(kind=wp), intent(in), dimension(:) :: q (nq) array of q abcissae. Must be strictly increasing. real(kind=wp), intent(in), dimension(:,:,:,:) :: fcn (nx,ny,nz,nq) matrix of function values to interpolate. fcn(i,j,k,l) should contain the function value at the\n point ( x(i) , y(j) , z(k) , q(l) ) integer, intent(in) :: kx The order of spline pieces in x\n (  2 \\le k_x < n_x  )\n (order = polynomial degree + 1) integer, intent(in) :: ky The order of spline pieces in y\n (  2 \\le k_y < n_y  )\n (order = polynomial degree + 1) integer, intent(in) :: kz The order of spline pieces in z\n (  2 \\le k_z < n_z  )\n (order = polynomial degree + 1) integer, intent(in) :: kq The order of spline pieces in q\n (  2 \\le k_q < n_q  )\n (order = polynomial degree + 1) real(kind=wp), intent(in), dimension(:) :: tx The (nx+kx) knots in the x direction\n for the spline interpolant.\n Must be non-decreasing. real(kind=wp), intent(in), dimension(:) :: ty The (ny+ky) knots in the y direction\n for the spline interpolant.\n Must be non-decreasing. real(kind=wp), intent(in), dimension(:) :: tz The (nz+kz) knots in the z direction\n for the spline interpolant.\n Must be non-decreasing. real(kind=wp), intent(in), dimension(:) :: tq The (nq+kq) knots in the q direction\n for the spline interpolant.\n Must be non-decreasing. logical, intent(in), optional :: extrap if true, then extrapolation is allowed\n (default is false) Return Value type( bspline_4d )","tags":"","loc":"interface/bspline_4d.html","title":"bspline_4d â€“ bspline-fortran"},{"text":"public interface bspline_5d Constructor for bspline_5d Module Procedures bspline_5d_constructor_empty bspline_5d_constructor_auto_knots bspline_5d_constructor_specify_knots Module Procedures private elemental function bspline_5d_constructor_empty() result(me) It returns an empty [[bspline_5d]] type. Note that INITIALIZE still\n  needs to be called before it can be used.\n  Not really that useful except perhaps in some OpenMP applications. Arguments None Return Value type( bspline_5d ) private pure function bspline_5d_constructor_auto_knots(x, y, z, q, r, fcn, kx, ky, kz, kq, kr, extrap) result(me) Constructor for a [[bspline_5d]] type (auto knots).\n  This is a wrapper for [[initialize_5d_auto_knots]]. Arguments Type Intent Optional Attributes Name real(kind=wp), intent(in), dimension(:) :: x (nx) array of x abcissae. Must be strictly increasing. real(kind=wp), intent(in), dimension(:) :: y (ny) array of y abcissae. Must be strictly increasing. real(kind=wp), intent(in), dimension(:) :: z (nz) array of z abcissae. Must be strictly increasing. real(kind=wp), intent(in), dimension(:) :: q (nq) array of q abcissae. Must be strictly increasing. real(kind=wp), intent(in), dimension(:) :: r (nr) array of r abcissae. Must be strictly increasing. real(kind=wp), intent(in), dimension(:,:,:,:,:) :: fcn (nx,ny,nz,nq,nr) matrix of function values to interpolate. fcn(i,j,k,l,m) should contain the function value at the\n point ( x(i) , y(j) , z(k) , q(l) , r(m) ) integer, intent(in) :: kx The order of spline pieces in x\n (  2 \\le k_x < n_x  )\n (order = polynomial degree + 1) integer, intent(in) :: ky The order of spline pieces in y\n (  2 \\le k_y < n_y  )\n (order = polynomial degree + 1) integer, intent(in) :: kz The order of spline pieces in z\n (  2 \\le k_z < n_z  )\n (order = polynomial degree + 1) integer, intent(in) :: kq The order of spline pieces in q\n (  2 \\le k_q < n_q  )\n (order = polynomial degree + 1) integer, intent(in) :: kr The order of spline pieces in r\n (  2 \\le k_r < n_r  )\n (order = polynomial degree + 1) logical, intent(in), optional :: extrap if true, then extrapolation is allowed\n (default is false) Return Value type( bspline_5d ) private pure function bspline_5d_constructor_specify_knots(x, y, z, q, r, fcn, kx, ky, kz, kq, kr, tx, ty, tz, tq, tr, extrap) result(me) Constructor for a [[bspline_5d]] type (user-specified knots).\n  This is a wrapper for [[initialize_5d_specify_knots]]. Arguments Type Intent Optional Attributes Name real(kind=wp), intent(in), dimension(:) :: x (nx) array of x abcissae. Must be strictly increasing. real(kind=wp), intent(in), dimension(:) :: y (ny) array of y abcissae. Must be strictly increasing. real(kind=wp), intent(in), dimension(:) :: z (nz) array of z abcissae. Must be strictly increasing. real(kind=wp), intent(in), dimension(:) :: q (nq) array of q abcissae. Must be strictly increasing. real(kind=wp), intent(in), dimension(:) :: r (nr) array of r abcissae. Must be strictly increasing. real(kind=wp), intent(in), dimension(:,:,:,:,:) :: fcn (nx,ny,nz,nq,nr) matrix of function values to interpolate. fcn(i,j,k,l,m) should contain the function value at the\n point ( x(i) , y(j) , z(k) , q(l) , r(m) ) integer, intent(in) :: kx The order of spline pieces in x\n (  2 \\le k_x < n_x  )\n (order = polynomial degree + 1) integer, intent(in) :: ky The order of spline pieces in y\n (  2 \\le k_y < n_y  )\n (order = polynomial degree + 1) integer, intent(in) :: kz The order of spline pieces in z\n (  2 \\le k_z < n_z  )\n (order = polynomial degree + 1) integer, intent(in) :: kq The order of spline pieces in q\n (  2 \\le k_q < n_q  )\n (order = polynomial degree + 1) integer, intent(in) :: kr The order of spline pieces in r\n (  2 \\le k_r < n_r  )\n (order = polynomial degree + 1) real(kind=wp), intent(in), dimension(:) :: tx The (nx+kx) knots in the x direction\n for the spline interpolant.\n Must be non-decreasing. real(kind=wp), intent(in), dimension(:) :: ty The (ny+ky) knots in the y direction\n for the spline interpolant.\n Must be non-decreasing. real(kind=wp), intent(in), dimension(:) :: tz The (nz+kz) knots in the z direction\n for the spline interpolant.\n Must be non-decreasing. real(kind=wp), intent(in), dimension(:) :: tq The (nq+kq) knots in the q direction\n for the spline interpolant.\n Must be non-decreasing. real(kind=wp), intent(in), dimension(:) :: tr The (nr+kr) knots in the r direction\n for the spline interpolant.\n Must be non-decreasing. logical, intent(in), optional :: extrap if true, then extrapolation is allowed\n (default is false) Return Value type( bspline_5d )","tags":"","loc":"interface/bspline_5d.html","title":"bspline_5d â€“ bspline-fortran"},{"text":"public interface bspline_6d Constructor for bspline_6d Module Procedures bspline_6d_constructor_empty bspline_6d_constructor_auto_knots bspline_6d_constructor_specify_knots Module Procedures private elemental function bspline_6d_constructor_empty() result(me) It returns an empty [[bspline_6d]] type. Note that INITIALIZE still\n  needs to be called before it can be used.\n  Not really that useful except perhaps in some OpenMP applications. Arguments None Return Value type( bspline_6d ) private pure function bspline_6d_constructor_auto_knots(x, y, z, q, r, s, fcn, kx, ky, kz, kq, kr, ks, extrap) result(me) Constructor for a [[bspline_6d]] type (auto knots).\n  This is a wrapper for [[initialize_6d_auto_knots]]. Arguments Type Intent Optional Attributes Name real(kind=wp), intent(in), dimension(:) :: x (nx) array of x abcissae. Must be strictly increasing. real(kind=wp), intent(in), dimension(:) :: y (ny) array of y abcissae. Must be strictly increasing. real(kind=wp), intent(in), dimension(:) :: z (nz) array of z abcissae. Must be strictly increasing. real(kind=wp), intent(in), dimension(:) :: q (nq) array of q abcissae. Must be strictly increasing. real(kind=wp), intent(in), dimension(:) :: r (nr) array of r abcissae. Must be strictly increasing. real(kind=wp), intent(in), dimension(:) :: s (ns) array of s abcissae. Must be strictly increasing. real(kind=wp), intent(in), dimension(:,:,:,:,:,:) :: fcn (nx,ny,nz,nq,nr,ns) matrix of function values to interpolate. fcn(i,j,k,l,m,n) should contain the function value at the\n point ( x(i) , y(j) , z(k) , q(l) , r(m) , s(n) ) integer, intent(in) :: kx The order of spline pieces in x\n (  2 \\le k_x < n_x  )\n (order = polynomial degree + 1) integer, intent(in) :: ky The order of spline pieces in y\n (  2 \\le k_y < n_y  )\n (order = polynomial degree + 1) integer, intent(in) :: kz The order of spline pieces in z\n (  2 \\le k_z < n_z  )\n (order = polynomial degree + 1) integer, intent(in) :: kq The order of spline pieces in q\n (  2 \\le k_q < n_q  )\n (order = polynomial degree + 1) integer, intent(in) :: kr The order of spline pieces in r\n (  2 \\le k_r < n_r  )\n (order = polynomial degree + 1) integer, intent(in) :: ks The order of spline pieces in z\n (  2 \\le k_z < n_z  )\n (order = polynomial degree + 1) logical, intent(in), optional :: extrap if true, then extrapolation is allowed\n (default is false) Return Value type( bspline_6d ) private pure function bspline_6d_constructor_specify_knots(x, y, z, q, r, s, fcn, kx, ky, kz, kq, kr, ks, tx, ty, tz, tq, tr, ts, extrap) result(me) Constructor for a [[bspline_6d]] type (user-specified knots).\n  This is a wrapper for [[initialize_6d_specify_knots]]. Arguments Type Intent Optional Attributes Name real(kind=wp), intent(in), dimension(:) :: x (nx) array of x abcissae. Must be strictly increasing. real(kind=wp), intent(in), dimension(:) :: y (ny) array of y abcissae. Must be strictly increasing. real(kind=wp), intent(in), dimension(:) :: z (nz) array of z abcissae. Must be strictly increasing. real(kind=wp), intent(in), dimension(:) :: q (nq) array of q abcissae. Must be strictly increasing. real(kind=wp), intent(in), dimension(:) :: r (nr) array of r abcissae. Must be strictly increasing. real(kind=wp), intent(in), dimension(:) :: s (ns) array of s abcissae. Must be strictly increasing. real(kind=wp), intent(in), dimension(:,:,:,:,:,:) :: fcn (nx,ny,nz,nq,nr,ns) matrix of function values to interpolate. fcn(i,j,k,l,m,n) should contain the function value at the\n point ( x(i) , y(j) , z(k) , q(l) , r(m) , s(n) ) integer, intent(in) :: kx The order of spline pieces in x\n (  2 \\le k_x < n_x  )\n (order = polynomial degree + 1) integer, intent(in) :: ky The order of spline pieces in y\n (  2 \\le k_y < n_y  )\n (order = polynomial degree + 1) integer, intent(in) :: kz The order of spline pieces in z\n (  2 \\le k_z < n_z  )\n (order = polynomial degree + 1) integer, intent(in) :: kq The order of spline pieces in q\n (  2 \\le k_q < n_q  )\n (order = polynomial degree + 1) integer, intent(in) :: kr The order of spline pieces in r\n (  2 \\le k_r < n_r  )\n (order = polynomial degree + 1) integer, intent(in) :: ks The order of spline pieces in z\n (  2 \\le k_z < n_z  )\n (order = polynomial degree + 1) real(kind=wp), intent(in), dimension(:) :: tx The (nx+kx) knots in the x direction\n for the spline interpolant.\n Must be non-decreasing. real(kind=wp), intent(in), dimension(:) :: ty The (ny+ky) knots in the y direction\n for the spline interpolant.\n Must be non-decreasing. real(kind=wp), intent(in), dimension(:) :: tz The (nz+kz) knots in the z direction\n for the spline interpolant.\n Must be non-decreasing. real(kind=wp), intent(in), dimension(:) :: tq The (nq+kq) knots in the q direction\n for the spline interpolant.\n Must be non-decreasing. real(kind=wp), intent(in), dimension(:) :: tr The (nr+kr) knots in the r direction\n for the spline interpolant.\n Must be non-decreasing. real(kind=wp), intent(in), dimension(:) :: ts The (ns+ks) knots in the s direction\n for the spline interpolant.\n Must be non-decreasing. logical, intent(in), optional :: extrap if true, then extrapolation is allowed\n (default is false) Return Value type( bspline_6d )","tags":"","loc":"interface/bspline_6d.html","title":"bspline_6d â€“ bspline-fortran"},{"text":"function f1(x) result(f) 1d test function Arguments Type Intent Optional Attributes Name real(kind=wp), intent(in) :: x Return Value real(kind=wp) Called By proc~~f1~~CalledByGraph proc~f1 f1 program~bspline_speed_test bspline_speed_test program~bspline_speed_test->proc~f1 Help Ã— Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Source Code f1 Source Code function f1 ( x ) result ( f ) !! 1d test function implicit none real ( wp ), intent ( in ) :: x real ( wp ) :: f f = x ** 1.1_wp + x ** 1.2_wp + x ** 1.3_wp + x ** 1.4_wp + x ** 1.5_wp + x ** 1.6_wp end function f1","tags":"","loc":"proc/f1.html","title":"f1 â€“ bspline-fortran"},{"text":"function f2(x, y) result(f) 2d test function Arguments Type Intent Optional Attributes Name real(kind=wp), intent(in) :: x real(kind=wp), intent(in) :: y Return Value real(kind=wp) Called By proc~~f2~~CalledByGraph proc~f2 f2 program~bspline_speed_test bspline_speed_test program~bspline_speed_test->proc~f2 Help Ã— Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Source Code f2 Source Code function f2 ( x , y ) result ( f ) !! 2d test function implicit none real ( wp ), intent ( in ) :: x , y real ( wp ) :: f f = x ** 1.1_wp + y ** 1.2_wp + x ** 1.3_wp + y ** 1.4_wp + x ** 1.5_wp + y ** 1.6_wp end function f2","tags":"","loc":"proc/f2.html","title":"f2 â€“ bspline-fortran"},{"text":"function f3(x, y, z) result(f) 3d test function Arguments Type Intent Optional Attributes Name real(kind=wp), intent(in) :: x real(kind=wp), intent(in) :: y real(kind=wp), intent(in) :: z Return Value real(kind=wp) Called By proc~~f3~~CalledByGraph proc~f3 f3 program~bspline_speed_test bspline_speed_test program~bspline_speed_test->proc~f3 Help Ã— Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Source Code f3 Source Code function f3 ( x , y , z ) result ( f ) !! 3d test function implicit none real ( wp ), intent ( in ) :: x , y , z real ( wp ) :: f f = x ** 1.1_wp + y ** 1.2_wp + z ** 1.3_wp + x ** 1.4_wp + y ** 1.5_wp + z ** 1.6_wp end function f3","tags":"","loc":"proc/f3.html","title":"f3 â€“ bspline-fortran"},{"text":"function f4(x, y, z, q) result(f) 4d test function Arguments Type Intent Optional Attributes Name real(kind=wp), intent(in) :: x real(kind=wp), intent(in) :: y real(kind=wp), intent(in) :: z real(kind=wp), intent(in) :: q Return Value real(kind=wp) Called By proc~~f4~~CalledByGraph proc~f4 f4 program~bspline_speed_test bspline_speed_test program~bspline_speed_test->proc~f4 Help Ã— Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Source Code f4 Source Code function f4 ( x , y , z , q ) result ( f ) !! 4d test function implicit none real ( wp ), intent ( in ) :: x , y , z , q real ( wp ) :: f f = x ** 1.1_wp + y ** 1.2_wp + z ** 1.3_wp + q ** 1.4_wp + x ** 1.5_wp + y ** 1.6_wp end function f4","tags":"","loc":"proc/f4.html","title":"f4 â€“ bspline-fortran"},{"text":"function f5(x, y, z, q, r) result(f) 5d test function Arguments Type Intent Optional Attributes Name real(kind=wp), intent(in) :: x real(kind=wp), intent(in) :: y real(kind=wp), intent(in) :: z real(kind=wp), intent(in) :: q real(kind=wp), intent(in) :: r Return Value real(kind=wp) Called By proc~~f5~~CalledByGraph proc~f5 f5 program~bspline_speed_test bspline_speed_test program~bspline_speed_test->proc~f5 Help Ã— Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Source Code f5 Source Code function f5 ( x , y , z , q , r ) result ( f ) !! 5d test function implicit none real ( wp ), intent ( in ) :: x , y , z , q , r real ( wp ) :: f f = x ** 1.1_wp + y ** 1.2_wp + z ** 1.3_wp + q ** 1.4_wp + r ** 1.5_wp + x ** 1.6_wp end function f5","tags":"","loc":"proc/f5.html","title":"f5 â€“ bspline-fortran"},{"text":"function f6(x, y, z, q, r, s) result(f) 6d test function Arguments Type Intent Optional Attributes Name real(kind=wp), intent(in) :: x real(kind=wp), intent(in) :: y real(kind=wp), intent(in) :: z real(kind=wp), intent(in) :: q real(kind=wp), intent(in) :: r real(kind=wp), intent(in) :: s Return Value real(kind=wp) Called By proc~~f6~~CalledByGraph proc~f6 f6 program~bspline_speed_test bspline_speed_test program~bspline_speed_test->proc~f6 Help Ã— Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Source Code f6 Source Code function f6 ( x , y , z , q , r , s ) result ( f ) !! 6d test function implicit none real ( wp ), intent ( in ) :: x , y , z , q , r , s real ( wp ) :: f f = x ** 1.1_wp + y ** 1.2_wp + z ** 1.3_wp + q ** 1.4_wp + r ** 1.5_wp + s ** 1.6_wp end function f6","tags":"","loc":"proc/f6.html","title":"f6 â€“ bspline-fortran"},{"text":"function f1(x) 1d test function Arguments Type Intent Optional Attributes Name real(kind=wp) :: x Return Value real(kind=wp) Called By proc~~f1~2~~CalledByGraph proc~f1~2 f1 program~bspline_oo_test bspline_oo_test program~bspline_oo_test->proc~f1~2 Help Ã— Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Source Code f1 Source Code real ( wp ) function f1 ( x ) !! 1d test function implicit none real ( wp ) :: x f1 = 0.5_wp * ( x * exp ( - x ) + sin ( x ) ) end function f1","tags":"","loc":"proc/f1~2.html","title":"f1 â€“ bspline-fortran"},{"text":"function f2(x, y) 2d test function Arguments Type Intent Optional Attributes Name real(kind=wp) :: x real(kind=wp) :: y Return Value real(kind=wp) Called By proc~~f2~2~~CalledByGraph proc~f2~2 f2 program~bspline_oo_test bspline_oo_test program~bspline_oo_test->proc~f2~2 Help Ã— Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Source Code f2 Source Code real ( wp ) function f2 ( x , y ) !! 2d test function implicit none real ( wp ) x , y , piov2 piov2 = 2.0_wp * atan ( 1.0_wp ) f2 = 0.5_wp * ( y * exp ( - x ) + sin ( piov2 * y ) ) end function f2","tags":"","loc":"proc/f2~2.html","title":"f2 â€“ bspline-fortran"},{"text":"function f3(x, y, z) 3d test function Arguments Type Intent Optional Attributes Name real(kind=wp) :: x real(kind=wp) :: y real(kind=wp) :: z Return Value real(kind=wp) Called By proc~~f3~2~~CalledByGraph proc~f3~2 f3 program~bspline_oo_test bspline_oo_test program~bspline_oo_test->proc~f3~2 Help Ã— Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Source Code f3 Source Code real ( wp ) function f3 ( x , y , z ) !! 3d test function implicit none real ( wp ) x , y , z , piov2 piov2 = 2.0_wp * atan ( 1.0_wp ) f3 = 0.5_wp * ( y * exp ( - x ) + z * sin ( piov2 * y ) ) end function f3","tags":"","loc":"proc/f3~2.html","title":"f3 â€“ bspline-fortran"},{"text":"function f4(x, y, z, q) 4d test function Arguments Type Intent Optional Attributes Name real(kind=wp) :: x real(kind=wp) :: y real(kind=wp) :: z real(kind=wp) :: q Return Value real(kind=wp) Called By proc~~f4~2~~CalledByGraph proc~f4~2 f4 program~bspline_oo_test bspline_oo_test program~bspline_oo_test->proc~f4~2 Help Ã— Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Source Code f4 Source Code real ( wp ) function f4 ( x , y , z , q ) !! 4d test function implicit none real ( wp ) x , y , z , q , piov2 piov2 = 2.0_wp * atan ( 1.0_wp ) f4 = 0.5_wp * ( y * exp ( - x ) + z * sin ( piov2 * y ) + q ) end function f4","tags":"","loc":"proc/f4~2.html","title":"f4 â€“ bspline-fortran"},{"text":"function f5(x, y, z, q, r) 5d test function Arguments Type Intent Optional Attributes Name real(kind=wp) :: x real(kind=wp) :: y real(kind=wp) :: z real(kind=wp) :: q real(kind=wp) :: r Return Value real(kind=wp) Called By proc~~f5~2~~CalledByGraph proc~f5~2 f5 program~bspline_oo_test bspline_oo_test program~bspline_oo_test->proc~f5~2 Help Ã— Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Source Code f5 Source Code real ( wp ) function f5 ( x , y , z , q , r ) !! 5d test function implicit none real ( wp ) x , y , z , q , r , piov2 piov2 = 2.0_wp * atan ( 1.0_wp ) f5 = 0.5_wp * ( y * exp ( - x ) + z * sin ( piov2 * y ) + q * r ) end function f5","tags":"","loc":"proc/f5~2.html","title":"f5 â€“ bspline-fortran"},{"text":"function f6(x, y, z, q, r, s) 6d test function Arguments Type Intent Optional Attributes Name real(kind=wp) :: x real(kind=wp) :: y real(kind=wp) :: z real(kind=wp) :: q real(kind=wp) :: r real(kind=wp) :: s Return Value real(kind=wp) Called By proc~~f6~2~~CalledByGraph proc~f6~2 f6 program~bspline_oo_test bspline_oo_test program~bspline_oo_test->proc~f6~2 Help Ã— Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Source Code f6 Source Code real ( wp ) function f6 ( x , y , z , q , r , s ) !! 6d test function implicit none real ( wp ) x , y , z , q , r , s , piov2 piov2 = 2.0_wp * atan ( 1.0_wp ) f6 = 0.5_wp * ( y * exp ( - x ) + z * sin ( piov2 * y ) + q * r + 2.0_wp * s ) end function f6","tags":"","loc":"proc/f6~2.html","title":"f6 â€“ bspline-fortran"},{"text":"function test_function(x) result(f) Arguments Type Intent Optional Attributes Name real(kind=wp), intent(in) :: x Return Value real(kind=wp) f(x) Source Code test_function Source Code function test_function ( x ) result ( f ) implicit none real ( wp ), intent ( in ) :: x real ( wp ) :: f !! f(x) f = 2.0_wp end function test_function","tags":"","loc":"proc/test_function.html","title":"test_function â€“ bspline-fortran"},{"text":"pure function test_func(x) result(f) 1d test function Arguments Type Intent Optional Attributes Name real(kind=wp), intent(in) :: x Return Value real(kind=wp) Called By proc~~test_func~~CalledByGraph proc~test_func test_func program~knot_tests knot_tests program~knot_tests->proc~test_func Help Ã— Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Source Code test_func Source Code pure function test_func ( x ) result ( f ) !! 1d test function implicit none real ( wp ) :: f real ( wp ), intent ( in ) :: x real ( wp ), parameter :: a = acos ( - 1.0_wp ) / 1 8.0_wp f = sin ( a * x ) end function test_func","tags":"","loc":"proc/test_func.html","title":"test_func â€“ bspline-fortran"},{"text":"function test_func(x, y) result(f) 2d test function Arguments Type Intent Optional Attributes Name real(kind=wp), intent(in) :: x real(kind=wp), intent(in) :: y Return Value real(kind=wp) Called By proc~~test_func~2~~CalledByGraph proc~test_func~2 test_func program~bspline_regridding_test bspline_regridding_test program~bspline_regridding_test->proc~test_func~2 Help Ã— Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Source Code test_func Source Code function test_func ( x , y ) result ( f ) !! 2d test function implicit none real ( wp ) :: f real ( wp ), intent ( in ) :: x , y real ( wp ), parameter :: deg2rad = acos ( - 1.0_wp ) / 18 0.0_wp !! degrees to radians conversion factor f = sin ( deg2rad * ( x + y )) end function test_func","tags":"","loc":"proc/test_func~2.html","title":"test_func â€“ bspline-fortran"},{"text":"function f1(x) 1d test function Arguments Type Intent Optional Attributes Name real(kind=wp) :: x Return Value real(kind=wp) Called By proc~~f1~3~~CalledByGraph proc~f1~3 f1 program~bspline_test bspline_test program~bspline_test->proc~f1~3 Help Ã— Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Source Code f1 Source Code real ( wp ) function f1 ( x ) !! 1d test function implicit none real ( wp ) :: x f1 = 0.5_wp * ( x * exp ( - x ) + sin ( x ) ) end function f1","tags":"","loc":"proc/f1~3.html","title":"f1 â€“ bspline-fortran"},{"text":"function f2(x, y) 2d test function Arguments Type Intent Optional Attributes Name real(kind=wp) :: x real(kind=wp) :: y Return Value real(kind=wp) Called By proc~~f2~3~~CalledByGraph proc~f2~3 f2 program~bspline_test bspline_test program~bspline_test->proc~f2~3 Help Ã— Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Source Code f2 Source Code real ( wp ) function f2 ( x , y ) !! 2d test function implicit none real ( wp ) x , y , piov2 piov2 = 2.0_wp * atan ( 1.0_wp ) f2 = 0.5_wp * ( y * exp ( - x ) + sin ( piov2 * y ) ) end function f2","tags":"","loc":"proc/f2~3.html","title":"f2 â€“ bspline-fortran"},{"text":"function f3(x, y, z) 3d test function Arguments Type Intent Optional Attributes Name real(kind=wp) :: x real(kind=wp) :: y real(kind=wp) :: z Return Value real(kind=wp) Called By proc~~f3~3~~CalledByGraph proc~f3~3 f3 program~bspline_test bspline_test program~bspline_test->proc~f3~3 Help Ã— Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Source Code f3 Source Code real ( wp ) function f3 ( x , y , z ) !! 3d test function implicit none real ( wp ) x , y , z , piov2 piov2 = 2.0_wp * atan ( 1.0_wp ) f3 = 0.5_wp * ( y * exp ( - x ) + z * sin ( piov2 * y ) ) end function f3","tags":"","loc":"proc/f3~3.html","title":"f3 â€“ bspline-fortran"},{"text":"function f4(x, y, z, q) 4d test function Arguments Type Intent Optional Attributes Name real(kind=wp) :: x real(kind=wp) :: y real(kind=wp) :: z real(kind=wp) :: q Return Value real(kind=wp) Called By proc~~f4~3~~CalledByGraph proc~f4~3 f4 program~bspline_test bspline_test program~bspline_test->proc~f4~3 Help Ã— Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Source Code f4 Source Code real ( wp ) function f4 ( x , y , z , q ) !! 4d test function implicit none real ( wp ) x , y , z , q , piov2 piov2 = 2.0_wp * atan ( 1.0_wp ) f4 = 0.5_wp * ( y * exp ( - x ) + z * sin ( piov2 * y ) + q ) end function f4","tags":"","loc":"proc/f4~3.html","title":"f4 â€“ bspline-fortran"},{"text":"function f5(x, y, z, q, r) 5d test function Arguments Type Intent Optional Attributes Name real(kind=wp) :: x real(kind=wp) :: y real(kind=wp) :: z real(kind=wp) :: q real(kind=wp) :: r Return Value real(kind=wp) Called By proc~~f5~3~~CalledByGraph proc~f5~3 f5 program~bspline_test bspline_test program~bspline_test->proc~f5~3 Help Ã— Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Source Code f5 Source Code real ( wp ) function f5 ( x , y , z , q , r ) !! 5d test function implicit none real ( wp ) x , y , z , q , r , piov2 piov2 = 2.0_wp * atan ( 1.0_wp ) f5 = 0.5_wp * ( y * exp ( - x ) + z * sin ( piov2 * y ) + q * r ) end function f5","tags":"","loc":"proc/f5~3.html","title":"f5 â€“ bspline-fortran"},{"text":"function f6(x, y, z, q, r, s) 6d test function Arguments Type Intent Optional Attributes Name real(kind=wp) :: x real(kind=wp) :: y real(kind=wp) :: z real(kind=wp) :: q real(kind=wp) :: r real(kind=wp) :: s Return Value real(kind=wp) Called By proc~~f6~3~~CalledByGraph proc~f6~3 f6 program~bspline_test bspline_test program~bspline_test->proc~f6~3 Help Ã— Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Source Code f6 Source Code real ( wp ) function f6 ( x , y , z , q , r , s ) !! 6d test function implicit none real ( wp ) x , y , z , q , r , s , piov2 piov2 = 2.0_wp * atan ( 1.0_wp ) f6 = 0.5_wp * ( y * exp ( - x ) + z * sin ( piov2 * y ) + q * r + 2.0_wp * s ) end function f6","tags":"","loc":"proc/f6~3.html","title":"f6 â€“ bspline-fortran"},{"text":"function f1(x) result(f) 1d test function Arguments Type Intent Optional Attributes Name real(kind=wp), intent(in) :: x Return Value real(kind=wp) Called By proc~~f1~4~~CalledByGraph proc~f1~4 f1 program~bspline_speed_test_oo bspline_speed_test_oo program~bspline_speed_test_oo->proc~f1~4 Help Ã— Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Source Code f1 Source Code function f1 ( x ) result ( f ) !! 1d test function implicit none real ( wp ), intent ( in ) :: x real ( wp ) :: f f = x ** 1.1_wp + x ** 1.2_wp + x ** 1.3_wp + x ** 1.4_wp + x ** 1.5_wp + x ** 1.6_wp end function f1","tags":"","loc":"proc/f1~4.html","title":"f1 â€“ bspline-fortran"},{"text":"function f2(x, y) result(f) 2d test function Arguments Type Intent Optional Attributes Name real(kind=wp), intent(in) :: x real(kind=wp), intent(in) :: y Return Value real(kind=wp) Called By proc~~f2~4~~CalledByGraph proc~f2~4 f2 program~bspline_speed_test_oo bspline_speed_test_oo program~bspline_speed_test_oo->proc~f2~4 Help Ã— Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Source Code f2 Source Code function f2 ( x , y ) result ( f ) !! 2d test function implicit none real ( wp ), intent ( in ) :: x , y real ( wp ) :: f f = x ** 1.1_wp + y ** 1.2_wp + x ** 1.3_wp + y ** 1.4_wp + x ** 1.5_wp + y ** 1.6_wp end function f2","tags":"","loc":"proc/f2~4.html","title":"f2 â€“ bspline-fortran"},{"text":"function f3(x, y, z) result(f) 3d test function Arguments Type Intent Optional Attributes Name real(kind=wp), intent(in) :: x real(kind=wp), intent(in) :: y real(kind=wp), intent(in) :: z Return Value real(kind=wp) Called By proc~~f3~4~~CalledByGraph proc~f3~4 f3 program~bspline_speed_test_oo bspline_speed_test_oo program~bspline_speed_test_oo->proc~f3~4 Help Ã— Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Source Code f3 Source Code function f3 ( x , y , z ) result ( f ) !! 3d test function implicit none real ( wp ), intent ( in ) :: x , y , z real ( wp ) :: f f = x ** 1.1_wp + y ** 1.2_wp + z ** 1.3_wp + x ** 1.4_wp + y ** 1.5_wp + z ** 1.6_wp end function f3","tags":"","loc":"proc/f3~4.html","title":"f3 â€“ bspline-fortran"},{"text":"function f4(x, y, z, q) result(f) 4d test function Arguments Type Intent Optional Attributes Name real(kind=wp), intent(in) :: x real(kind=wp), intent(in) :: y real(kind=wp), intent(in) :: z real(kind=wp), intent(in) :: q Return Value real(kind=wp) Called By proc~~f4~4~~CalledByGraph proc~f4~4 f4 program~bspline_speed_test_oo bspline_speed_test_oo program~bspline_speed_test_oo->proc~f4~4 Help Ã— Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Source Code f4 Source Code function f4 ( x , y , z , q ) result ( f ) !! 4d test function implicit none real ( wp ), intent ( in ) :: x , y , z , q real ( wp ) :: f f = x ** 1.1_wp + y ** 1.2_wp + z ** 1.3_wp + q ** 1.4_wp + x ** 1.5_wp + y ** 1.6_wp end function f4","tags":"","loc":"proc/f4~4.html","title":"f4 â€“ bspline-fortran"},{"text":"function f5(x, y, z, q, r) result(f) 5d test function Arguments Type Intent Optional Attributes Name real(kind=wp), intent(in) :: x real(kind=wp), intent(in) :: y real(kind=wp), intent(in) :: z real(kind=wp), intent(in) :: q real(kind=wp), intent(in) :: r Return Value real(kind=wp) Called By proc~~f5~4~~CalledByGraph proc~f5~4 f5 program~bspline_speed_test_oo bspline_speed_test_oo program~bspline_speed_test_oo->proc~f5~4 Help Ã— Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Source Code f5 Source Code function f5 ( x , y , z , q , r ) result ( f ) !! 5d test function implicit none real ( wp ), intent ( in ) :: x , y , z , q , r real ( wp ) :: f f = x ** 1.1_wp + y ** 1.2_wp + z ** 1.3_wp + q ** 1.4_wp + r ** 1.5_wp + x ** 1.6_wp end function f5","tags":"","loc":"proc/f5~4.html","title":"f5 â€“ bspline-fortran"},{"text":"function f6(x, y, z, q, r, s) result(f) 6d test function Arguments Type Intent Optional Attributes Name real(kind=wp), intent(in) :: x real(kind=wp), intent(in) :: y real(kind=wp), intent(in) :: z real(kind=wp), intent(in) :: q real(kind=wp), intent(in) :: r real(kind=wp), intent(in) :: s Return Value real(kind=wp) Called By proc~~f6~4~~CalledByGraph proc~f6~4 f6 program~bspline_speed_test_oo bspline_speed_test_oo program~bspline_speed_test_oo->proc~f6~4 Help Ã— Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Source Code f6 Source Code function f6 ( x , y , z , q , r , s ) result ( f ) !! 6d test function implicit none real ( wp ), intent ( in ) :: x , y , z , q , r , s real ( wp ) :: f f = x ** 1.1_wp + y ** 1.2_wp + z ** 1.3_wp + q ** 1.4_wp + r ** 1.5_wp + s ** 1.6_wp end function f6","tags":"","loc":"proc/f6~4.html","title":"f6 â€“ bspline-fortran"},{"text":"function f1(x) 1d test function Arguments Type Intent Optional Attributes Name real(kind=wp) :: x Return Value real(kind=wp) Called By proc~~f1~5~~CalledByGraph proc~f1~5 f1 program~bspline_extrap_test bspline_extrap_test program~bspline_extrap_test->proc~f1~5 Help Ã— Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Source Code f1 Source Code real ( wp ) function f1 ( x ) !! 1d test function implicit none real ( wp ) :: x f1 = sin ( x ) end function f1","tags":"","loc":"proc/f1~5.html","title":"f1 â€“ bspline-fortran"},{"text":"Uses: iso_fortran_env iso_fortran_env module~~bspline_sub_module~~UsesGraph module~bspline_sub_module bspline_sub_module iso_fortran_env iso_fortran_env iso_fortran_env->module~bspline_sub_module Help Ã— Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a parent (sub)module to the submodule which is\n    descended from it. Dashed arrows point from a module being used to the\n    module or program unit using it. Description Multidimensional (1D-6D) B-spline interpolation of data on a regular grid.\n  Basic pure subroutine interface. Notes This module is based on the B-spline and spline routines from [1].\n  The original Fortran 77 routines were converted to free-form source.\n  Some of them are relatively unchanged from the originals, but some have\n  been extensively refactored. In addition, new routines for\n  1d, 4d, 5d, and 6d interpolation were also created (these are simply\n  extensions of the same algorithm into higher dimensions). See also An object-oriented interface can be found in bspline_oo_module . References DBSPLIN and DTENSBS from the NIST Core Math Library .\n     Original code is public domain. Carl de Boor, \"A Practical Guide to Splines\",\n     Springer-Verlag, New York, 1978. Carl de Boor, Efficient Computer Manipulation of Tensor\n     Products ,\n     ACM Transactions on Mathematical Software,\n     Vol. 5 (1979), p. 173-182. D.E. Amos, \"Computation with Splines and B-Splines\",\n     SAND78-1968, Sandia Laboratories, March, 1979. Carl de Boor, Package for calculating with B-splines ,\n     SIAM Journal on Numerical Analysis 14, 3 (June 1977), p. 441-472. D.E. Amos, \"Quadrature subroutines for splines and B-splines\",\n     Report SAND79-1825, Sandia Laboratories, December 1979. Used By module~~bspline_sub_module~~UsedByGraph module~bspline_sub_module bspline_sub_module module~bspline_module bspline_module module~bspline_sub_module->module~bspline_module module~bspline_oo_module bspline_oo_module module~bspline_sub_module->module~bspline_oo_module program~bspline_regridding_test bspline_regridding_test module~bspline_module->program~bspline_regridding_test program~bspline_integrate_test bspline_integrate_test module~bspline_module->program~bspline_integrate_test program~bspline_speed_test bspline_speed_test module~bspline_module->program~bspline_speed_test program~bspline_oo_test bspline_oo_test module~bspline_module->program~bspline_oo_test program~knot_tests knot_tests module~bspline_module->program~knot_tests program~bspline_speed_test_oo bspline_speed_test_oo module~bspline_module->program~bspline_speed_test_oo program~bspline_test bspline_test module~bspline_module->program~bspline_test program~bspline_extrap_test bspline_extrap_test module~bspline_module->program~bspline_extrap_test module~bspline_oo_module->module~bspline_module Help Ã— Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a parent (sub)module to the submodule which is\n    descended from it. Dashed arrows point from a module being used to the\n    module or program unit using it. Variables bspline_order_quadratic bspline_order_cubic bspline_order_quartic bspline_order_quintic Abstract Interfaces b1fqad_func Functions get_status_message Subroutines db1ink db1val db1sqad db1fqad db2ink db2val db3ink db3val db4ink db4val db5ink db5val db6ink db6val Variables Type Visibility Attributes Name Initial integer, public, parameter :: bspline_order_quadratic = 3 integer, public, parameter :: bspline_order_cubic = 4 integer, public, parameter :: bspline_order_quartic = 5 integer, public, parameter :: bspline_order_quintic = 6 Abstract Interfaces abstract interface public function b1fqad_func (x) result(f) interface for the input function in [[dbfqad]] Arguments Type Intent Optional Attributes Name real(kind=wp), intent(in) :: x Return Value real(kind=wp) f(x) Functions public pure function get_status_message (iflag) result(msg) Returns a message string associated with the status code. Arguments Type Intent Optional Attributes Name integer, intent(in) :: iflag return code from one of the routines Return Value character(len=:),\n  allocatable status message associated with the flag Subroutines public pure subroutine db1ink (x, nx, fcn, kx, iknot, tx, bcoef, iflag) Determines the parameters of a function that interpolates\n  the one-dimensional gridded data\n   [x(i),\\mathrm{fcn}(i)] ~\\mathrm{for}~ i=1,..,n_x \n  The interpolating function and its derivatives may\n  subsequently be evaluated by the function db1val . Arguments Type Intent Optional Attributes Name real(kind=wp), intent(in), dimension(:) :: x (nx) array of x abcissae. Must be strictly increasing. integer, intent(in) :: nx Number of x abcissae real(kind=wp), intent(in), dimension(:) :: fcn (nx) array of function values to interpolate. fcn(i) should\n contain the function value at the point x(i) integer, intent(in) :: kx The order of spline pieces in x\n (  2 \\le k_x < n_x  )\n (order = polynomial degree + 1) integer, intent(in) :: iknot knot sequence flag: real(kind=wp), intent(inout), dimension(:) :: tx The (nx+kx) knots in the x direction\n for the spline interpolant: real(kind=wp), intent(out), dimension(:) :: bcoef (nx) array of coefficients of the b-spline interpolant. integer, intent(out) :: iflag status flag: public pure subroutine db1val (xval, idx, tx, nx, kx, bcoef, f, iflag, inbvx, extrap) Evaluates the tensor product piecewise polynomial\n  interpolant constructed by the routine db1ink or one of its\n  derivatives at the point xval . Arguments Type Intent Optional Attributes Name real(kind=wp), intent(in) :: xval x coordinate of evaluation point. integer, intent(in) :: idx x derivative of piecewise polynomial to evaluate. real(kind=wp), intent(in), dimension(nx+kx) :: tx sequence of knots defining the piecewise polynomial\n in the x direction. (same as in last call to db1ink ) integer, intent(in) :: nx the number of interpolation points in x.\n (same as in last call to db1ink ) integer, intent(in) :: kx order of polynomial pieces in x.\n (same as in last call to db1ink ) real(kind=wp), intent(in), dimension(nx) :: bcoef the b-spline coefficients computed by db1ink . real(kind=wp), intent(out) :: f interpolated value integer, intent(out) :: iflag status flag: integer, intent(inout) :: inbvx initialization parameter which must be set\n to 1 the first time this routine is called,\n and must not be changed by the user. logical, intent(in), optional :: extrap if extrapolation is allowed\n (if not present, default is False) public pure subroutine db1sqad (tx, bcoef, nx, kx, x1, x2, f, iflag) Computes the integral on (x1,x2) of a kx -th order b-spline.\n  Orders kx as high as 20 are permitted by applying a 2, 6, or 10\n  point gauss formula on subintervals of (x1,x2) which are\n  formed by included (distinct) knots. Arguments Type Intent Optional Attributes Name real(kind=wp), intent(in), dimension(nx+kx) :: tx knot array real(kind=wp), intent(in), dimension(nx) :: bcoef b-spline coefficient array integer, intent(in) :: nx length of coefficient array integer, intent(in) :: kx order of b-spline, 1 <= k <= 20 real(kind=wp), intent(in) :: x1 left point of quadrature interval in t(kx) <= x <= t(nx+1) real(kind=wp), intent(in) :: x2 right point of quadrature interval in t(kx) <= x <= t(nx+1) real(kind=wp), intent(out) :: f integral of the b-spline over ( x1 , x2 ) integer, intent(out) :: iflag status flag: public subroutine db1fqad (fun, tx, bcoef, nx, kx, idx, x1, x2, tol, f, iflag) Computes the integral on (x1,x2) of a product of a\n  function fun and the idx -th derivative of a kx -th order b-spline,\n  using the b-representation (tx,bcoef,nx,kx) , with an adaptive\n  8-point Legendre-Gauss algorithm. (x1,x2) must be a subinterval of t(kx) <= x <= t(nx+1) . Arguments Type Intent Optional Attributes Name procedure( b1fqad_func ) :: fun external function of one argument for the\n integrand bf(x)=fun(x)*dbvalu(tx,bcoef,nx,kx,id,x,inbv,work) real(kind=wp), intent(in), dimension(nx+kx) :: tx knot array real(kind=wp), intent(in), dimension(nx) :: bcoef b-spline coefficient array integer, intent(in) :: nx length of coefficient array integer, intent(in) :: kx order of b-spline, kx >= 1 integer, intent(in) :: idx order of the spline derivative, 0 <= idx <= k-1 idx=0 gives the spline function real(kind=wp), intent(in) :: x1 left point of quadrature interval in t(k) <= x <= t(n+1) real(kind=wp), intent(in) :: x2 right point of quadrature interval in t(k) <= x <= t(n+1) real(kind=wp), intent(in) :: tol desired accuracy for the quadrature, suggest 10*dtol < tol <= 0.1 where dtol is the maximum\n of 1.0e-18 and real(wp) unit roundoff for\n the machine real(kind=wp), intent(out) :: f integral of bf(x) on (x1,x2) integer, intent(out) :: iflag status flag: public pure subroutine db2ink (x, nx, y, ny, fcn, kx, ky, iknot, tx, ty, bcoef, iflag) Determines the parameters of a function that interpolates\n  the two-dimensional gridded data\n   [x(i),y(j),\\mathrm{fcn}(i,j)] ~\\mathrm{for}~ i=1,..,n_x ~\\mathrm{and}~ j=1,..,n_y \n  The interpolating function and its derivatives may\n  subsequently be evaluated by the function db2val . Arguments Type Intent Optional Attributes Name real(kind=wp), intent(in), dimension(:) :: x (nx) array of x abcissae. Must be strictly increasing. integer, intent(in) :: nx Number of x abcissae real(kind=wp), intent(in), dimension(:) :: y (ny) array of y abcissae. Must be strictly increasing. integer, intent(in) :: ny Number of y abcissae real(kind=wp), intent(in), dimension(:,:) :: fcn (nx,ny) matrix of function values to interpolate. fcn(i,j) should contain the function value at the\n point ( x(i) , y(j) ) integer, intent(in) :: kx The order of spline pieces in x\n (  2 \\le k_x < n_x  )\n (order = polynomial degree + 1) integer, intent(in) :: ky The order of spline pieces in y\n (  2 \\le k_y < n_y  )\n (order = polynomial degree + 1) integer, intent(in) :: iknot knot sequence flag: real(kind=wp), intent(inout), dimension(:) :: tx The (nx+kx) knots in the x direction for the spline interpolant. real(kind=wp), intent(inout), dimension(:) :: ty The (ny+ky) knots in the y direction for the spline interpolant. real(kind=wp), intent(out), dimension(:,:) :: bcoef (nx,ny) matrix of coefficients of the b-spline interpolant. integer, intent(out) :: iflag public pure subroutine db2val (xval, yval, idx, idy, tx, ty, nx, ny, kx, ky, bcoef, f, iflag, inbvx, inbvy, iloy, extrap) Evaluates the tensor product piecewise polynomial\n  interpolant constructed by the routine db2ink or one of its\n  derivatives at the point ( xval , yval ). Arguments Type Intent Optional Attributes Name real(kind=wp), intent(in) :: xval x coordinate of evaluation point. real(kind=wp), intent(in) :: yval y coordinate of evaluation point. integer, intent(in) :: idx x derivative of piecewise polynomial to evaluate. integer, intent(in) :: idy y derivative of piecewise polynomial to evaluate. real(kind=wp), intent(in), dimension(nx+kx) :: tx sequence of knots defining the piecewise polynomial\n in the x direction.\n (same as in last call to db2ink ) real(kind=wp), intent(in), dimension(ny+ky) :: ty sequence of knots defining the piecewise\n polynomial in the y direction.\n (same as in last call to db2ink ) integer, intent(in) :: nx the number of interpolation points in x.\n (same as in last call to db2ink ) integer, intent(in) :: ny the number of interpolation points in y.\n (same as in last call to db2ink ) integer, intent(in) :: kx order of polynomial pieces in x.\n (same as in last call to db2ink ) integer, intent(in) :: ky order of polynomial pieces in y.\n (same as in last call to db2ink ) real(kind=wp), intent(in), dimension(nx,ny) :: bcoef the b-spline coefficients computed by db2ink . real(kind=wp), intent(out) :: f interpolated value integer, intent(out) :: iflag status flag: integer, intent(inout) :: inbvx initialization parameter which must be set to 1\n the first time this routine is called,\n and must not be changed by the user. integer, intent(inout) :: inbvy initialization parameter which must be set to 1\n the first time this routine is called,\n and must not be changed by the user. integer, intent(inout) :: iloy initialization parameter which must be set to 1\n the first time this routine is called,\n and must not be changed by the user. logical, intent(in), optional :: extrap if extrapolation is allowed\n (if not present, default is False) public pure subroutine db3ink (x, nx, y, ny, z, nz, fcn, kx, ky, kz, iknot, tx, ty, tz, bcoef, iflag) Determines the parameters of a function that interpolates\n  the three-dimensional gridded data\n   [x(i),y(j),z(k),\\mathrm{fcn}(i,j,k)] ~\\mathrm{for}~\n     i=1,..,n_x ~\\mathrm{and}~ j=1,..,n_y, ~\\mathrm{and}~ k=1,..,n_z \n  The interpolating function and\n  its derivatives may subsequently be evaluated by the function db3val . Arguments Type Intent Optional Attributes Name real(kind=wp), intent(in), dimension(:) :: x (nx) array of x abcissae. must be strictly increasing. integer, intent(in) :: nx number of x abcissae (  \\ge 3  ) real(kind=wp), intent(in), dimension(:) :: y (ny) array of y abcissae. must be strictly increasing. integer, intent(in) :: ny number of y abcissae (  \\ge 3  ) real(kind=wp), intent(in), dimension(:) :: z (nz) array of z abcissae. must be strictly increasing. integer, intent(in) :: nz number of z abcissae (  \\ge 3  ) real(kind=wp), intent(in), dimension(:,:,:) :: fcn (nx,ny,nz) matrix of function values to interpolate. fcn(i,j,k) should\n contain the function value at the point ( x(i) , y(j) , z(k) ) integer, intent(in) :: kx The order of spline pieces in x\n (  2 \\le k_x < n_x  )\n (order = polynomial degree + 1) integer, intent(in) :: ky The order of spline pieces in y\n (  2 \\le k_y < n_y  )\n (order = polynomial degree + 1) integer, intent(in) :: kz the order of spline pieces in z\n (  2 \\le k_z < n_z  )\n (order = polynomial degree + 1) integer, intent(in) :: iknot knot sequence flag: real(kind=wp), intent(inout), dimension(:) :: tx The (nx+kx) knots in the x direction for the spline interpolant. real(kind=wp), intent(inout), dimension(:) :: ty The (ny+ky) knots in the y direction for the spline interpolant. real(kind=wp), intent(inout), dimension(:) :: tz The (nz+kz) knots in the z direction for the spline interpolant. real(kind=wp), intent(out), dimension(:,:,:) :: bcoef (nx,ny,nz) matrix of coefficients of the b-spline interpolant. integer, intent(out) :: iflag public pure subroutine db3val (xval, yval, zval, idx, idy, idz, tx, ty, tz, nx, ny, nz, kx, ky, kz, bcoef, f, iflag, inbvx, inbvy, inbvz, iloy, iloz, extrap) Evaluates the tensor product piecewise polynomial\n  interpolant constructed by the routine db3ink or one of its\n  derivatives at the point ( xval , yval , zval ). Arguments Type Intent Optional Attributes Name real(kind=wp), intent(in) :: xval x coordinate of evaluation point. real(kind=wp), intent(in) :: yval y coordinate of evaluation point. real(kind=wp), intent(in) :: zval z coordinate of evaluation point. integer, intent(in) :: idx x derivative of piecewise polynomial to evaluate. integer, intent(in) :: idy y derivative of piecewise polynomial to evaluate. integer, intent(in) :: idz z derivative of piecewise polynomial to evaluate. real(kind=wp), intent(in), dimension(nx+kx) :: tx sequence of knots defining the piecewise polynomial\n in the x direction. (same as in last call to db3ink ) real(kind=wp), intent(in), dimension(ny+ky) :: ty sequence of knots defining the piecewise polynomial\n in the y direction. (same as in last call to db3ink ) real(kind=wp), intent(in), dimension(nz+kz) :: tz sequence of knots defining the piecewise polynomial\n in the z direction. (same as in last call to db3ink ) integer, intent(in) :: nx the number of interpolation points in x.\n (same as in last call to db3ink ) integer, intent(in) :: ny the number of interpolation points in y.\n (same as in last call to db3ink ) integer, intent(in) :: nz the number of interpolation points in z.\n (same as in last call to db3ink ) integer, intent(in) :: kx order of polynomial pieces in z.\n (same as in last call to db3ink ) integer, intent(in) :: ky order of polynomial pieces in y.\n (same as in last call to db3ink ) integer, intent(in) :: kz order of polynomial pieces in z.\n (same as in last call to db3ink ) real(kind=wp), intent(in), dimension(nx,ny,nz) :: bcoef the b-spline coefficients computed by db3ink . real(kind=wp), intent(out) :: f interpolated value integer, intent(out) :: iflag status flag: integer, intent(inout) :: inbvx initialization parameter which must be\n set to 1 the first time this routine is called,\n and must not be changed by the user. integer, intent(inout) :: inbvy initialization parameter which must be\n set to 1 the first time this routine is called,\n and must not be changed by the user. integer, intent(inout) :: inbvz initialization parameter which must be\n set to 1 the first time this routine is called,\n and must not be changed by the user. integer, intent(inout) :: iloy initialization parameter which must be\n set to 1 the first time this routine is called,\n and must not be changed by the user. integer, intent(inout) :: iloz initialization parameter which must be\n set to 1 the first time this routine is called,\n and must not be changed by the user. logical, intent(in), optional :: extrap if extrapolation is allowed\n (if not present, default is False) public pure subroutine db4ink (x, nx, y, ny, z, nz, q, nq, fcn, kx, ky, kz, kq, iknot, tx, ty, tz, tq, bcoef, iflag) Determines the parameters of a function that interpolates\n  the four-dimensional gridded data\n   [x(i),y(j),z(k),q(l),\\mathrm{fcn}(i,j,k,l)] ~\\mathrm{for}~\n     i=1,..,n_x ~\\mathrm{and}~ j=1,..,n_y, ~\\mathrm{and}~ k=1,..,n_z,\n     ~\\mathrm{and}~ l=1,..,n_q \n  The interpolating function and its derivatives may\n  subsequently be evaluated by the function db4val . Arguments Type Intent Optional Attributes Name real(kind=wp), intent(in), dimension(:) :: x (nx) array of x abcissae. must be strictly increasing. integer, intent(in) :: nx number of x abcissae (  \\ge 3  ) real(kind=wp), intent(in), dimension(:) :: y (ny) array of y abcissae. must be strictly increasing. integer, intent(in) :: ny number of y abcissae (  \\ge 3  ) real(kind=wp), intent(in), dimension(:) :: z (nz) array of z abcissae. must be strictly increasing. integer, intent(in) :: nz number of z abcissae (  \\ge 3  ) real(kind=wp), intent(in), dimension(:) :: q (nq) array of q abcissae. must be strictly increasing. integer, intent(in) :: nq number of q abcissae (  \\ge 3  ) real(kind=wp), intent(in), dimension(:,:,:,:) :: fcn (nx,ny,nz,nq) matrix of function values to interpolate. fcn(i,j,k,q) should\n contain the function value at the point ( x(i) , y(j) , z(k) , q(l) ) integer, intent(in) :: kx the order of spline pieces in x\n (  2 \\le k_x < n_x  ).\n (order = polynomial degree + 1) integer, intent(in) :: ky the order of spline pieces in y\n (  2 \\le k_y < n_y  ).\n (order = polynomial degree + 1) integer, intent(in) :: kz the order of spline pieces in z\n (  2 \\le k_z < n_z  ).\n (order = polynomial degree + 1) integer, intent(in) :: kq the order of spline pieces in q\n (  2 \\le k_q < n_q  ).\n (order = polynomial degree + 1) integer, intent(in) :: iknot knot sequence flag: real(kind=wp), intent(inout), dimension(:) :: tx The (nx+kx) knots in the x direction for the spline interpolant. real(kind=wp), intent(inout), dimension(:) :: ty The (ny+ky) knots in the y direction for the spline interpolant. real(kind=wp), intent(inout), dimension(:) :: tz The (nz+kz) knots in the z direction for the spline interpolant. real(kind=wp), intent(inout), dimension(:) :: tq The (nq+kq) knots in the q direction for the spline interpolant. real(kind=wp), intent(out), dimension(:,:,:,:) :: bcoef (nx,ny,nz,nq) matrix of coefficients of the b-spline interpolant. integer, intent(out) :: iflag public pure subroutine db4val (xval, yval, zval, qval, idx, idy, idz, idq, tx, ty, tz, tq, nx, ny, nz, nq, kx, ky, kz, kq, bcoef, f, iflag, inbvx, inbvy, inbvz, inbvq, iloy, iloz, iloq, extrap) Evaluates the tensor product piecewise polynomial\n  interpolant constructed by the routine db4ink or one of its\n  derivatives at the point ( xval , yval , zval , qval ). Arguments Type Intent Optional Attributes Name real(kind=wp), intent(in) :: xval x coordinate of evaluation point. real(kind=wp), intent(in) :: yval y coordinate of evaluation point. real(kind=wp), intent(in) :: zval z coordinate of evaluation point. real(kind=wp), intent(in) :: qval q coordinate of evaluation point. integer, intent(in) :: idx x derivative of piecewise polynomial to evaluate. integer, intent(in) :: idy y derivative of piecewise polynomial to evaluate. integer, intent(in) :: idz z derivative of piecewise polynomial to evaluate. integer, intent(in) :: idq q derivative of piecewise polynomial to evaluate. real(kind=wp), intent(in), dimension(nx+kx) :: tx sequence of knots defining the piecewise polynomial\n in the x direction. (same as in last call to db4ink ) real(kind=wp), intent(in), dimension(ny+ky) :: ty sequence of knots defining the piecewise polynomial\n in the y direction. (same as in last call to db4ink ) real(kind=wp), intent(in), dimension(nz+kz) :: tz sequence of knots defining the piecewise polynomial\n in the z direction. (same as in last call to db4ink ) real(kind=wp), intent(in), dimension(nq+kq) :: tq sequence of knots defining the piecewise polynomial\n in the q direction. (same as in last call to db4ink ) integer, intent(in) :: nx the number of interpolation points in x.\n (same as in last call to db4ink ) integer, intent(in) :: ny the number of interpolation points in y.\n (same as in last call to db4ink ) integer, intent(in) :: nz the number of interpolation points in z.\n (same as in last call to db4ink ) integer, intent(in) :: nq the number of interpolation points in q.\n (same as in last call to db4ink ) integer, intent(in) :: kx order of polynomial pieces in x.\n (same as in last call to db4ink ) integer, intent(in) :: ky order of polynomial pieces in y.\n (same as in last call to db4ink ) integer, intent(in) :: kz order of polynomial pieces in z.\n (same as in last call to db4ink ) integer, intent(in) :: kq order of polynomial pieces in q.\n (same as in last call to db4ink ) real(kind=wp), intent(in), dimension(nx,ny,nz,nq) :: bcoef the b-spline coefficients computed by db4ink . real(kind=wp), intent(out) :: f interpolated value integer, intent(out) :: iflag status flag: integer, intent(inout) :: inbvx initialization parameter which must be set\n to 1 the first time this routine is called,\n and must not be changed by the user. integer, intent(inout) :: inbvy initialization parameter which must be set\n to 1 the first time this routine is called,\n and must not be changed by the user. integer, intent(inout) :: inbvz initialization parameter which must be set\n to 1 the first time this routine is called,\n and must not be changed by the user. integer, intent(inout) :: inbvq initialization parameter which must be set\n to 1 the first time this routine is called,\n and must not be changed by the user. integer, intent(inout) :: iloy initialization parameter which must be set\n to 1 the first time this routine is called,\n and must not be changed by the user. integer, intent(inout) :: iloz initialization parameter which must be set\n to 1 the first time this routine is called,\n and must not be changed by the user. integer, intent(inout) :: iloq initialization parameter which must be set\n to 1 the first time this routine is called,\n and must not be changed by the user. logical, intent(in), optional :: extrap if extrapolation is allowed\n (if not present, default is False) public pure subroutine db5ink (x, nx, y, ny, z, nz, q, nq, r, nr, fcn, kx, ky, kz, kq, kr, iknot, tx, ty, tz, tq, tr, bcoef, iflag) Determines the parameters of a function that interpolates\n the five-dimensional gridded data: Arguments Type Intent Optional Attributes Name real(kind=wp), intent(in), dimension(:) :: x (nx) array of x abcissae. must be strictly increasing. integer, intent(in) :: nx number of x abcissae (  \\ge 3  ) real(kind=wp), intent(in), dimension(:) :: y (ny) array of y abcissae. must be strictly increasing. integer, intent(in) :: ny number of y abcissae (  \\ge 3  ) real(kind=wp), intent(in), dimension(:) :: z (nz) array of z abcissae. must be strictly increasing. integer, intent(in) :: nz number of z abcissae (  \\ge 3  ) real(kind=wp), intent(in), dimension(:) :: q (nq) array of q abcissae. must be strictly increasing. integer, intent(in) :: nq number of q abcissae (  \\ge 3  ) real(kind=wp), intent(in), dimension(:) :: r (nr) array of r abcissae. must be strictly increasing. integer, intent(in) :: nr number of r abcissae (  \\ge 3  ) real(kind=wp), intent(in), dimension(:,:,:,:,:) :: fcn (nx,ny,nz,nq,nr) matrix of function values to interpolate. fcn(i,j,k,q,r) should\n contain the function value at the point ( x(i) , y(j) , z(k) , q(l) , r(m) ) integer, intent(in) :: kx the order of spline pieces in x\n (  2 \\le k_x < n_x  ).\n (order = polynomial degree + 1) integer, intent(in) :: ky the order of spline pieces in y\n (  2 \\le k_y < n_y  ).\n (order = polynomial degree + 1) integer, intent(in) :: kz the order of spline pieces in z\n (  2 \\le k_z < n_z  ).\n (order = polynomial degree + 1) integer, intent(in) :: kq the order of spline pieces in q\n (  2 \\le k_q < n_q  ).\n (order = polynomial degree + 1) integer, intent(in) :: kr the order of spline pieces in r\n (  2 \\le k_r < n_r  ).\n (order = polynomial degree + 1) integer, intent(in) :: iknot knot sequence flag: real(kind=wp), intent(inout), dimension(:) :: tx The (nx+kx) knots in the x direction for the spline interpolant. real(kind=wp), intent(inout), dimension(:) :: ty The (ny+ky) knots in the y direction for the spline interpolant. real(kind=wp), intent(inout), dimension(:) :: tz The (nz+kz) knots in the z direction for the spline interpolant. real(kind=wp), intent(inout), dimension(:) :: tq The (nq+kq) knots in the q direction for the spline interpolant. real(kind=wp), intent(inout), dimension(:) :: tr The (nr+kr) knots in the r direction for the spline interpolant. real(kind=wp), intent(out), dimension(:,:,:,:,:) :: bcoef (nx,ny,nz,nq,nr) matrix of coefficients of the b-spline interpolant. integer, intent(out) :: iflag public pure subroutine db5val (xval, yval, zval, qval, rval, idx, idy, idz, idq, idr, tx, ty, tz, tq, tr, nx, ny, nz, nq, nr, kx, ky, kz, kq, kr, bcoef, f, iflag, inbvx, inbvy, inbvz, inbvq, inbvr, iloy, iloz, iloq, ilor, extrap) Evaluates the tensor product piecewise polynomial\n  interpolant constructed by the routine db5ink or one of its\n  derivatives at the point ( xval , yval , zval , qval , rval ). Arguments Type Intent Optional Attributes Name real(kind=wp), intent(in) :: xval x coordinate of evaluation point. real(kind=wp), intent(in) :: yval y coordinate of evaluation point. real(kind=wp), intent(in) :: zval z coordinate of evaluation point. real(kind=wp), intent(in) :: qval q coordinate of evaluation point. real(kind=wp), intent(in) :: rval r coordinate of evaluation point. integer, intent(in) :: idx x derivative of piecewise polynomial to evaluate. integer, intent(in) :: idy y derivative of piecewise polynomial to evaluate. integer, intent(in) :: idz z derivative of piecewise polynomial to evaluate. integer, intent(in) :: idq q derivative of piecewise polynomial to evaluate. integer, intent(in) :: idr r derivative of piecewise polynomial to evaluate. real(kind=wp), intent(in), dimension(nx+kx) :: tx sequence of knots defining the piecewise polynomial\n in the x direction.\n (same as in last call to db5ink ) real(kind=wp), intent(in), dimension(ny+ky) :: ty sequence of knots defining the piecewise polynomial\n in the y direction.\n (same as in last call to db5ink ) real(kind=wp), intent(in), dimension(nz+kz) :: tz sequence of knots defining the piecewise polynomial\n in the z direction.\n (same as in last call to db5ink ) real(kind=wp), intent(in), dimension(nq+kq) :: tq sequence of knots defining the piecewise polynomial\n in the q direction.\n (same as in last call to db5ink ) real(kind=wp), intent(in), dimension(nr+kr) :: tr sequence of knots defining the piecewise polynomial\n in the r direction.\n (same as in last call to db5ink ) integer, intent(in) :: nx the number of interpolation points in x.\n (same as in last call to db5ink ) integer, intent(in) :: ny the number of interpolation points in y.\n (same as in last call to db5ink ) integer, intent(in) :: nz the number of interpolation points in z.\n (same as in last call to db5ink ) integer, intent(in) :: nq the number of interpolation points in q.\n (same as in last call to db5ink ) integer, intent(in) :: nr the number of interpolation points in r.\n (same as in last call to db5ink ) integer, intent(in) :: kx order of polynomial pieces in x.\n (same as in last call to db5ink ) integer, intent(in) :: ky order of polynomial pieces in y.\n (same as in last call to db5ink ) integer, intent(in) :: kz order of polynomial pieces in z.\n (same as in last call to db5ink ) integer, intent(in) :: kq order of polynomial pieces in q.\n (same as in last call to db5ink ) integer, intent(in) :: kr order of polynomial pieces in r.\n (same as in last call to db5ink ) real(kind=wp), intent(in), dimension(nx,ny,nz,nq,nr) :: bcoef the b-spline coefficients computed by db5ink . real(kind=wp), intent(out) :: f interpolated value integer, intent(out) :: iflag status flag: integer, intent(inout) :: inbvx initialization parameter which must be set\n to 1 the first time this routine is called,\n and must not be changed by the user. integer, intent(inout) :: inbvy initialization parameter which must be set\n to 1 the first time this routine is called,\n and must not be changed by the user. integer, intent(inout) :: inbvz initialization parameter which must be set\n to 1 the first time this routine is called,\n and must not be changed by the user. integer, intent(inout) :: inbvq initialization parameter which must be set\n to 1 the first time this routine is called,\n and must not be changed by the user. integer, intent(inout) :: inbvr initialization parameter which must be set\n to 1 the first time this routine is called,\n and must not be changed by the user. integer, intent(inout) :: iloy initialization parameter which must be set\n to 1 the first time this routine is called,\n and must not be changed by the user. integer, intent(inout) :: iloz initialization parameter which must be set\n to 1 the first time this routine is called,\n and must not be changed by the user. integer, intent(inout) :: iloq initialization parameter which must be set\n to 1 the first time this routine is called,\n and must not be changed by the user. integer, intent(inout) :: ilor initialization parameter which must be set\n to 1 the first time this routine is called,\n and must not be changed by the user. logical, intent(in), optional :: extrap if extrapolation is allowed\n (if not present, default is False) public pure subroutine db6ink (x, nx, y, ny, z, nz, q, nq, r, nr, s, ns, fcn, kx, ky, kz, kq, kr, ks, iknot, tx, ty, tz, tq, tr, ts, bcoef, iflag) Determines the parameters of a function that interpolates\n  the six-dimensional gridded data: Arguments Type Intent Optional Attributes Name real(kind=wp), intent(in), dimension(:) :: x (nx) array of x abcissae.\n must be strictly increasing. integer, intent(in) :: nx number of x abcissae (  \\ge 3  ) real(kind=wp), intent(in), dimension(:) :: y (ny) array of y abcissae.\n must be strictly increasing. integer, intent(in) :: ny number of y abcissae (  \\ge 3  ) real(kind=wp), intent(in), dimension(:) :: z (nz) array of z abcissae.\n must be strictly increasing. integer, intent(in) :: nz number of z abcissae (  \\ge 3  ) real(kind=wp), intent(in), dimension(:) :: q (nq) array of q abcissae.\n must be strictly increasing. integer, intent(in) :: nq number of q abcissae (  \\ge 3  ) real(kind=wp), intent(in), dimension(:) :: r (nr) array of r abcissae.\n must be strictly increasing. integer, intent(in) :: nr number of r abcissae (  \\ge 3  ) real(kind=wp), intent(in), dimension(:) :: s (ns) array of s abcissae.\n must be strictly increasing. integer, intent(in) :: ns number of s abcissae (  \\ge 3  ) real(kind=wp), intent(in), dimension(:,:,:,:,:,:) :: fcn (nx,ny,nz,nq,nr,ns) matrix of function values to interpolate. fcn(i,j,k,q,r,s) should contain the function value\n at the point ( x(i) , y(j) , z(k) , q(l) , r(m) , s(n) ) integer, intent(in) :: kx the order of spline pieces in x\n (  2 \\le k_x < n_x  )\n (order = polynomial degree + 1) integer, intent(in) :: ky the order of spline pieces in y\n (  2 \\le k_y < n_y  )\n (order = polynomial degree + 1) integer, intent(in) :: kz the order of spline pieces in z\n (  2 \\le k_z < n_z  )\n (order = polynomial degree + 1) integer, intent(in) :: kq the order of spline pieces in q\n (  2 \\le k_q < n_q  )\n (order = polynomial degree + 1) integer, intent(in) :: kr the order of spline pieces in r\n (  2 \\le k_r < n_r  )\n (order = polynomial degree + 1) integer, intent(in) :: ks the order of spline pieces in s\n (  2 \\le k_s < n_s  )\n (order = polynomial degree + 1) integer, intent(in) :: iknot knot sequence flag: real(kind=wp), intent(inout), dimension(:) :: tx The (nx+kx) knots in the x direction for the spline interpolant. real(kind=wp), intent(inout), dimension(:) :: ty The (ny+ky) knots in the y direction for the spline interpolant. real(kind=wp), intent(inout), dimension(:) :: tz The (nz+kz) knots in the z direction for the spline interpolant. real(kind=wp), intent(inout), dimension(:) :: tq The (nq+kq) knots in the q direction for the spline interpolant. real(kind=wp), intent(inout), dimension(:) :: tr The (nr+kr) knots in the r direction for the spline interpolant. real(kind=wp), intent(inout), dimension(:) :: ts The (ns+ks) knots in the s direction for the spline interpolant. real(kind=wp), intent(out), dimension(:,:,:,:,:,:) :: bcoef (nx,ny,nz,nq,nr,ns) matrix of coefficients of the b-spline interpolant. integer, intent(out) :: iflag public pure subroutine db6val (xval, yval, zval, qval, rval, sval, idx, idy, idz, idq, idr, ids, tx, ty, tz, tq, tr, ts, nx, ny, nz, nq, nr, ns, kx, ky, kz, kq, kr, ks, bcoef, f, iflag, inbvx, inbvy, inbvz, inbvq, inbvr, inbvs, iloy, iloz, iloq, ilor, ilos, extrap) Evaluates the tensor product piecewise polynomial\n  interpolant constructed by the routine db6ink or one of its\n  derivatives at the point ( xval , yval , zval , qval , rval , sval ). Arguments Type Intent Optional Attributes Name real(kind=wp), intent(in) :: xval x coordinate of evaluation point. real(kind=wp), intent(in) :: yval y coordinate of evaluation point. real(kind=wp), intent(in) :: zval z coordinate of evaluation point. real(kind=wp), intent(in) :: qval q coordinate of evaluation point. real(kind=wp), intent(in) :: rval r coordinate of evaluation point. real(kind=wp), intent(in) :: sval s coordinate of evaluation point. integer, intent(in) :: idx x derivative of piecewise polynomial to evaluate. integer, intent(in) :: idy y derivative of piecewise polynomial to evaluate. integer, intent(in) :: idz z derivative of piecewise polynomial to evaluate. integer, intent(in) :: idq q derivative of piecewise polynomial to evaluate. integer, intent(in) :: idr r derivative of piecewise polynomial to evaluate. integer, intent(in) :: ids s derivative of piecewise polynomial to evaluate. real(kind=wp), intent(in), dimension(nx+kx) :: tx sequence of knots defining the piecewise polynomial\n in the x direction.\n (same as in last call to db6ink ) real(kind=wp), intent(in), dimension(ny+ky) :: ty sequence of knots defining the piecewise polynomial\n in the y direction.\n (same as in last call to db6ink ) real(kind=wp), intent(in), dimension(nz+kz) :: tz sequence of knots defining the piecewise polynomial\n in the z direction.\n (same as in last call to db6ink ) real(kind=wp), intent(in), dimension(nq+kq) :: tq sequence of knots defining the piecewise polynomial\n in the q direction.\n (same as in last call to db6ink ) real(kind=wp), intent(in), dimension(nr+kr) :: tr sequence of knots defining the piecewise polynomial\n in the r direction.\n (same as in last call to db6ink ) real(kind=wp), intent(in), dimension(ns+ks) :: ts sequence of knots defining the piecewise polynomial\n in the s direction.\n (same as in last call to db6ink ) integer, intent(in) :: nx the number of interpolation points in x.\n (same as in last call to db6ink ) integer, intent(in) :: ny the number of interpolation points in y.\n (same as in last call to db6ink ) integer, intent(in) :: nz the number of interpolation points in z.\n (same as in last call to db6ink ) integer, intent(in) :: nq the number of interpolation points in q.\n (same as in last call to db6ink ) integer, intent(in) :: nr the number of interpolation points in r.\n (same as in last call to db6ink ) integer, intent(in) :: ns the number of interpolation points in s.\n (same as in last call to db6ink ) integer, intent(in) :: kx order of polynomial pieces in x.\n (same as in last call to db6ink ) integer, intent(in) :: ky order of polynomial pieces in y.\n (same as in last call to db6ink ) integer, intent(in) :: kz order of polynomial pieces in z.\n (same as in last call to db6ink ) integer, intent(in) :: kq order of polynomial pieces in q.\n (same as in last call to db6ink ) integer, intent(in) :: kr order of polynomial pieces in r.\n (same as in last call to db6ink ) integer, intent(in) :: ks order of polynomial pieces in s.\n (same as in last call to db6ink ) real(kind=wp), intent(in), dimension(nx,ny,nz,nq,nr,ns) :: bcoef the b-spline coefficients computed by db6ink . real(kind=wp), intent(out) :: f interpolated value integer, intent(out) :: iflag status flag: integer, intent(inout) :: inbvx initialization parameter which must be set\n to 1 the first time this routine is called,\n and must not be changed by the user. integer, intent(inout) :: inbvy initialization parameter which must be set\n to 1 the first time this routine is called,\n and must not be changed by the user. integer, intent(inout) :: inbvz initialization parameter which must be set\n to 1 the first time this routine is called,\n and must not be changed by the user. integer, intent(inout) :: inbvq initialization parameter which must be set\n to 1 the first time this routine is called,\n and must not be changed by the user. integer, intent(inout) :: inbvr initialization parameter which must be set\n to 1 the first time this routine is called,\n and must not be changed by the user. integer, intent(inout) :: inbvs initialization parameter which must be set\n to 1 the first time this routine is called,\n and must not be changed by the user. integer, intent(inout) :: iloy initialization parameter which must be set\n to 1 the first time this routine is called,\n and must not be changed by the user. integer, intent(inout) :: iloz initialization parameter which must be set\n to 1 the first time this routine is called,\n and must not be changed by the user. integer, intent(inout) :: iloq initialization parameter which must be set\n to 1 the first time this routine is called,\n and must not be changed by the user. integer, intent(inout) :: ilor initialization parameter which must be set\n to 1 the first time this routine is called,\n and must not be changed by the user. integer, intent(inout) :: ilos initialization parameter which must be set\n to 1 the first time this routine is called,\n and must not be changed by the user. logical, intent(in), optional :: extrap if extrapolation is allowed\n (if not present, default is False)","tags":"","loc":"module/bspline_sub_module.html","title":"bspline_sub_module â€“ bspline-fortran"},{"text":"Uses: bspline_oo_module bspline_sub_module module~~bspline_module~~UsesGraph module~bspline_module bspline_module module~bspline_sub_module bspline_sub_module module~bspline_sub_module->module~bspline_module module~bspline_oo_module bspline_oo_module module~bspline_sub_module->module~bspline_oo_module module~bspline_oo_module->module~bspline_module iso_fortran_env iso_fortran_env iso_fortran_env->module~bspline_sub_module iso_fortran_env->module~bspline_oo_module Help Ã— Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a parent (sub)module to the submodule which is\n    descended from it. Dashed arrows point from a module being used to the\n    module or program unit using it. Description Multidimensional (1D-6D) B-Spline interpolation of data on a regular grid.\n  This module uses both the subroutine and object-oriented modules. Used By module~~bspline_module~~UsedByGraph module~bspline_module bspline_module program~bspline_regridding_test bspline_regridding_test module~bspline_module->program~bspline_regridding_test program~bspline_integrate_test bspline_integrate_test module~bspline_module->program~bspline_integrate_test program~bspline_speed_test bspline_speed_test module~bspline_module->program~bspline_speed_test program~bspline_oo_test bspline_oo_test module~bspline_module->program~bspline_oo_test program~knot_tests knot_tests module~bspline_module->program~knot_tests program~bspline_speed_test_oo bspline_speed_test_oo module~bspline_module->program~bspline_speed_test_oo program~bspline_test bspline_test module~bspline_module->program~bspline_test program~bspline_extrap_test bspline_extrap_test module~bspline_module->program~bspline_extrap_test Help Ã— Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a parent (sub)module to the submodule which is\n    descended from it. Dashed arrows point from a module being used to the\n    module or program unit using it.","tags":"","loc":"module/bspline_module.html","title":"bspline_module â€“ bspline-fortran"},{"text":"Uses: iso_fortran_env iso_fortran_env bspline_sub_module module~~bspline_oo_module~~UsesGraph module~bspline_oo_module bspline_oo_module iso_fortran_env iso_fortran_env iso_fortran_env->module~bspline_oo_module module~bspline_sub_module bspline_sub_module iso_fortran_env->module~bspline_sub_module module~bspline_sub_module->module~bspline_oo_module Help Ã— Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a parent (sub)module to the submodule which is\n    descended from it. Dashed arrows point from a module being used to the\n    module or program unit using it. Object-oriented style wrappers to bspline_sub_module .\n  This module provides classes ( bspline_1d , bspline_2d , bspline_3d , bspline_4d , bspline_5d , and bspline_6d )\n  which can be used instead of the main subroutine interface. Used By module~~bspline_oo_module~~UsedByGraph module~bspline_oo_module bspline_oo_module module~bspline_module bspline_module module~bspline_oo_module->module~bspline_module program~bspline_regridding_test bspline_regridding_test module~bspline_module->program~bspline_regridding_test program~bspline_integrate_test bspline_integrate_test module~bspline_module->program~bspline_integrate_test program~bspline_speed_test bspline_speed_test module~bspline_module->program~bspline_speed_test program~bspline_oo_test bspline_oo_test module~bspline_module->program~bspline_oo_test program~knot_tests knot_tests module~bspline_module->program~knot_tests program~bspline_speed_test_oo bspline_speed_test_oo module~bspline_module->program~bspline_speed_test_oo program~bspline_test bspline_test module~bspline_module->program~bspline_test program~bspline_extrap_test bspline_extrap_test module~bspline_module->program~bspline_extrap_test Help Ã— Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a parent (sub)module to the submodule which is\n    descended from it. Dashed arrows point from a module being used to the\n    module or program unit using it. Interfaces bspline_1d bspline_2d bspline_3d bspline_4d bspline_5d bspline_6d Derived Types bspline_class bspline_1d bspline_2d bspline_3d bspline_4d bspline_5d bspline_6d Interfaces public interface bspline_1d Constructor for bspline_1d private pure elemental function bspline_1d_constructor_empty() result(me) It returns an empty [[bspline_1d]] type. Note that INITIALIZE still\n  needs to be called before it can be used.\n  Not really that useful except perhaps in some OpenMP applications. Arguments None Return Value type( bspline_1d ) private pure function bspline_1d_constructor_auto_knots(x, fcn, kx, extrap) result(me) Constructor for a [[bspline_1d]] type (auto knots).\n  This is a wrapper for [[initialize_1d_auto_knots]]. Arguments Type Intent Optional Attributes Name real(kind=wp), intent(in), dimension(:) :: x (nx) array of x abcissae. Must be strictly increasing. real(kind=wp), intent(in), dimension(:) :: fcn (nx) array of function values to interpolate. fcn(i) should\n contain the function value at the point x(i) integer, intent(in) :: kx The order of spline pieces in x\n (  2 \\le k_x < n_x  )\n (order = polynomial degree + 1) logical, intent(in), optional :: extrap if true, then extrapolation is allowed\n (default is false) Return Value type( bspline_1d ) private pure function bspline_1d_constructor_specify_knots(x, fcn, kx, tx, extrap) result(me) Constructor for a [[bspline_1d]] type (user-specified knots).\n  This is a wrapper for [[initialize_1d_specify_knots]]. Arguments Type Intent Optional Attributes Name real(kind=wp), intent(in), dimension(:) :: x (nx) array of x abcissae. Must be strictly increasing. real(kind=wp), intent(in), dimension(:) :: fcn (nx) array of function values to interpolate. fcn(i) should\n contain the function value at the point x(i) integer, intent(in) :: kx The order of spline pieces in x\n (  2 \\le k_x < n_x  )\n (order = polynomial degree + 1) real(kind=wp), intent(in), dimension(:) :: tx The (nx+kx) knots in the x direction\n for the spline interpolant.\n Must be non-decreasing. logical, intent(in), optional :: extrap if true, then extrapolation is allowed\n (default is false) Return Value type( bspline_1d ) public interface bspline_2d Constructor for bspline_2d private elemental function bspline_2d_constructor_empty() result(me) It returns an empty [[bspline_2d]] type. Note that INITIALIZE still\n  needs to be called before it can be used.\n  Not really that useful except perhaps in some OpenMP applications. Arguments None Return Value type( bspline_2d ) private pure function bspline_2d_constructor_auto_knots(x, y, fcn, kx, ky, extrap) result(me) Constructor for a [[bspline_2d]] type (auto knots).\n  This is a wrapper for [[initialize_2d_auto_knots]]. Arguments Type Intent Optional Attributes Name real(kind=wp), intent(in), dimension(:) :: x (nx) array of x abcissae. Must be strictly increasing. real(kind=wp), intent(in), dimension(:) :: y (ny) array of y abcissae. Must be strictly increasing. real(kind=wp), intent(in), dimension(:,:) :: fcn (nx,ny) matrix of function values to interpolate. fcn(i,j) should contain the function value at the\n point ( x(i) , y(j) ) integer, intent(in) :: kx The order of spline pieces in x\n (  2 \\le k_x < n_x  )\n (order = polynomial degree + 1) integer, intent(in) :: ky The order of spline pieces in y\n (  2 \\le k_y < n_y  )\n (order = polynomial degree + 1) logical, intent(in), optional :: extrap if true, then extrapolation is allowed\n (default is false) Return Value type( bspline_2d ) private pure function bspline_2d_constructor_specify_knots(x, y, fcn, kx, ky, tx, ty, extrap) result(me) Constructor for a [[bspline_2d]] type (user-specified knots).\n  This is a wrapper for [[initialize_2d_specify_knots]]. Arguments Type Intent Optional Attributes Name real(kind=wp), intent(in), dimension(:) :: x (nx) array of x abcissae. Must be strictly increasing. real(kind=wp), intent(in), dimension(:) :: y (ny) array of y abcissae. Must be strictly increasing. real(kind=wp), intent(in), dimension(:,:) :: fcn (nx,ny) matrix of function values to interpolate. fcn(i,j) should contain the function value at the\n point ( x(i) , y(j) ) integer, intent(in) :: kx The order of spline pieces in x\n (  2 \\le k_x < n_x  )\n (order = polynomial degree + 1) integer, intent(in) :: ky The order of spline pieces in y\n (  2 \\le k_y < n_y  )\n (order = polynomial degree + 1) real(kind=wp), intent(in), dimension(:) :: tx The (nx+kx) knots in the x direction\n for the spline interpolant.\n Must be non-decreasing. real(kind=wp), intent(in), dimension(:) :: ty The (ny+ky) knots in the y direction\n for the spline interpolant.\n Must be non-decreasing. logical, intent(in), optional :: extrap if true, then extrapolation is allowed\n (default is false) Return Value type( bspline_2d ) public interface bspline_3d Constructor for bspline_3d private elemental function bspline_3d_constructor_empty() result(me) It returns an empty [[bspline_3d]] type. Note that INITIALIZE still\n  needs to be called before it can be used.\n  Not really that useful except perhaps in some OpenMP applications. Arguments None Return Value type( bspline_3d ) private pure function bspline_3d_constructor_auto_knots(x, y, z, fcn, kx, ky, kz, extrap) result(me) Constructor for a [[bspline_3d]] type (auto knots).\n  This is a wrapper for [[initialize_3d_auto_knots]]. Arguments Type Intent Optional Attributes Name real(kind=wp), intent(in), dimension(:) :: x (nx) array of x abcissae. Must be strictly increasing. real(kind=wp), intent(in), dimension(:) :: y (ny) array of y abcissae. Must be strictly increasing. real(kind=wp), intent(in), dimension(:) :: z (nz) array of z abcissae. Must be strictly increasing. real(kind=wp), intent(in), dimension(:,:,:) :: fcn (nx,ny,nz) matrix of function values to interpolate. fcn(i,j,k) should contain the function value at the\n point ( x(i) , y(j) , z(k) ) integer, intent(in) :: kx The order of spline pieces in x\n (  2 \\le k_x < n_x  )\n (order = polynomial degree + 1) integer, intent(in) :: ky The order of spline pieces in y\n (  2 \\le k_y < n_y  )\n (order = polynomial degree + 1) integer, intent(in) :: kz The order of spline pieces in z\n (  2 \\le k_z < n_z  )\n (order = polynomial degree + 1) logical, intent(in), optional :: extrap if true, then extrapolation is allowed\n (default is false) Return Value type( bspline_3d ) private pure function bspline_3d_constructor_specify_knots(x, y, z, fcn, kx, ky, kz, tx, ty, tz, extrap) result(me) Constructor for a [[bspline_3d]] type (user-specified knots).\n  This is a wrapper for [[initialize_3d_specify_knots]]. Arguments Type Intent Optional Attributes Name real(kind=wp), intent(in), dimension(:) :: x (nx) array of x abcissae. Must be strictly increasing. real(kind=wp), intent(in), dimension(:) :: y (ny) array of y abcissae. Must be strictly increasing. real(kind=wp), intent(in), dimension(:) :: z (nz) array of z abcissae. Must be strictly increasing. real(kind=wp), intent(in), dimension(:,:,:) :: fcn (nx,ny,nz) matrix of function values to interpolate. fcn(i,j,k) should contain the function value at the\n point ( x(i) , y(j) , z(k) ) integer, intent(in) :: kx The order of spline pieces in x\n (  2 \\le k_x < n_x  )\n (order = polynomial degree + 1) integer, intent(in) :: ky The order of spline pieces in y\n (  2 \\le k_y < n_y  )\n (order = polynomial degree + 1) integer, intent(in) :: kz The order of spline pieces in z\n (  2 \\le k_z < n_z  )\n (order = polynomial degree + 1) real(kind=wp), intent(in), dimension(:) :: tx The (nx+kx) knots in the x direction\n for the spline interpolant.\n Must be non-decreasing. real(kind=wp), intent(in), dimension(:) :: ty The (ny+ky) knots in the y direction\n for the spline interpolant.\n Must be non-decreasing. real(kind=wp), intent(in), dimension(:) :: tz The (nz+kz) knots in the z direction\n for the spline interpolant.\n Must be non-decreasing. logical, intent(in), optional :: extrap if true, then extrapolation is allowed\n (default is false) Return Value type( bspline_3d ) public interface bspline_4d Constructor for bspline_4d private elemental function bspline_4d_constructor_empty() result(me) It returns an empty [[bspline_4d]] type. Note that INITIALIZE still\n  needs to be called before it can be used.\n  Not really that useful except perhaps in some OpenMP applications. Arguments None Return Value type( bspline_4d ) private pure function bspline_4d_constructor_auto_knots(x, y, z, q, fcn, kx, ky, kz, kq, extrap) result(me) Constructor for a [[bspline_4d]] type (auto knots).\n  This is a wrapper for [[initialize_4d_auto_knots]]. Arguments Type Intent Optional Attributes Name real(kind=wp), intent(in), dimension(:) :: x (nx) array of x abcissae. Must be strictly increasing. real(kind=wp), intent(in), dimension(:) :: y (ny) array of y abcissae. Must be strictly increasing. real(kind=wp), intent(in), dimension(:) :: z (nz) array of z abcissae. Must be strictly increasing. real(kind=wp), intent(in), dimension(:) :: q (nq) array of q abcissae. Must be strictly increasing. real(kind=wp), intent(in), dimension(:,:,:,:) :: fcn (nx,ny,nz,nq) matrix of function values to interpolate. fcn(i,j,k,l) should contain the function value at the\n point ( x(i) , y(j) , z(k) , q(l) ) integer, intent(in) :: kx The order of spline pieces in x\n (  2 \\le k_x < n_x  )\n (order = polynomial degree + 1) integer, intent(in) :: ky The order of spline pieces in y\n (  2 \\le k_y < n_y  )\n (order = polynomial degree + 1) integer, intent(in) :: kz The order of spline pieces in z\n (  2 \\le k_z < n_z  )\n (order = polynomial degree + 1) integer, intent(in) :: kq The order of spline pieces in q\n (  2 \\le k_q < n_q  )\n (order = polynomial degree + 1) logical, intent(in), optional :: extrap if true, then extrapolation is allowed\n (default is false) Return Value type( bspline_4d ) private pure function bspline_4d_constructor_specify_knots(x, y, z, q, fcn, kx, ky, kz, kq, tx, ty, tz, tq, extrap) result(me) Constructor for a [[bspline_4d]] type (user-specified knots).\n  This is a wrapper for [[initialize_4d_specify_knots]]. Arguments Type Intent Optional Attributes Name real(kind=wp), intent(in), dimension(:) :: x (nx) array of x abcissae. Must be strictly increasing. real(kind=wp), intent(in), dimension(:) :: y (ny) array of y abcissae. Must be strictly increasing. real(kind=wp), intent(in), dimension(:) :: z (nz) array of z abcissae. Must be strictly increasing. real(kind=wp), intent(in), dimension(:) :: q (nq) array of q abcissae. Must be strictly increasing. real(kind=wp), intent(in), dimension(:,:,:,:) :: fcn (nx,ny,nz,nq) matrix of function values to interpolate. fcn(i,j,k,l) should contain the function value at the\n point ( x(i) , y(j) , z(k) , q(l) ) integer, intent(in) :: kx The order of spline pieces in x\n (  2 \\le k_x < n_x  )\n (order = polynomial degree + 1) integer, intent(in) :: ky The order of spline pieces in y\n (  2 \\le k_y < n_y  )\n (order = polynomial degree + 1) integer, intent(in) :: kz The order of spline pieces in z\n (  2 \\le k_z < n_z  )\n (order = polynomial degree + 1) integer, intent(in) :: kq The order of spline pieces in q\n (  2 \\le k_q < n_q  )\n (order = polynomial degree + 1) real(kind=wp), intent(in), dimension(:) :: tx The (nx+kx) knots in the x direction\n for the spline interpolant.\n Must be non-decreasing. real(kind=wp), intent(in), dimension(:) :: ty The (ny+ky) knots in the y direction\n for the spline interpolant.\n Must be non-decreasing. real(kind=wp), intent(in), dimension(:) :: tz The (nz+kz) knots in the z direction\n for the spline interpolant.\n Must be non-decreasing. real(kind=wp), intent(in), dimension(:) :: tq The (nq+kq) knots in the q direction\n for the spline interpolant.\n Must be non-decreasing. logical, intent(in), optional :: extrap if true, then extrapolation is allowed\n (default is false) Return Value type( bspline_4d ) public interface bspline_5d Constructor for bspline_5d private elemental function bspline_5d_constructor_empty() result(me) It returns an empty [[bspline_5d]] type. Note that INITIALIZE still\n  needs to be called before it can be used.\n  Not really that useful except perhaps in some OpenMP applications. Arguments None Return Value type( bspline_5d ) private pure function bspline_5d_constructor_auto_knots(x, y, z, q, r, fcn, kx, ky, kz, kq, kr, extrap) result(me) Constructor for a [[bspline_5d]] type (auto knots).\n  This is a wrapper for [[initialize_5d_auto_knots]]. Arguments Type Intent Optional Attributes Name real(kind=wp), intent(in), dimension(:) :: x (nx) array of x abcissae. Must be strictly increasing. real(kind=wp), intent(in), dimension(:) :: y (ny) array of y abcissae. Must be strictly increasing. real(kind=wp), intent(in), dimension(:) :: z (nz) array of z abcissae. Must be strictly increasing. real(kind=wp), intent(in), dimension(:) :: q (nq) array of q abcissae. Must be strictly increasing. real(kind=wp), intent(in), dimension(:) :: r (nr) array of r abcissae. Must be strictly increasing. real(kind=wp), intent(in), dimension(:,:,:,:,:) :: fcn (nx,ny,nz,nq,nr) matrix of function values to interpolate. fcn(i,j,k,l,m) should contain the function value at the\n point ( x(i) , y(j) , z(k) , q(l) , r(m) ) integer, intent(in) :: kx The order of spline pieces in x\n (  2 \\le k_x < n_x  )\n (order = polynomial degree + 1) integer, intent(in) :: ky The order of spline pieces in y\n (  2 \\le k_y < n_y  )\n (order = polynomial degree + 1) integer, intent(in) :: kz The order of spline pieces in z\n (  2 \\le k_z < n_z  )\n (order = polynomial degree + 1) integer, intent(in) :: kq The order of spline pieces in q\n (  2 \\le k_q < n_q  )\n (order = polynomial degree + 1) integer, intent(in) :: kr The order of spline pieces in r\n (  2 \\le k_r < n_r  )\n (order = polynomial degree + 1) logical, intent(in), optional :: extrap if true, then extrapolation is allowed\n (default is false) Return Value type( bspline_5d ) private pure function bspline_5d_constructor_specify_knots(x, y, z, q, r, fcn, kx, ky, kz, kq, kr, tx, ty, tz, tq, tr, extrap) result(me) Constructor for a [[bspline_5d]] type (user-specified knots).\n  This is a wrapper for [[initialize_5d_specify_knots]]. Arguments Type Intent Optional Attributes Name real(kind=wp), intent(in), dimension(:) :: x (nx) array of x abcissae. Must be strictly increasing. real(kind=wp), intent(in), dimension(:) :: y (ny) array of y abcissae. Must be strictly increasing. real(kind=wp), intent(in), dimension(:) :: z (nz) array of z abcissae. Must be strictly increasing. real(kind=wp), intent(in), dimension(:) :: q (nq) array of q abcissae. Must be strictly increasing. real(kind=wp), intent(in), dimension(:) :: r (nr) array of r abcissae. Must be strictly increasing. real(kind=wp), intent(in), dimension(:,:,:,:,:) :: fcn (nx,ny,nz,nq,nr) matrix of function values to interpolate. fcn(i,j,k,l,m) should contain the function value at the\n point ( x(i) , y(j) , z(k) , q(l) , r(m) ) integer, intent(in) :: kx The order of spline pieces in x\n (  2 \\le k_x < n_x  )\n (order = polynomial degree + 1) integer, intent(in) :: ky The order of spline pieces in y\n (  2 \\le k_y < n_y  )\n (order = polynomial degree + 1) integer, intent(in) :: kz The order of spline pieces in z\n (  2 \\le k_z < n_z  )\n (order = polynomial degree + 1) integer, intent(in) :: kq The order of spline pieces in q\n (  2 \\le k_q < n_q  )\n (order = polynomial degree + 1) integer, intent(in) :: kr The order of spline pieces in r\n (  2 \\le k_r < n_r  )\n (order = polynomial degree + 1) real(kind=wp), intent(in), dimension(:) :: tx The (nx+kx) knots in the x direction\n for the spline interpolant.\n Must be non-decreasing. real(kind=wp), intent(in), dimension(:) :: ty The (ny+ky) knots in the y direction\n for the spline interpolant.\n Must be non-decreasing. real(kind=wp), intent(in), dimension(:) :: tz The (nz+kz) knots in the z direction\n for the spline interpolant.\n Must be non-decreasing. real(kind=wp), intent(in), dimension(:) :: tq The (nq+kq) knots in the q direction\n for the spline interpolant.\n Must be non-decreasing. real(kind=wp), intent(in), dimension(:) :: tr The (nr+kr) knots in the r direction\n for the spline interpolant.\n Must be non-decreasing. logical, intent(in), optional :: extrap if true, then extrapolation is allowed\n (default is false) Return Value type( bspline_5d ) public interface bspline_6d Constructor for bspline_6d private elemental function bspline_6d_constructor_empty() result(me) It returns an empty [[bspline_6d]] type. Note that INITIALIZE still\n  needs to be called before it can be used.\n  Not really that useful except perhaps in some OpenMP applications. Arguments None Return Value type( bspline_6d ) private pure function bspline_6d_constructor_auto_knots(x, y, z, q, r, s, fcn, kx, ky, kz, kq, kr, ks, extrap) result(me) Constructor for a [[bspline_6d]] type (auto knots).\n  This is a wrapper for [[initialize_6d_auto_knots]]. Arguments Type Intent Optional Attributes Name real(kind=wp), intent(in), dimension(:) :: x (nx) array of x abcissae. Must be strictly increasing. real(kind=wp), intent(in), dimension(:) :: y (ny) array of y abcissae. Must be strictly increasing. real(kind=wp), intent(in), dimension(:) :: z (nz) array of z abcissae. Must be strictly increasing. real(kind=wp), intent(in), dimension(:) :: q (nq) array of q abcissae. Must be strictly increasing. real(kind=wp), intent(in), dimension(:) :: r (nr) array of r abcissae. Must be strictly increasing. real(kind=wp), intent(in), dimension(:) :: s (ns) array of s abcissae. Must be strictly increasing. real(kind=wp), intent(in), dimension(:,:,:,:,:,:) :: fcn (nx,ny,nz,nq,nr,ns) matrix of function values to interpolate. fcn(i,j,k,l,m,n) should contain the function value at the\n point ( x(i) , y(j) , z(k) , q(l) , r(m) , s(n) ) integer, intent(in) :: kx The order of spline pieces in x\n (  2 \\le k_x < n_x  )\n (order = polynomial degree + 1) integer, intent(in) :: ky The order of spline pieces in y\n (  2 \\le k_y < n_y  )\n (order = polynomial degree + 1) integer, intent(in) :: kz The order of spline pieces in z\n (  2 \\le k_z < n_z  )\n (order = polynomial degree + 1) integer, intent(in) :: kq The order of spline pieces in q\n (  2 \\le k_q < n_q  )\n (order = polynomial degree + 1) integer, intent(in) :: kr The order of spline pieces in r\n (  2 \\le k_r < n_r  )\n (order = polynomial degree + 1) integer, intent(in) :: ks The order of spline pieces in z\n (  2 \\le k_z < n_z  )\n (order = polynomial degree + 1) logical, intent(in), optional :: extrap if true, then extrapolation is allowed\n (default is false) Return Value type( bspline_6d ) private pure function bspline_6d_constructor_specify_knots(x, y, z, q, r, s, fcn, kx, ky, kz, kq, kr, ks, tx, ty, tz, tq, tr, ts, extrap) result(me) Constructor for a [[bspline_6d]] type (user-specified knots).\n  This is a wrapper for [[initialize_6d_specify_knots]]. Arguments Type Intent Optional Attributes Name real(kind=wp), intent(in), dimension(:) :: x (nx) array of x abcissae. Must be strictly increasing. real(kind=wp), intent(in), dimension(:) :: y (ny) array of y abcissae. Must be strictly increasing. real(kind=wp), intent(in), dimension(:) :: z (nz) array of z abcissae. Must be strictly increasing. real(kind=wp), intent(in), dimension(:) :: q (nq) array of q abcissae. Must be strictly increasing. real(kind=wp), intent(in), dimension(:) :: r (nr) array of r abcissae. Must be strictly increasing. real(kind=wp), intent(in), dimension(:) :: s (ns) array of s abcissae. Must be strictly increasing. real(kind=wp), intent(in), dimension(:,:,:,:,:,:) :: fcn (nx,ny,nz,nq,nr,ns) matrix of function values to interpolate. fcn(i,j,k,l,m,n) should contain the function value at the\n point ( x(i) , y(j) , z(k) , q(l) , r(m) , s(n) ) integer, intent(in) :: kx The order of spline pieces in x\n (  2 \\le k_x < n_x  )\n (order = polynomial degree + 1) integer, intent(in) :: ky The order of spline pieces in y\n (  2 \\le k_y < n_y  )\n (order = polynomial degree + 1) integer, intent(in) :: kz The order of spline pieces in z\n (  2 \\le k_z < n_z  )\n (order = polynomial degree + 1) integer, intent(in) :: kq The order of spline pieces in q\n (  2 \\le k_q < n_q  )\n (order = polynomial degree + 1) integer, intent(in) :: kr The order of spline pieces in r\n (  2 \\le k_r < n_r  )\n (order = polynomial degree + 1) integer, intent(in) :: ks The order of spline pieces in z\n (  2 \\le k_z < n_z  )\n (order = polynomial degree + 1) real(kind=wp), intent(in), dimension(:) :: tx The (nx+kx) knots in the x direction\n for the spline interpolant.\n Must be non-decreasing. real(kind=wp), intent(in), dimension(:) :: ty The (ny+ky) knots in the y direction\n for the spline interpolant.\n Must be non-decreasing. real(kind=wp), intent(in), dimension(:) :: tz The (nz+kz) knots in the z direction\n for the spline interpolant.\n Must be non-decreasing. real(kind=wp), intent(in), dimension(:) :: tq The (nq+kq) knots in the q direction\n for the spline interpolant.\n Must be non-decreasing. real(kind=wp), intent(in), dimension(:) :: tr The (nr+kr) knots in the r direction\n for the spline interpolant.\n Must be non-decreasing. real(kind=wp), intent(in), dimension(:) :: ts The (ns+ks) knots in the s direction\n for the spline interpolant.\n Must be non-decreasing. logical, intent(in), optional :: extrap if true, then extrapolation is allowed\n (default is false) Return Value type( bspline_6d ) Derived Types type, public, abstract :: bspline_class Base class for the b-spline types Type-Bound Procedures procedure(destroy_func), public :: destroy destructor procedure(size_func), public :: size_of size of the structure in bits procedure, public, non_overridable :: status_ok returns true if the last iflag status code was =0 . procedure, public, non_overridable :: status_message => get_bspline_status_message retrieve the last status message procedure, public, non_overridable :: clear_flag => clear_bspline_flag to reset the iflag saved in the class. type, public, extends( bspline_class ) :: bspline_1d Class for 1d b-spline interpolation. Constructor Constructor for bspline_1d private pure,elemental function bspline_1d_constructor_empty () It returns an empty [[bspline_1d]] type. Note that INITIALIZE still\n  needs to be called before it can be used.\n  Not really that useful except perhaps in some OpenMP applications. private pure function bspline_1d_constructor_auto_knots (x, fcn, kx, extrap) Constructor for a [[bspline_1d]] type (auto knots).\n  This is a wrapper for [[initialize_1d_auto_knots]]. private pure function bspline_1d_constructor_specify_knots (x, fcn, kx, tx, extrap) Constructor for a [[bspline_1d]] type (user-specified knots).\n  This is a wrapper for [[initialize_1d_specify_knots]]. Finalizations Procedures final :: finalize_1d","tags":"","loc":"module/bspline_oo_module.html","title":"bspline_oo_module â€“ bspline-fortran"},{"text":"Uses: bspline_module iso_fortran_env pyplot_module program~~bspline_speed_test~~UsesGraph program~bspline_speed_test bspline_speed_test module~bspline_module bspline_module module~bspline_module->program~bspline_speed_test pyplot_module pyplot_module pyplot_module->program~bspline_speed_test iso_fortran_env iso_fortran_env iso_fortran_env->program~bspline_speed_test module~bspline_sub_module bspline_sub_module iso_fortran_env->module~bspline_sub_module module~bspline_oo_module bspline_oo_module iso_fortran_env->module~bspline_oo_module module~bspline_sub_module->module~bspline_module module~bspline_sub_module->module~bspline_oo_module module~bspline_oo_module->module~bspline_module var panprogrambspline_speed_testUsesGraph = svgPanZoom('#programbspline_speed_testUsesGraph', {\n                    zoomEnabled: true,\n                    controlIconsEnabled: true,\n                    fit: true,\n                    center: true,}); Help Ã— Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a parent (sub)module to the submodule which is\n    descended from it. Dashed arrows point from a module being used to the\n    module or program unit using it. Speed test for 1d-6d tensor product b-spline interpolation (subroutine version). Results Calls program~~bspline_speed_test~~CallsGraph program~bspline_speed_test bspline_speed_test db5val db5val program~bspline_speed_test->db5val db6val db6val program~bspline_speed_test->db6val db5ink db5ink program~bspline_speed_test->db5ink db3val db3val program~bspline_speed_test->db3val db1ink db1ink program~bspline_speed_test->db1ink proc~f1 f1 program~bspline_speed_test->proc~f1 db4ink db4ink program~bspline_speed_test->db4ink db2val db2val program~bspline_speed_test->db2val db3ink db3ink program~bspline_speed_test->db3ink db2ink db2ink program~bspline_speed_test->db2ink proc~f2 f2 program~bspline_speed_test->proc~f2 db4val db4val program~bspline_speed_test->db4val proc~f4 f4 program~bspline_speed_test->proc~f4 proc~f6 f6 program~bspline_speed_test->proc~f6 proc~f3 f3 program~bspline_speed_test->proc~f3 proc~f5 f5 program~bspline_speed_test->proc~f5 db1val db1val program~bspline_speed_test->db1val db6ink db6ink program~bspline_speed_test->db6ink Help Ã— Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Variables nx ny nz nq nr ns kx ky kz kq kr ks n_cases x y z q r s fcn_1d bcoef_1d fcn_2d bcoef_2d fcn_3d bcoef_3d fcn_4d bcoef_4d fcn_5d bcoef_5d fcn_6d bcoef_6d tx ty tz tq tr ts val sumval i j k l m n idx idy idz idq idr ids iknot iflag tstart tend plt cases_per_sec inbvx inbvy inbvz inbvq inbvr inbvs iloy iloz iloq ilor ilos istat Functions f1 f2 f3 f4 f5 f6 Source Code bspline_speed_test Variables Type Attributes Name Initial integer, parameter :: nx = 8 integer, parameter :: ny = 8 integer, parameter :: nz = 8 integer, parameter :: nq = 8 integer, parameter :: nr = 8 integer, parameter :: ns = 8 integer, parameter :: kx = 4 integer, parameter :: ky = 4 integer, parameter :: kz = 4 integer, parameter :: kq = 4 integer, parameter :: kr = 4 integer, parameter :: ks = 4 integer, parameter :: n_cases = nx*ny*nz*nq*nr*ns real(kind=wp) :: x (nx) real(kind=wp) :: y (ny) real(kind=wp) :: z (nz) real(kind=wp) :: q (nq) real(kind=wp) :: r (nr) real(kind=wp) :: s (ns) real(kind=wp), dimension(nx) :: fcn_1d real(kind=wp), dimension(nx) :: bcoef_1d real(kind=wp), dimension(nx,ny) :: fcn_2d real(kind=wp), dimension(nx,ny) :: bcoef_2d real(kind=wp), dimension(nx,ny,nz) :: fcn_3d real(kind=wp), dimension(nx,ny,nz) :: bcoef_3d real(kind=wp), dimension(nx,ny,nz,nq) :: fcn_4d real(kind=wp), dimension(nx,ny,nz,nq) :: bcoef_4d real(kind=wp), dimension(nx,ny,nz,nq,nr) :: fcn_5d real(kind=wp), dimension(nx,ny,nz,nq,nr) :: bcoef_5d real(kind=wp), dimension(nx,ny,nz,nq,nr,ns) :: fcn_6d real(kind=wp), dimension(nx,ny,nz,nq,nr,ns) :: bcoef_6d real(kind=wp) :: tx (nx+kx) real(kind=wp) :: ty (ny+ky) real(kind=wp) :: tz (nz+kz) real(kind=wp) :: tq (nq+kq) real(kind=wp) :: tr (nr+kr) real(kind=wp) :: ts (ns+ks) real(kind=wp) :: val real(kind=wp) :: sumval integer :: i integer :: j integer :: k integer :: l integer :: m integer :: n integer :: idx integer :: idy integer :: idz integer :: idq integer :: idr integer :: ids integer :: iknot integer :: iflag real :: tstart real :: tend type(pyplot) :: plt real(kind=wp), dimension(6) :: cases_per_sec integer :: inbvx integer :: inbvy integer :: inbvz integer :: inbvq integer :: inbvr integer :: inbvs integer :: iloy integer :: iloz integer :: iloq integer :: ilor integer :: ilos integer :: istat pyplot-fortran status flag Functions function f1 (x) result(f) 1d test function Arguments Type Intent Optional Attributes Name real(kind=wp), intent(in) :: x Return Value real(kind=wp) function f2 (x, y) result(f) 2d test function Arguments Type Intent Optional Attributes Name real(kind=wp), intent(in) :: x real(kind=wp), intent(in) :: y Return Value real(kind=wp) function f3 (x, y, z) result(f) 3d test function Arguments Type Intent Optional Attributes Name real(kind=wp), intent(in) :: x real(kind=wp), intent(in) :: y real(kind=wp), intent(in) :: z Return Value real(kind=wp) function f4 (x, y, z, q) result(f) 4d test function Arguments Type Intent Optional Attributes Name real(kind=wp), intent(in) :: x real(kind=wp), intent(in) :: y real(kind=wp), intent(in) :: z real(kind=wp), intent(in) :: q Return Value real(kind=wp) function f5 (x, y, z, q, r) result(f) 5d test function Arguments Type Intent Optional Attributes Name real(kind=wp), intent(in) :: x real(kind=wp), intent(in) :: y real(kind=wp), intent(in) :: z real(kind=wp), intent(in) :: q real(kind=wp), intent(in) :: r Return Value real(kind=wp) function f6 (x, y, z, q, r, s) result(f) 6d test function Arguments Type Intent Optional Attributes Name real(kind=wp), intent(in) :: x real(kind=wp), intent(in) :: y real(kind=wp), intent(in) :: z real(kind=wp), intent(in) :: q real(kind=wp), intent(in) :: r real(kind=wp), intent(in) :: s Return Value real(kind=wp) Source Code program bspline_speed_test use bspline_module use , intrinsic :: iso_fortran_env , only : wp => real64 use pyplot_module implicit none integer , parameter :: nx = 8 !number of points integer , parameter :: ny = 8 integer , parameter :: nz = 8 integer , parameter :: nq = 8 integer , parameter :: nr = 8 integer , parameter :: ns = 8 integer , parameter :: kx = 4 !order integer , parameter :: ky = 4 integer , parameter :: kz = 4 integer , parameter :: kq = 4 integer , parameter :: kr = 4 integer , parameter :: ks = 4 integer , parameter :: n_cases = nx * ny * nz * nq * nr * ns real ( wp ) :: x ( nx ), y ( ny ), z ( nz ), q ( nq ), r ( nr ), s ( ns ) real ( wp ), dimension ( nx ) :: fcn_1d , bcoef_1d real ( wp ), dimension ( nx , ny ) :: fcn_2d , bcoef_2d real ( wp ), dimension ( nx , ny , nz ) :: fcn_3d , bcoef_3d real ( wp ), dimension ( nx , ny , nz , nq ) :: fcn_4d , bcoef_4d real ( wp ), dimension ( nx , ny , nz , nq , nr ) :: fcn_5d , bcoef_5d real ( wp ), dimension ( nx , ny , nz , nq , nr , ns ) :: fcn_6d , bcoef_6d real ( wp ) :: tx ( nx + kx ), ty ( ny + ky ), tz ( nz + kz ), tq ( nq + kq ), tr ( nr + kr ), ts ( ns + ks ) real ( wp ) :: val , sumval integer :: i , j , k , l , m , n , idx , idy , idz , idq , idr , ids , iknot , iflag real :: tstart , tend type ( pyplot ) :: plt real ( wp ), dimension ( 6 ) :: cases_per_sec integer :: inbvx , inbvy , inbvz , inbvq , inbvr , inbvs , iloy , iloz , iloq , ilor , ilos integer :: istat !! pyplot-fortran status flag inbvx = 1 inbvy = 1 inbvz = 1 inbvq = 1 inbvr = 1 inbvs = 1 iloy = 1 iloz = 1 iloq = 1 ilor = 1 ilos = 1 idx = 0 idy = 0 idz = 0 idq = 0 idr = 0 ids = 0 x = [ ( dble ( i ), i = 1 , nx ) ] y = [ ( dble ( i ), i = 1 , ny ) ] z = [ ( dble ( i ), i = 1 , nz ) ] q = [ ( dble ( i ), i = 1 , nq ) ] r = [ ( dble ( i ), i = 1 , nr ) ] s = [ ( dble ( i ), i = 1 , ns ) ] !evaluate the functions: do i = 1 , nx fcn_1d ( i ) = f1 ( x ( i )) do j = 1 , ny fcn_2d ( i , j ) = f2 ( x ( i ), y ( j )) do k = 1 , nz fcn_3d ( i , j , k ) = f3 ( x ( i ), y ( j ), z ( k )) do l = 1 , nq fcn_4d ( i , j , k , l ) = f4 ( x ( i ), y ( j ), z ( k ), q ( l )) do m = 1 , nr fcn_5d ( i , j , k , l , m ) = f5 ( x ( i ), y ( j ), z ( k ), q ( l ), r ( m )) do n = 1 , ns fcn_6d ( i , j , k , l , m , n ) = f6 ( x ( i ), y ( j ), z ( k ), q ( l ), r ( m ), s ( n )) end do end do end do end do end do end do iknot = 0 !auto-compute the knots !initialize: call db1ink ( x , nx , fcn_1d , kx , iknot , tx , bcoef_1d , iflag ) if ( iflag /= 0 ) then write ( * , * ) 'iflag=' , iflag error stop 'error initializing 1d spline.' end if call db2ink ( x , nx , y , ny , fcn_2d , kx , ky , iknot , tx , ty , bcoef_2d , iflag ) if ( iflag /= 0 ) then write ( * , * ) 'iflag=' , iflag error stop 'error initializing 2d spline.' end if call db3ink ( x , nx , y , ny , z , nz , fcn_3d , kx , ky , kz , iknot , tx , ty , tz , bcoef_3d , iflag ) if ( iflag /= 0 ) then write ( * , * ) 'iflag=' , iflag error stop 'error initializing 3d spline.' end if call db4ink ( x , nx , y , ny , z , nz , q , nq , fcn_4d , kx , ky , kz , kq , iknot , tx , ty , tz , tq , bcoef_4d , iflag ) if ( iflag /= 0 ) then write ( * , * ) 'iflag=' , iflag error stop 'error initializing 4d spline.' end if call db5ink ( x , nx , y , ny , z , nz , q , nq , r , nr , fcn_5d , kx , ky , kz , kq , kr , iknot , tx , ty , tz , tq , tr , bcoef_5d , iflag ) if ( iflag /= 0 ) then write ( * , * ) 'iflag=' , iflag error stop 'error initializing 5d spline.' end if call db6ink ( x , nx , y , ny , z , nz , q , nq , r , nr , s , ns , fcn_6d , kx , ky , kz , kq , kr , ks , iknot , tx , ty , tz , tq , tr , ts , bcoef_6d , iflag ) if ( iflag /= 0 ) then write ( * , * ) 'iflag=' , iflag error stop 'error initializing 6d spline.' end if ! evaluate the interpolants: sumval = 0.0_wp call cpu_time ( tstart ) do i = 1 , nx do j = 1 , ny do k = 1 , nz do l = 1 , nq do m = 1 , nr do n = 1 , ns call db1val ( x ( i ), idx , tx , nx , kx , bcoef_1d , val , iflag , inbvx ) sumval = sumval + val end do end do end do end do end do end do call cpu_time ( tend ) write ( * , * ) '' write ( * , * ) '1D' write ( * , * ) 'result         :' , sumval write ( * , * ) 'number of cases:' , n_cases write ( * , * ) 'cases/sec      :' , n_cases / ( tend - tstart ) cases_per_sec ( 1 ) = n_cases / ( tend - tstart ) sumval = 0.0_wp call cpu_time ( tstart ) do i = 1 , nx do j = 1 , ny do k = 1 , nz do l = 1 , nq do m = 1 , nr do n = 1 , ns call db2val ( x ( i ), y ( j ), idx , idy , tx , ty ,& nx , ny , kx , ky , bcoef_2d , val , iflag ,& inbvx , inbvy , iloy ) sumval = sumval + val end do end do end do end do end do end do call cpu_time ( tend ) write ( * , * ) '' write ( * , * ) '2D' write ( * , * ) 'result         :' , sumval write ( * , * ) 'number of cases:' , n_cases write ( * , * ) 'cases/sec      :' , n_cases / ( tend - tstart ) cases_per_sec ( 2 ) = n_cases / ( tend - tstart ) sumval = 0.0_wp call cpu_time ( tstart ) do i = 1 , nx do j = 1 , ny do k = 1 , nz do l = 1 , nq do m = 1 , nr do n = 1 , ns call db3val ( x ( i ), y ( j ), z ( k ), idx , idy , idz , tx , ty , tz ,& nx , ny , nz , kx , ky , kz , bcoef_3d , val , iflag ,& inbvx , inbvy , inbvz , iloy , iloz ) sumval = sumval + val end do end do end do end do end do end do call cpu_time ( tend ) write ( * , * ) '' write ( * , * ) '3D' write ( * , * ) 'result         :' , sumval write ( * , * ) 'number of cases:' , n_cases write ( * , * ) 'cases/sec      :' , n_cases / ( tend - tstart ) cases_per_sec ( 3 ) = n_cases / ( tend - tstart ) sumval = 0.0_wp call cpu_time ( tstart ) do i = 1 , nx do j = 1 , ny do k = 1 , nz do l = 1 , nq do m = 1 , nr do n = 1 , ns call db4val ( x ( i ), y ( j ), z ( k ), q ( l ), idx , idy , idz , idq , tx , ty , tz , tq ,& nx , ny , nz , nq , kx , ky , kz , kq , bcoef_4d , val , iflag ,& inbvx , inbvy , inbvz , inbvq , iloy , iloz , iloq ) sumval = sumval + val end do end do end do end do end do end do call cpu_time ( tend ) write ( * , * ) '' write ( * , * ) '4D' write ( * , * ) 'result         :' , sumval write ( * , * ) 'number of cases:' , n_cases write ( * , * ) 'cases/sec      :' , n_cases / ( tend - tstart ) cases_per_sec ( 4 ) = n_cases / ( tend - tstart ) sumval = 0.0_wp call cpu_time ( tstart ) do i = 1 , nx do j = 1 , ny do k = 1 , nz do l = 1 , nq do m = 1 , nr do n = 1 , ns call db5val ( x ( i ), y ( j ), z ( k ), q ( l ), r ( m ), idx , idy , idz , idq , idr , tx , ty , tz , tq , tr ,& nx , ny , nz , nq , nr , kx , ky , kz , kq , kr , bcoef_5d , val , iflag ,& inbvx , inbvy , inbvz , inbvq , inbvr , iloy , iloz , iloq , ilor ) sumval = sumval + val end do end do end do end do end do end do call cpu_time ( tend ) write ( * , * ) '' write ( * , * ) '5D' write ( * , * ) 'result         :' , sumval write ( * , * ) 'number of cases:' , n_cases write ( * , * ) 'cases/sec      :' , n_cases / ( tend - tstart ) cases_per_sec ( 5 ) = n_cases / ( tend - tstart ) sumval = 0.0_wp call cpu_time ( tstart ) do i = 1 , nx do j = 1 , ny do k = 1 , nz do l = 1 , nq do m = 1 , nr do n = 1 , ns call db6val ( x ( i ), y ( j ), z ( k ), q ( l ), r ( m ), s ( n ), idx , idy , idz , idq , idr , ids ,& tx , ty , tz , tq , tr , ts ,& nx , ny , nz , nq , nr , ns , kx , ky , kz , kq , kr , ks , bcoef_6d , val , iflag ,& inbvx , inbvy , inbvz , inbvq , inbvr , inbvs , iloy , iloz , iloq , ilor , ilos ) sumval = sumval + val end do end do end do end do end do end do call cpu_time ( tend ) write ( * , * ) '' write ( * , * ) '6D' write ( * , * ) 'result         :' , sumval write ( * , * ) 'number of cases:' , n_cases write ( * , * ) 'cases/sec      :' , n_cases / ( tend - tstart ) cases_per_sec ( 6 ) = n_cases / ( tend - tstart ) !plot results in bar chart: call plt % initialize ( grid = . false ., xlabel = 'Dimension' , ylabel = 'Cases Per Second' ,& title = 'Speed Test (Subroutine Interface)' , legend = . false .,& font_size = 20 ,& axes_labelsize = 20 ,& xtick_labelsize = 20 ,& ytick_labelsize = 20 ) call plt % add_bar ( left = real ([ 1 , 2 , 3 , 4 , 5 , 6 ], wp ), height = cases_per_sec , label = 'Speed test runs' ,& yscale = 'log' , align = 'center' , color = 'r' , istat = istat ) call plt % savefig ( 'speed_test.png' , istat = istat ) contains function f1 ( x ) result ( f ) !! 1d test function implicit none real ( wp ), intent ( in ) :: x real ( wp ) :: f f = x ** 1.1_wp + x ** 1.2_wp + x ** 1.3_wp + x ** 1.4_wp + x ** 1.5_wp + x ** 1.6_wp end function f1 function f2 ( x , y ) result ( f ) !! 2d test function implicit none real ( wp ), intent ( in ) :: x , y real ( wp ) :: f f = x ** 1.1_wp + y ** 1.2_wp + x ** 1.3_wp + y ** 1.4_wp + x ** 1.5_wp + y ** 1.6_wp end function f2 function f3 ( x , y , z ) result ( f ) !! 3d test function implicit none real ( wp ), intent ( in ) :: x , y , z real ( wp ) :: f f = x ** 1.1_wp + y ** 1.2_wp + z ** 1.3_wp + x ** 1.4_wp + y ** 1.5_wp + z ** 1.6_wp end function f3 function f4 ( x , y , z , q ) result ( f ) !! 4d test function implicit none real ( wp ), intent ( in ) :: x , y , z , q real ( wp ) :: f f = x ** 1.1_wp + y ** 1.2_wp + z ** 1.3_wp + q ** 1.4_wp + x ** 1.5_wp + y ** 1.6_wp end function f4 function f5 ( x , y , z , q , r ) result ( f ) !! 5d test function implicit none real ( wp ), intent ( in ) :: x , y , z , q , r real ( wp ) :: f f = x ** 1.1_wp + y ** 1.2_wp + z ** 1.3_wp + q ** 1.4_wp + r ** 1.5_wp + x ** 1.6_wp end function f5 function f6 ( x , y , z , q , r , s ) result ( f ) !! 6d test function implicit none real ( wp ), intent ( in ) :: x , y , z , q , r , s real ( wp ) :: f f = x ** 1.1_wp + y ** 1.2_wp + z ** 1.3_wp + q ** 1.4_wp + r ** 1.5_wp + s ** 1.6_wp end function f6 end program bspline_speed_test","tags":"","loc":"program/bspline_speed_test.html","title":"bspline_speed_test â€“ bspline-fortran"},{"text":"Uses: bspline_module iso_fortran_env program~~bspline_oo_test~~UsesGraph program~bspline_oo_test bspline_oo_test module~bspline_module bspline_module module~bspline_module->program~bspline_oo_test iso_fortran_env iso_fortran_env iso_fortran_env->program~bspline_oo_test module~bspline_sub_module bspline_sub_module iso_fortran_env->module~bspline_sub_module module~bspline_oo_module bspline_oo_module iso_fortran_env->module~bspline_oo_module module~bspline_sub_module->module~bspline_module module~bspline_sub_module->module~bspline_oo_module module~bspline_oo_module->module~bspline_module Help Ã— Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a parent (sub)module to the submodule which is\n    descended from it. Dashed arrows point from a module being used to the\n    module or program unit using it. Units test for 1d-6d tensor product b-spline interpolation (object-oriented version). Calls program~~bspline_oo_test~~CallsGraph program~bspline_oo_test bspline_oo_test proc~f3~2 f3 program~bspline_oo_test->proc~f3~2 proc~f4~2 f4 program~bspline_oo_test->proc~f4~2 get_status_message get_status_message program~bspline_oo_test->get_status_message proc~f6~2 f6 program~bspline_oo_test->proc~f6~2 proc~f1~2 f1 program~bspline_oo_test->proc~f1~2 proc~f5~2 f5 program~bspline_oo_test->proc~f5~2 proc~f2~2 f2 program~bspline_oo_test->proc~f2~2 Help Ã— Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Variables nx ny nz nq nr ns kx ky kz kq kr ks x y z q r s fcn_1d fcn_2d fcn_3d fcn_4d fcn_5d fcn_6d s1 s2 s3 s4 s5 s6 tol val tru err errmax fail i j k l m n idx idy idz idq idr ids iflag Functions f1 f2 f3 f4 f5 f6 Source Code bspline_oo_test Variables Type Attributes Name Initial integer, parameter :: nx = 6 integer, parameter :: ny = 6 integer, parameter :: nz = 6 integer, parameter :: nq = 6 integer, parameter :: nr = 6 integer, parameter :: ns = 6 integer, parameter :: kx = 4 integer, parameter :: ky = 4 integer, parameter :: kz = 4 integer, parameter :: kq = 4 integer, parameter :: kr = 4 integer, parameter :: ks = 4 real(kind=wp) :: x (nx) real(kind=wp) :: y (ny) real(kind=wp) :: z (nz) real(kind=wp) :: q (nq) real(kind=wp) :: r (nr) real(kind=wp) :: s (ns) real(kind=wp) :: fcn_1d (nx) real(kind=wp) :: fcn_2d (nx,ny) real(kind=wp) :: fcn_3d (nx,ny,nz) real(kind=wp) :: fcn_4d (nx,ny,nz,nq) real(kind=wp) :: fcn_5d (nx,ny,nz,nq,nr) real(kind=wp) :: fcn_6d (nx,ny,nz,nq,nr,ns) type(bspline_1d) :: s1 type(bspline_2d) :: s2 type(bspline_3d) :: s3 type(bspline_4d) :: s4 type(bspline_5d) :: s5 type(bspline_6d) :: s6 real(kind=wp) :: tol real(kind=wp), dimension(6) :: val real(kind=wp), dimension(6) :: tru real(kind=wp), dimension(6) :: err real(kind=wp), dimension(6) :: errmax logical :: fail integer :: i integer :: j integer :: k integer :: l integer :: m integer :: n integer :: idx integer :: idy integer :: idz integer :: idq integer :: idr integer :: ids integer, dimension(6) :: iflag Functions function f1 (x) 1d test function Arguments Type Intent Optional Attributes Name real(kind=wp) :: x Return Value real(kind=wp) function f2 (x, y) 2d test function Arguments Type Intent Optional Attributes Name real(kind=wp) :: x real(kind=wp) :: y Return Value real(kind=wp) function f3 (x, y, z) 3d test function Arguments Type Intent Optional Attributes Name real(kind=wp) :: x real(kind=wp) :: y real(kind=wp) :: z Return Value real(kind=wp) function f4 (x, y, z, q) 4d test function Arguments Type Intent Optional Attributes Name real(kind=wp) :: x real(kind=wp) :: y real(kind=wp) :: z real(kind=wp) :: q Return Value real(kind=wp) function f5 (x, y, z, q, r) 5d test function Arguments Type Intent Optional Attributes Name real(kind=wp) :: x real(kind=wp) :: y real(kind=wp) :: z real(kind=wp) :: q real(kind=wp) :: r Return Value real(kind=wp) function f6 (x, y, z, q, r, s) 6d test function Arguments Type Intent Optional Attributes Name real(kind=wp) :: x real(kind=wp) :: y real(kind=wp) :: z real(kind=wp) :: q real(kind=wp) :: r real(kind=wp) :: s Return Value real(kind=wp) Source Code program bspline_oo_test use bspline_module use , intrinsic :: iso_fortran_env , only : wp => real64 implicit none integer , parameter :: nx = 6 !number of points integer , parameter :: ny = 6 integer , parameter :: nz = 6 integer , parameter :: nq = 6 integer , parameter :: nr = 6 integer , parameter :: ns = 6 integer , parameter :: kx = 4 !order integer , parameter :: ky = 4 integer , parameter :: kz = 4 integer , parameter :: kq = 4 integer , parameter :: kr = 4 integer , parameter :: ks = 4 real ( wp ) :: x ( nx ), y ( ny ), z ( nz ), q ( nq ), r ( nr ), s ( ns ) real ( wp ) :: fcn_1d ( nx ) real ( wp ) :: fcn_2d ( nx , ny ) real ( wp ) :: fcn_3d ( nx , ny , nz ) real ( wp ) :: fcn_4d ( nx , ny , nz , nq ) real ( wp ) :: fcn_5d ( nx , ny , nz , nq , nr ) real ( wp ) :: fcn_6d ( nx , ny , nz , nq , nr , ns ) type ( bspline_1d ) :: s1 type ( bspline_2d ) :: s2 type ( bspline_3d ) :: s3 type ( bspline_4d ) :: s4 type ( bspline_5d ) :: s5 type ( bspline_6d ) :: s6 real ( wp ) :: tol real ( wp ), dimension ( 6 ) :: val , tru , err , errmax logical :: fail integer :: i , j , k , l , m , n , idx , idy , idz , idq , idr , ids integer , dimension ( 6 ) :: iflag fail = . false . tol = 1.0e-14_wp idx = 0 idy = 0 idz = 0 idq = 0 idr = 0 ids = 0 do i = 1 , nx x ( i ) = dble ( i - 1 ) / dble ( nx - 1 ) end do do j = 1 , ny y ( j ) = dble ( j - 1 ) / dble ( ny - 1 ) end do do k = 1 , nz z ( k ) = dble ( k - 1 ) / dble ( nz - 1 ) end do do l = 1 , nq q ( l ) = dble ( l - 1 ) / dble ( nq - 1 ) end do do m = 1 , nr r ( m ) = dble ( m - 1 ) / dble ( nr - 1 ) end do do n = 1 , ns s ( n ) = dble ( n - 1 ) / dble ( ns - 1 ) end do do i = 1 , nx fcn_1d ( i ) = f1 ( x ( i )) do j = 1 , ny fcn_2d ( i , j ) = f2 ( x ( i ), y ( j )) do k = 1 , nz fcn_3d ( i , j , k ) = f3 ( x ( i ), y ( j ), z ( k )) do l = 1 , nq fcn_4d ( i , j , k , l ) = f4 ( x ( i ), y ( j ), z ( k ), q ( l )) do m = 1 , nr fcn_5d ( i , j , k , l , m ) = f5 ( x ( i ), y ( j ), z ( k ), q ( l ), r ( m )) do n = 1 , ns fcn_6d ( i , j , k , l , m , n ) = f6 ( x ( i ), y ( j ), z ( k ), q ( l ), r ( m ), s ( n )) end do end do end do end do end do end do !initialize: call s1 % initialize ( x , fcn_1d , kx , iflag ( 1 )) call s2 % initialize ( x , y , fcn_2d , kx , ky , iflag ( 2 )) call s3 % initialize ( x , y , z , fcn_3d , kx , ky , kz , iflag ( 3 )) call s4 % initialize ( x , y , z , q , fcn_4d , kx , ky , kz , kq , iflag ( 4 )) call s5 % initialize ( x , y , z , q , r , fcn_5d , kx , ky , kz , kq , kr , iflag ( 5 )) call s6 % initialize ( x , y , z , q , r , s , fcn_6d , kx , ky , kz , kq , kr , ks , iflag ( 6 )) if ( any ( iflag /= 0 )) then do i = 1 , 6 if ( iflag ( i ) /= 0 ) then write ( * , * ) 'Error initializing ' , i , 'D spline: ' // get_status_message ( iflag ( i )) end if end do end if write ( * , * ) '' write ( * , * ) 'size of 1d structure: ' , s1 % size_of () * 8 , 'bytes' write ( * , * ) 'size of 2d structure: ' , s2 % size_of () * 8 , 'bytes' write ( * , * ) 'size of 3d structure: ' , s3 % size_of () * 8 , 'bytes' write ( * , * ) 'size of 4d structure: ' , s4 % size_of () * 8 , 'bytes' write ( * , * ) 'size of 5d structure: ' , s5 % size_of () * 8 , 'bytes' write ( * , * ) 'size of 6d structure: ' , s6 % size_of () * 8 , 'bytes' write ( * , * ) '' ! compute max error at interpolation points errmax = 0.0_wp do i = 1 , nx call s1 % evaluate ( x ( i ), idx , val ( 1 ), iflag ( 1 )) tru ( 1 ) = f1 ( x ( i )) err ( 1 ) = abs ( tru ( 1 ) - val ( 1 )) errmax ( 1 ) = max ( err ( 1 ), errmax ( 1 )) do j = 1 , ny call s2 % evaluate ( x ( i ), y ( j ), idx , idy , val ( 2 ), iflag ( 2 )) tru ( 2 ) = f2 ( x ( i ), y ( j )) err ( 2 ) = abs ( tru ( 2 ) - val ( 2 )) errmax ( 2 ) = max ( err ( 2 ), errmax ( 2 )) do k = 1 , nz call s3 % evaluate ( x ( i ), y ( j ), z ( k ), idx , idy , idz , val ( 3 ), iflag ( 3 )) tru ( 3 ) = f3 ( x ( i ), y ( j ), z ( k )) err ( 3 ) = abs ( tru ( 3 ) - val ( 3 )) errmax ( 3 ) = max ( err ( 3 ), errmax ( 3 )) do l = 1 , nq call s4 % evaluate ( x ( i ), y ( j ), z ( k ), q ( l ), idx , idy , idz , idq , val ( 4 ), iflag ( 4 )) tru ( 4 ) = f4 ( x ( i ), y ( j ), z ( k ), q ( l )) err ( 4 ) = abs ( tru ( 4 ) - val ( 4 )) errmax ( 4 ) = max ( err ( 4 ), errmax ( 4 )) do m = 1 , nr call s5 % evaluate ( x ( i ), y ( j ), z ( k ), q ( l ), r ( m ), idx , idy , idz , idq , idr , val ( 5 ), iflag ( 5 )) tru ( 5 ) = f5 ( x ( i ), y ( j ), z ( k ), q ( l ), r ( m )) err ( 5 ) = abs ( tru ( 5 ) - val ( 5 )) errmax ( 5 ) = max ( err ( 5 ), errmax ( 5 )) do n = 1 , ns call s6 % evaluate ( x ( i ), y ( j ), z ( k ), q ( l ), r ( m ), s ( n ), idx , idy , idz , idq , idr , ids , val ( 6 ), iflag ( 6 )) tru ( 6 ) = f6 ( x ( i ), y ( j ), z ( k ), q ( l ), r ( m ), s ( n )) err ( 6 ) = abs ( tru ( 6 ) - val ( 6 )) errmax ( 6 ) = max ( err ( 6 ), errmax ( 6 )) end do end do end do end do end do end do ! check max error against tolerance do i = 1 , 6 write ( * , * ) i , 'D: max error:' , errmax ( i ) if ( errmax ( i ) >= tol ) then write ( * , * ) ' ** test failed ** ' else write ( * , * ) ' ** test passed ** ' end if write ( * , * ) '' end do contains real ( wp ) function f1 ( x ) !! 1d test function implicit none real ( wp ) :: x f1 = 0.5_wp * ( x * exp ( - x ) + sin ( x ) ) end function f1 real ( wp ) function f2 ( x , y ) !! 2d test function implicit none real ( wp ) x , y , piov2 piov2 = 2.0_wp * atan ( 1.0_wp ) f2 = 0.5_wp * ( y * exp ( - x ) + sin ( piov2 * y ) ) end function f2 real ( wp ) function f3 ( x , y , z ) !! 3d test function implicit none real ( wp ) x , y , z , piov2 piov2 = 2.0_wp * atan ( 1.0_wp ) f3 = 0.5_wp * ( y * exp ( - x ) + z * sin ( piov2 * y ) ) end function f3 real ( wp ) function f4 ( x , y , z , q ) !! 4d test function implicit none real ( wp ) x , y , z , q , piov2 piov2 = 2.0_wp * atan ( 1.0_wp ) f4 = 0.5_wp * ( y * exp ( - x ) + z * sin ( piov2 * y ) + q ) end function f4 real ( wp ) function f5 ( x , y , z , q , r ) !! 5d test function implicit none real ( wp ) x , y , z , q , r , piov2 piov2 = 2.0_wp * atan ( 1.0_wp ) f5 = 0.5_wp * ( y * exp ( - x ) + z * sin ( piov2 * y ) + q * r ) end function f5 real ( wp ) function f6 ( x , y , z , q , r , s ) !! 6d test function implicit none real ( wp ) x , y , z , q , r , s , piov2 piov2 = 2.0_wp * atan ( 1.0_wp ) f6 = 0.5_wp * ( y * exp ( - x ) + z * sin ( piov2 * y ) + q * r + 2.0_wp * s ) end function f6 end program bspline_oo_test","tags":"","loc":"program/bspline_oo_test.html","title":"bspline_oo_test â€“ bspline-fortran"},{"text":"Uses: bspline_module iso_fortran_env program~~bspline_integrate_test~~UsesGraph program~bspline_integrate_test bspline_integrate_test module~bspline_module bspline_module module~bspline_module->program~bspline_integrate_test iso_fortran_env iso_fortran_env iso_fortran_env->program~bspline_integrate_test module~bspline_sub_module bspline_sub_module iso_fortran_env->module~bspline_sub_module module~bspline_oo_module bspline_oo_module iso_fortran_env->module~bspline_oo_module module~bspline_sub_module->module~bspline_module module~bspline_sub_module->module~bspline_oo_module module~bspline_oo_module->module~bspline_module var panprogrambspline_integrate_testUsesGraph = svgPanZoom('#programbspline_integrate_testUsesGraph', {\n                    zoomEnabled: true,\n                    controlIconsEnabled: true,\n                    fit: true,\n                    center: true,}); Help Ã— Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a parent (sub)module to the submodule which is\n    descended from it. Dashed arrows point from a module being used to the\n    module or program unit using it. 1D definite integral test using the bspline module. This test case evaluates the integral:  \\int_{0}&#94;{\\pi} \\sin (x) dx = 2  using a B-Spline of the points:  \\left[ \\sin(0&#94;{\\circ}), \\sin(1&#94;{\\circ}), ..., \\sin(180&#94;{\\circ}) \\right]  Calls program~~bspline_integrate_test~~CallsGraph program~bspline_integrate_test bspline_integrate_test db1ink db1ink program~bspline_integrate_test->db1ink db1fqad db1fqad program~bspline_integrate_test->db1fqad db1sqad db1sqad program~bspline_integrate_test->db1sqad Help Ã— Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Variables pi deg2rad iknot x1 x2 nx tol tx kx x fcn i iflag f Functions test_function Source Code bspline_integrate_test Variables Type Attributes Name Initial real(kind=wp), parameter :: pi = acos(-1.0_wp)  \\pi  real(kind=wp), parameter :: deg2rad = pi/180.0_wp degrees to radians integer, parameter :: iknot = 0 automatically select the knots real(kind=wp), parameter :: x1 = 0.0_wp left endpoint real(kind=wp), parameter :: x2 = pi right endpoint integer, parameter :: nx = 181 number of points in x dimension\n in original grid real(kind=wp), parameter :: tol = 1.0e-12_wp tolerance for db1fqad real(kind=wp), dimension(:), allocatable :: tx x knots integer :: kx x bspline order real(kind=wp), dimension(nx) :: x new grid x points real(kind=wp), dimension(nx) :: fcn original grid\n function evaluations integer :: i counter integer :: iflag status flag real(kind=wp) :: f the evaluated integral\n (should be close to 2) Functions function test_function (x) result(f) Arguments Type Intent Optional Attributes Name real(kind=wp), intent(in) :: x Return Value real(kind=wp) f(x) Source Code program bspline_integrate_test use bspline_module use , intrinsic :: iso_fortran_env , only : wp => real64 implicit none real ( wp ), parameter :: pi = acos ( - 1.0_wp ) !!  \\pi  real ( wp ), parameter :: deg2rad = pi / 18 0.0_wp !! degrees to radians integer , parameter :: iknot = 0 !! automatically select the knots real ( wp ), parameter :: x1 = 0.0_wp !! left endpoint real ( wp ), parameter :: x2 = pi !! right endpoint integer , parameter :: nx = 181 !! number of points in x dimension !! in original grid real ( wp ), parameter :: tol = 1.0e-12_wp !! tolerance for [[db1fqad]] real ( wp ), dimension (:), allocatable :: tx !! x knots integer :: kx !! x bspline order real ( wp ), dimension ( nx ) :: x !! new grid x points real ( wp ), dimension ( nx ) :: fcn !! original grid !! function evaluations integer :: i !! counter integer :: iflag !! status flag real ( wp ) :: f !! the evaluated integral !! (should be close to 2) write ( * , * ) '' write ( * , '(A8,1X,A5,1X,A30,1X,A30)' ) 'Method' , 'Order' , 'Integral' , 'Error' do kx = 2 , 8 if ( allocated ( tx )) deallocate ( tx ) allocate ( tx ( nx + kx )) !function evaluations for original grid: do i = 1 , nx x ( i ) = deg2rad * real ( i - 1 , wp ) fcn ( i ) = sin ( x ( i )) end do ! initialize: call db1ink ( x , nx , fcn , kx , iknot , tx , fcn , iflag ) if ( iflag /= 0 ) error stop 'error calling db1ink' ! now integrate: call db1sqad ( tx , fcn , nx , kx , x1 , x2 , f , iflag ) ! display results: if ( iflag /= 0 ) then write ( * , * ) '' write ( * , * ) 'iflag: ' , iflag error stop 'error calling db1qad' else write ( * , '(A8,1X,I5,1X,E30.16,1X,E30.16)' ) 'db1qad' , kx , f , f - 2.0_wp end if ! integrate using adaptive version: call db1fqad ( test_function , tx , fcn , nx , kx , 0 , x1 , x2 , tol , f , iflag ) ! display results: if ( iflag /= 0 ) then write ( * , * ) '' write ( * , * ) 'iflag: ' , iflag error stop 'error calling db1fqad' else write ( * , '(A8,1X,I5,1X,E30.16,1X,E30.16)' ) 'db1fqad' , kx , f , f - 4.0_wp end if end do write ( * , * ) '' contains function test_function ( x ) result ( f ) implicit none real ( wp ), intent ( in ) :: x real ( wp ) :: f !! f(x) f = 2.0_wp end function test_function end program bspline_integrate_test","tags":"","loc":"program/bspline_integrate_test.html","title":"bspline_integrate_test â€“ bspline-fortran"},{"text":"Uses: bspline_module iso_fortran_env pyplot_module program~~knot_tests~~UsesGraph program~knot_tests knot_tests module~bspline_module bspline_module module~bspline_module->program~knot_tests pyplot_module pyplot_module pyplot_module->program~knot_tests iso_fortran_env iso_fortran_env iso_fortran_env->program~knot_tests module~bspline_sub_module bspline_sub_module iso_fortran_env->module~bspline_sub_module module~bspline_oo_module bspline_oo_module iso_fortran_env->module~bspline_oo_module module~bspline_sub_module->module~bspline_module module~bspline_sub_module->module~bspline_oo_module module~bspline_oo_module->module~bspline_module Help Ã— Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a parent (sub)module to the submodule which is\n    descended from it. Dashed arrows point from a module being used to the\n    module or program unit using it. Tests for different knot vectors. This requires pyplot_module Results Calls program~~knot_tests~~CallsGraph program~knot_tests knot_tests proc~test_func test_func program~knot_tests->proc~test_func Help Ã— Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Variables i kx nx x fcn tx s_default s1 s2 x_new f_new_default f1 f2 xval plt iflag istat Functions test_func Source Code knot_tests Variables Type Attributes Name Initial integer :: i counter integer, parameter :: kx = 4 x bspline order integer, parameter :: nx = 6 number of points in x dimension real(kind=wp), parameter, dimension(nx) :: x = [(real(i*10, wp), i=0, 11, (10+2)/nx)] [0,20,40,60,80,100] real(kind=wp), dimension(nx) :: fcn real(kind=wp), dimension(nx+kx) :: tx type(bspline_1d) :: s_default type(bspline_1d) :: s1 type(bspline_1d) :: s2 real(kind=wp), dimension(0:100) :: x_new real(kind=wp), dimension(0:100) :: f_new_default real(kind=wp), dimension(0:100) :: f1 real(kind=wp), dimension(0:100) :: f2 real(kind=wp) :: xval type(pyplot) :: plt integer :: iflag integer :: istat pyplot-fortran status flag Functions pure function test_func (x) result(f) 1d test function Arguments Type Intent Optional Attributes Name real(kind=wp), intent(in) :: x Return Value real(kind=wp) Source Code program knot_tests use bspline_module use , intrinsic :: iso_fortran_env , only : wp => real64 use pyplot_module implicit none integer :: i !! counter integer , parameter :: kx = 4 !! x bspline order integer , parameter :: nx = 6 !! number of points in x dimension real ( wp ), dimension ( nx ), parameter :: x = [( real ( i * 10 , wp ), i = 0 , 11 ,( 10 + 2 ) / nx )] !! [0,20,40,60,80,100] real ( wp ), dimension ( nx ) :: fcn real ( wp ), dimension ( nx + kx ) :: tx type ( bspline_1d ) :: s_default , s1 , s2 real ( wp ), dimension ( 0 : 100 ) :: x_new , f_new_default , f1 , f2 !,f_actual real ( wp ) :: xval type ( pyplot ) :: plt integer :: iflag integer :: istat !! pyplot-fortran status flag !function evaluations for original grid: do i = 1 , nx fcn ( i ) = test_func ( x ( i )) end do !initialize the plot: call plt % initialize ( grid = . true ., xlabel = 'x' , ylabel = 'f(x)' ,& title = 'Knot Test' , legend = . true .) call plt % add_plot ( x , fcn , label = 'Function $f(x) = \\sin(x \\cdot \\pi/18)$ : $x=[0,20,40,60,80,100]$' ,& linestyle = 'ko--' , markersize = 5 , linewidth = 2 , istat = istat ) !initialize three with different knot sequences: ! x = [ 0,      20,40,60,80,100                ] (x points) ! t = [ 0,0,0,0,   40,60,      101,101,101,101 ] (tx for not a knot conditions) call s_default % initialize ( x , fcn , kx , iflag ) !default (not-a-knot) if ( iflag /= 0 ) error stop 'error initializing s_default' !user-specified knots: tx = real ([ 0 , 0 , 0 , 0 , 20 , 40 , 101 , 101 , 101 , 101 ], wp ) call s1 % initialize ( x , fcn , kx , tx , iflag ) if ( iflag /= 0 ) error stop 'error initializing s1' tx = real ([ 0 , 0 , 0 , 0 , 60 , 80 , 101 , 101 , 101 , 101 ], wp ) call s2 % initialize ( x , fcn , kx , tx , iflag ) if ( iflag /= 0 ) error stop 'error initializing s2' do i = 0 , 100 xval = real ( i , wp ) x_new ( i ) = xval !f_actual(i) = test_func(xval) call s_default % evaluate ( xval , 0 , f_new_default ( i ), iflag ) if ( iflag /= 0 ) error stop 'error evaluating s_default' call s1 % evaluate ( xval , 0 , f1 ( i ), iflag ) if ( iflag /= 0 ) error stop 'error evaluating s1' call s2 % evaluate ( xval , 0 , f2 ( i ), iflag ) if ( iflag /= 0 ) error stop 'error evaluating s2' end do !call plt%add_plot(x_new,f_actual,label='Actual function',linestyle='k--',linewidth=2) call plt % add_plot ( x_new , f_new_default ,& label = 'Interpolated : $t_x=[0,0,0,0,40,60,102,102,102,102]$ (Default)' ,& linestyle = 'b-' , linewidth = 1 , istat = istat ) call plt % add_plot ( x_new , f1 ,& label = 'Interpolated : $t_x=[0,0,0,0,20,40,101,101,101,101]$' ,& linestyle = 'r-' , linewidth = 1 , istat = istat ) call plt % add_plot ( x_new , f2 ,& label = 'Interpolated : $t_x=[0,0,0,0,60,80,101,101,101,101]$' ,& linestyle = 'g-' , linewidth = 1 , istat = istat ) !plot the results: call plt % savefig ( 'knot_tests.png' , istat = istat ) contains pure function test_func ( x ) result ( f ) !! 1d test function implicit none real ( wp ) :: f real ( wp ), intent ( in ) :: x real ( wp ), parameter :: a = acos ( - 1.0_wp ) / 1 8.0_wp f = sin ( a * x ) end function test_func end program knot_tests","tags":"","loc":"program/knot_tests.html","title":"knot_tests â€“ bspline-fortran"},{"text":"Uses: bspline_module iso_fortran_env program~~bspline_regridding_test~~UsesGraph program~bspline_regridding_test bspline_regridding_test module~bspline_module bspline_module module~bspline_module->program~bspline_regridding_test iso_fortran_env iso_fortran_env iso_fortran_env->program~bspline_regridding_test module~bspline_sub_module bspline_sub_module iso_fortran_env->module~bspline_sub_module module~bspline_oo_module bspline_oo_module iso_fortran_env->module~bspline_oo_module module~bspline_sub_module->module~bspline_module module~bspline_sub_module->module~bspline_oo_module module~bspline_oo_module->module~bspline_module var panprogrambspline_regridding_testUsesGraph = svgPanZoom('#programbspline_regridding_testUsesGraph', {\n                    zoomEnabled: true,\n                    controlIconsEnabled: true,\n                    fit: true,\n                    center: true,}); Help Ã— Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a parent (sub)module to the submodule which is\n    descended from it. Dashed arrows point from a module being used to the\n    module or program unit using it. 2D data regridding using the bspline module. Calls program~~bspline_regridding_test~~CallsGraph program~bspline_regridding_test bspline_regridding_test db2ink db2ink program~bspline_regridding_test->db2ink proc~test_func~2 test_func program~bspline_regridding_test->proc~test_func~2 db2val db2val program~bspline_regridding_test->db2val Help Ã— Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Variables kx ky idx idy nx ny nx_new ny_new iknot x y fcn_new x_new y_new tx ty fcn_2d val tru err errmax i j iflag inbvx inbvy iloy Functions test_func Source Code bspline_regridding_test Variables Type Attributes Name Initial integer, parameter :: kx = 4 x bspline order integer, parameter :: ky = 4 y bspline order integer, parameter :: idx = 0 db2val input integer, parameter :: idy = 0 db2val input integer, parameter :: nx = 6 number of points in x dimension in original grid integer, parameter :: ny = 5 number of points in y dimension in original grid integer, parameter :: nx_new = 11 number of points in x dimension for new grid integer, parameter :: ny_new = 9 number of points in y dimension for new grid integer, parameter :: iknot = 0 automatically select the knots real(kind=wp), parameter, dimension(nx) :: x = [0.0_wp, 2.0_wp, 4.0_wp, 6.0_wp, 8.0_wp, 10.0_wp] x points in original grid real(kind=wp), parameter, dimension(ny) :: y = [0.0_wp, 2.0_wp, 4.0_wp, 6.0_wp, 8.0_wp] y points in original grid real(kind=wp), dimension(nx_new,ny_new) :: fcn_new new grid function evaluations real(kind=wp), dimension(nx_new) :: x_new new grid x points real(kind=wp), dimension(ny_new) :: y_new new grid y points real(kind=wp), dimension(nx+kx) :: tx x knots real(kind=wp), dimension(ny+ky) :: ty y knots real(kind=wp), dimension(nx,ny) :: fcn_2d original grid function evaluations real(kind=wp) :: val real(kind=wp) :: tru real(kind=wp) :: err real(kind=wp) :: errmax integer :: i integer :: j integer :: iflag status flag integer :: inbvx integer :: inbvy integer :: iloy Functions function test_func (x, y) result(f) 2d test function Arguments Type Intent Optional Attributes Name real(kind=wp), intent(in) :: x real(kind=wp), intent(in) :: y Return Value real(kind=wp) Source Code program bspline_regridding_test use bspline_module use , intrinsic :: iso_fortran_env , only : wp => real64 implicit none integer , parameter :: kx = 4 !! x bspline order integer , parameter :: ky = 4 !! y bspline order integer , parameter :: idx = 0 !! [[db2val]] input integer , parameter :: idy = 0 !! [[db2val]] input integer , parameter :: nx = 6 !! number of points in x dimension in original grid integer , parameter :: ny = 5 !! number of points in y dimension in original grid integer , parameter :: nx_new = 11 !! number of points in x dimension for new grid integer , parameter :: ny_new = 9 !! number of points in y dimension for new grid integer , parameter :: iknot = 0 !! automatically select the knots real ( wp ), dimension ( nx ), parameter :: x = [ 0.0_wp , 2.0_wp , 4.0_wp , 6.0_wp , 8.0_wp , 1 0.0_wp ] !! x points in original grid real ( wp ), dimension ( ny ), parameter :: y = [ 0.0_wp , 2.0_wp , 4.0_wp , 6.0_wp , 8.0_wp ] !! y points in original grid real ( wp ), dimension ( nx_new , ny_new ) :: fcn_new !! new grid function evaluations real ( wp ), dimension ( nx_new ) :: x_new !! new grid x points real ( wp ), dimension ( ny_new ) :: y_new !! new grid y points real ( wp ), dimension ( nx + kx ) :: tx !! x knots real ( wp ), dimension ( ny + ky ) :: ty !! y knots real ( wp ), dimension ( nx , ny ) :: fcn_2d !! original grid function evaluations real ( wp ) :: val , tru , err , errmax integer :: i , j integer :: iflag !! status flag integer :: inbvx , inbvy , iloy !function evaluations for original grid: do i = 1 , nx do j = 1 , ny fcn_2d ( i , j ) = test_func ( x ( i ), y ( j )) end do end do !display original data: write ( * , * ) '-----------------' write ( * , * ) '  INITIAL DATA:' write ( * , * ) '-----------------' write ( * , '(A/,*(F12.6,1X))' ) 'x:' , x write ( * , * ) '' write ( * , '(A/,*(F12.6,1X))' ) 'y:' , y write ( * , * ) '' write ( * , '(A)' ) 'fcn(x,y):' do i = 1 , nx write ( * , '(5F12.6)' ) fcn_2d ( i ,:) end do write ( * , * ) '' !regrid: inbvx = 1 inbvy = 1 iloy = 1 call db2ink ( x , nx , y , ny , fcn_2d , kx , ky , iknot , tx , ty , fcn_2d , iflag ) if ( iflag /= 0 ) error stop 'error calling db2ink' errmax = 0.0_wp do i = 1 , nx_new x_new ( i ) = real ( i - 1 , wp ) do j = 1 , ny_new y_new ( j ) = real ( j - 1 , wp ) call db2val ( x_new ( i ), y_new ( j ), idx , idy , tx , ty , nx , ny , kx , ky , fcn_2d , val , iflag ,& inbvx , inbvy , iloy ) if ( iflag /= 0 ) error stop 'error calling db2val' fcn_new ( i , j ) = val tru = test_func ( x_new ( i ), y_new ( j )) !truth value err = abs ( tru - val ) errmax = max ( err , errmax ) end do end do !display new grid: write ( * , * ) '-----------------' write ( * , * ) '  NEW GRID:' write ( * , * ) '-----------------' write ( * , '(A/,*(F12.6,1X))' ) 'x:' , x_new write ( * , * ) '' write ( * , '(A/,*(F12.6,1X))' ) 'y:' , y_new write ( * , * ) '' write ( * , '(A)' ) 'fcn(x,y):' do i = 1 , nx_new write ( * , '(11F12.6)' ) fcn_new ( i ,:) end do write ( * , * ) '' write ( * , * ) ' max error:' , errmax write ( * , * ) '' contains function test_func ( x , y ) result ( f ) !! 2d test function implicit none real ( wp ) :: f real ( wp ), intent ( in ) :: x , y real ( wp ), parameter :: deg2rad = acos ( - 1.0_wp ) / 18 0.0_wp !! degrees to radians conversion factor f = sin ( deg2rad * ( x + y )) end function test_func end program bspline_regridding_test","tags":"","loc":"program/bspline_regridding_test.html","title":"bspline_regridding_test â€“ bspline-fortran"},{"text":"Uses: bspline_module iso_fortran_env program~~bspline_test~~UsesGraph program~bspline_test bspline_test module~bspline_module bspline_module module~bspline_module->program~bspline_test iso_fortran_env iso_fortran_env iso_fortran_env->program~bspline_test module~bspline_sub_module bspline_sub_module iso_fortran_env->module~bspline_sub_module module~bspline_oo_module bspline_oo_module iso_fortran_env->module~bspline_oo_module module~bspline_sub_module->module~bspline_module module~bspline_sub_module->module~bspline_oo_module module~bspline_oo_module->module~bspline_module Help Ã— Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a parent (sub)module to the submodule which is\n    descended from it. Dashed arrows point from a module being used to the\n    module or program unit using it. Units test for 1d-6d tensor product b-spline interpolation. Calls program~~bspline_test~~CallsGraph program~bspline_test bspline_test get_status_message get_status_message program~bspline_test->get_status_message db5ink db5ink program~bspline_test->db5ink db3val db3val program~bspline_test->db3val db1ink db1ink program~bspline_test->db1ink proc~f5~3 f5 program~bspline_test->proc~f5~3 db4ink db4ink program~bspline_test->db4ink proc~f2~3 f2 program~bspline_test->proc~f2~3 proc~f3~3 f3 program~bspline_test->proc~f3~3 db2val db2val program~bspline_test->db2val proc~f6~3 f6 program~bspline_test->proc~f6~3 proc~f4~3 f4 program~bspline_test->proc~f4~3 db3ink db3ink program~bspline_test->db3ink db4val db4val program~bspline_test->db4val db6ink db6ink program~bspline_test->db6ink db2ink db2ink program~bspline_test->db2ink db6val db6val program~bspline_test->db6val db5val db5val program~bspline_test->db5val proc~f1~3 f1 program~bspline_test->proc~f1~3 db1val db1val program~bspline_test->db1val Help Ã— Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Variables nx ny nz nq nr ns kx ky kz kq kr ks iknot x y z q r s tx ty tz tq tr ts fcn_1d fcn_2d fcn_3d fcn_4d fcn_5d fcn_6d tol val tru err errmax fail i j k l m n idx idy idz idq idr ids iflag inbvx inbvy inbvz inbvq inbvr inbvs iloy iloz iloq ilor ilos Functions f1 f2 f3 f4 f5 f6 Source Code bspline_test Variables Type Attributes Name Initial integer, parameter :: nx = 6 number of points in x integer, parameter :: ny = 6 number of points in y integer, parameter :: nz = 6 number of points in z integer, parameter :: nq = 6 number of points in q integer, parameter :: nr = 6 number of points in r integer, parameter :: ns = 6 number of points in s integer, parameter :: kx = 4 order in x integer, parameter :: ky = 4 order in y integer, parameter :: kz = 4 order in z integer, parameter :: kq = 4 order in q integer, parameter :: kr = 4 order in r integer, parameter :: ks = 4 order in s integer, parameter :: iknot = 0 automatically select the knots real(kind=wp) :: x (nx) real(kind=wp) :: y (ny) real(kind=wp) :: z (nz) real(kind=wp) :: q (nq) real(kind=wp) :: r (nr) real(kind=wp) :: s (ns) real(kind=wp) :: tx (nx+kx) real(kind=wp) :: ty (ny+ky) real(kind=wp) :: tz (nz+kz) real(kind=wp) :: tq (nq+kq) real(kind=wp) :: tr (nr+kr) real(kind=wp) :: ts (ns+ks) real(kind=wp) :: fcn_1d (nx) real(kind=wp) :: fcn_2d (nx,ny) real(kind=wp) :: fcn_3d (nx,ny,nz) real(kind=wp) :: fcn_4d (nx,ny,nz,nq) real(kind=wp) :: fcn_5d (nx,ny,nz,nq,nr) real(kind=wp) :: fcn_6d (nx,ny,nz,nq,nr,ns) real(kind=wp) :: tol real(kind=wp), dimension(6) :: val real(kind=wp), dimension(6) :: tru real(kind=wp), dimension(6) :: err real(kind=wp), dimension(6) :: errmax logical :: fail integer :: i integer :: j integer :: k integer :: l integer :: m integer :: n integer :: idx integer :: idy integer :: idz integer :: idq integer :: idr integer :: ids integer, dimension(6) :: iflag integer :: inbvx integer :: inbvy integer :: inbvz integer :: inbvq integer :: inbvr integer :: inbvs integer :: iloy integer :: iloz integer :: iloq integer :: ilor integer :: ilos Functions function f1 (x) 1d test function Arguments Type Intent Optional Attributes Name real(kind=wp) :: x Return Value real(kind=wp) function f2 (x, y) 2d test function Arguments Type Intent Optional Attributes Name real(kind=wp) :: x real(kind=wp) :: y Return Value real(kind=wp) function f3 (x, y, z) 3d test function Arguments Type Intent Optional Attributes Name real(kind=wp) :: x real(kind=wp) :: y real(kind=wp) :: z Return Value real(kind=wp) function f4 (x, y, z, q) 4d test function Arguments Type Intent Optional Attributes Name real(kind=wp) :: x real(kind=wp) :: y real(kind=wp) :: z real(kind=wp) :: q Return Value real(kind=wp) function f5 (x, y, z, q, r) 5d test function Arguments Type Intent Optional Attributes Name real(kind=wp) :: x real(kind=wp) :: y real(kind=wp) :: z real(kind=wp) :: q real(kind=wp) :: r Return Value real(kind=wp) function f6 (x, y, z, q, r, s) 6d test function Arguments Type Intent Optional Attributes Name real(kind=wp) :: x real(kind=wp) :: y real(kind=wp) :: z real(kind=wp) :: q real(kind=wp) :: r real(kind=wp) :: s Return Value real(kind=wp) Source Code program bspline_test use bspline_module use , intrinsic :: iso_fortran_env , only : wp => real64 implicit none integer , parameter :: nx = 6 !! number of points in x integer , parameter :: ny = 6 !! number of points in y integer , parameter :: nz = 6 !! number of points in z integer , parameter :: nq = 6 !! number of points in q integer , parameter :: nr = 6 !! number of points in r integer , parameter :: ns = 6 !! number of points in s integer , parameter :: kx = 4 !! order in x integer , parameter :: ky = 4 !! order in y integer , parameter :: kz = 4 !! order in z integer , parameter :: kq = 4 !! order in q integer , parameter :: kr = 4 !! order in r integer , parameter :: ks = 4 !! order in s integer , parameter :: iknot = 0 !! automatically select the knots real ( wp ) :: x ( nx ), y ( ny ), z ( nz ), q ( nq ), r ( nr ), s ( ns ) real ( wp ) :: tx ( nx + kx ), ty ( ny + ky ), tz ( nz + kz ), tq ( nq + kq ), tr ( nr + kr ), ts ( ns + ks ) real ( wp ) :: fcn_1d ( nx ) real ( wp ) :: fcn_2d ( nx , ny ) real ( wp ) :: fcn_3d ( nx , ny , nz ) real ( wp ) :: fcn_4d ( nx , ny , nz , nq ) real ( wp ) :: fcn_5d ( nx , ny , nz , nq , nr ) real ( wp ) :: fcn_6d ( nx , ny , nz , nq , nr , ns ) real ( wp ) :: tol real ( wp ), dimension ( 6 ) :: val , tru , err , errmax logical :: fail integer :: i , j , k , l , m , n , idx , idy , idz , idq , idr , ids integer , dimension ( 6 ) :: iflag integer :: inbvx , inbvy , inbvz , inbvq , inbvr , inbvs integer :: iloy , iloz , iloq , ilor , ilos fail = . false . tol = 1.0e-14_wp idx = 0 idy = 0 idz = 0 idq = 0 idr = 0 ids = 0 do i = 1 , nx x ( i ) = dble ( i - 1 ) / dble ( nx - 1 ) end do do j = 1 , ny y ( j ) = dble ( j - 1 ) / dble ( ny - 1 ) end do do k = 1 , nz z ( k ) = dble ( k - 1 ) / dble ( nz - 1 ) end do do l = 1 , nq q ( l ) = dble ( l - 1 ) / dble ( nq - 1 ) end do do m = 1 , nr r ( m ) = dble ( m - 1 ) / dble ( nr - 1 ) end do do n = 1 , ns s ( n ) = dble ( n - 1 ) / dble ( ns - 1 ) end do do i = 1 , nx fcn_1d ( i ) = f1 ( x ( i )) do j = 1 , ny fcn_2d ( i , j ) = f2 ( x ( i ), y ( j )) do k = 1 , nz fcn_3d ( i , j , k ) = f3 ( x ( i ), y ( j ), z ( k )) do l = 1 , nq fcn_4d ( i , j , k , l ) = f4 ( x ( i ), y ( j ), z ( k ), q ( l )) do m = 1 , nr fcn_5d ( i , j , k , l , m ) = f5 ( x ( i ), y ( j ), z ( k ), q ( l ), r ( m )) do n = 1 , ns fcn_6d ( i , j , k , l , m , n ) = f6 ( x ( i ), y ( j ), z ( k ), q ( l ), r ( m ), s ( n )) end do end do end do end do end do end do !have to set these before the first evaluate call: inbvx = 1 inbvy = 1 inbvz = 1 inbvq = 1 inbvr = 1 inbvs = 1 iloy = 1 iloz = 1 iloq = 1 ilor = 1 ilos = 1 ! initialize call db1ink ( x , nx , fcn_1d , kx , iknot , tx , fcn_1d , iflag ( 1 )) call db2ink ( x , nx , y , ny , fcn_2d , kx , ky , iknot , tx , ty , fcn_2d , iflag ( 2 )) call db3ink ( x , nx , y , ny , z , nz , fcn_3d , kx , ky , kz , iknot , tx , ty , tz , fcn_3d , iflag ( 3 )) call db4ink ( x , nx , y , ny , z , nz , q , nq , fcn_4d , kx , ky , kz , kq , iknot , tx , ty , tz , tq , fcn_4d , iflag ( 4 )) call db5ink ( x , nx , y , ny , z , nz , q , nq , r , nr , fcn_5d , kx , ky , kz , kq , kr , iknot , tx , ty , tz , tq , tr , fcn_5d , iflag ( 5 )) call db6ink ( x , nx , y , ny , z , nz , q , nq , r , nr , s , ns , fcn_6d , kx , ky , kz , kq , kr , ks , iknot , tx , ty , tz , tq , tr , ts , fcn_6d , iflag ( 6 )) if ( any ( iflag /= 0 )) then do i = 1 , 6 if ( iflag ( i ) /= 0 ) then write ( * , * ) 'Error initializing ' , i , 'D spline: ' // get_status_message ( iflag ( i )) end if end do end if ! compute max error at interpolation points errmax = 0.0_wp do i = 1 , nx call db1val ( x ( i ), idx ,& tx , nx , kx , fcn_1d , val ( 1 ), iflag ( 1 ), inbvx ) tru ( 1 ) = f1 ( x ( i )) err ( 1 ) = abs ( tru ( 1 ) - val ( 1 )) errmax ( 1 ) = max ( err ( 1 ), errmax ( 1 )) do j = 1 , ny call db2val ( x ( i ), y ( j ), idx , idy ,& tx , ty , nx , ny , kx , ky , fcn_2d , val ( 2 ), iflag ( 2 ),& inbvx , inbvy , iloy ) tru ( 2 ) = f2 ( x ( i ), y ( j )) err ( 2 ) = abs ( tru ( 2 ) - val ( 2 )) errmax ( 2 ) = max ( err ( 2 ), errmax ( 2 )) do k = 1 , nz call db3val ( x ( i ), y ( j ), z ( k ), idx , idy , idz ,& tx , ty , tz , nx , ny , nz , kx , ky , kz , fcn_3d , val ( 3 ), iflag ( 3 ),& inbvx , inbvy , inbvz , iloy , iloz ) tru ( 3 ) = f3 ( x ( i ), y ( j ), z ( k )) err ( 3 ) = abs ( tru ( 3 ) - val ( 3 )) errmax ( 3 ) = max ( err ( 3 ), errmax ( 3 )) do l = 1 , nq call db4val ( x ( i ), y ( j ), z ( k ), q ( l ), idx , idy , idz , idq ,& tx , ty , tz , tq , nx , ny , nz , nq , kx , ky , kz , kq , fcn_4d , val ( 4 ), iflag ( 4 ),& inbvx , inbvy , inbvz , inbvq , iloy , iloz , iloq ) tru ( 4 ) = f4 ( x ( i ), y ( j ), z ( k ), q ( l )) err ( 4 ) = abs ( tru ( 4 ) - val ( 4 )) errmax ( 4 ) = max ( err ( 4 ), errmax ( 4 )) do m = 1 , nr call db5val ( x ( i ), y ( j ), z ( k ), q ( l ), r ( m ), idx , idy , idz , idq , idr ,& tx , ty , tz , tq , tr , nx , ny , nz , nq , nr , kx , ky , kz , kq , kr , fcn_5d , val ( 5 ), iflag ( 5 ),& inbvx , inbvy , inbvz , inbvq , inbvr , iloy , iloz , iloq , ilor ) tru ( 5 ) = f5 ( x ( i ), y ( j ), z ( k ), q ( l ), r ( m )) err ( 5 ) = abs ( tru ( 5 ) - val ( 5 )) errmax ( 5 ) = max ( err ( 5 ), errmax ( 5 )) do n = 1 , ns call db6val ( x ( i ), y ( j ), z ( k ), q ( l ), r ( m ), s ( n ), idx , idy , idz , idq , idr , ids ,& tx , ty , tz , tq , tr , ts , nx , ny , nz , nq , nr , ns , kx , ky , kz , kq , kr , ks , fcn_6d , val ( 6 ), iflag ( 6 ),& inbvx , inbvy , inbvz , inbvq , inbvr , inbvs , iloy , iloz , iloq , ilor , ilos ) tru ( 6 ) = f6 ( x ( i ), y ( j ), z ( k ), q ( l ), r ( m ), s ( n )) err ( 6 ) = abs ( tru ( 6 ) - val ( 6 )) errmax ( 6 ) = max ( err ( 6 ), errmax ( 6 )) end do end do end do end do end do end do ! check max error against tolerance do i = 1 , 6 write ( * , * ) i , 'D: max error:' , errmax ( i ) if ( errmax ( i ) >= tol ) then write ( * , * ) ' ** test failed ** ' else write ( * , * ) ' ** test passed ** ' end if write ( * , * ) '' end do contains real ( wp ) function f1 ( x ) !! 1d test function implicit none real ( wp ) :: x f1 = 0.5_wp * ( x * exp ( - x ) + sin ( x ) ) end function f1 real ( wp ) function f2 ( x , y ) !! 2d test function implicit none real ( wp ) x , y , piov2 piov2 = 2.0_wp * atan ( 1.0_wp ) f2 = 0.5_wp * ( y * exp ( - x ) + sin ( piov2 * y ) ) end function f2 real ( wp ) function f3 ( x , y , z ) !! 3d test function implicit none real ( wp ) x , y , z , piov2 piov2 = 2.0_wp * atan ( 1.0_wp ) f3 = 0.5_wp * ( y * exp ( - x ) + z * sin ( piov2 * y ) ) end function f3 real ( wp ) function f4 ( x , y , z , q ) !! 4d test function implicit none real ( wp ) x , y , z , q , piov2 piov2 = 2.0_wp * atan ( 1.0_wp ) f4 = 0.5_wp * ( y * exp ( - x ) + z * sin ( piov2 * y ) + q ) end function f4 real ( wp ) function f5 ( x , y , z , q , r ) !! 5d test function implicit none real ( wp ) x , y , z , q , r , piov2 piov2 = 2.0_wp * atan ( 1.0_wp ) f5 = 0.5_wp * ( y * exp ( - x ) + z * sin ( piov2 * y ) + q * r ) end function f5 real ( wp ) function f6 ( x , y , z , q , r , s ) !! 6d test function implicit none real ( wp ) x , y , z , q , r , s , piov2 piov2 = 2.0_wp * atan ( 1.0_wp ) f6 = 0.5_wp * ( y * exp ( - x ) + z * sin ( piov2 * y ) + q * r + 2.0_wp * s ) end function f6 end program bspline_test","tags":"","loc":"program/bspline_test.html","title":"bspline_test â€“ bspline-fortran"},{"text":"Uses: bspline_module iso_fortran_env pyplot_module program~~bspline_speed_test_oo~~UsesGraph program~bspline_speed_test_oo bspline_speed_test_oo module~bspline_module bspline_module module~bspline_module->program~bspline_speed_test_oo pyplot_module pyplot_module pyplot_module->program~bspline_speed_test_oo iso_fortran_env iso_fortran_env iso_fortran_env->program~bspline_speed_test_oo module~bspline_sub_module bspline_sub_module iso_fortran_env->module~bspline_sub_module module~bspline_oo_module bspline_oo_module iso_fortran_env->module~bspline_oo_module module~bspline_sub_module->module~bspline_module module~bspline_sub_module->module~bspline_oo_module module~bspline_oo_module->module~bspline_module var panprogrambspline_speed_test_ooUsesGraph = svgPanZoom('#programbspline_speed_test_ooUsesGraph', {\n                    zoomEnabled: true,\n                    controlIconsEnabled: true,\n                    fit: true,\n                    center: true,}); Help Ã— Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a parent (sub)module to the submodule which is\n    descended from it. Dashed arrows point from a module being used to the\n    module or program unit using it. Speed test for 1d-6d tensor product b-spline interpolation (object-oriented version). Results Calls program~~bspline_speed_test_oo~~CallsGraph program~bspline_speed_test_oo bspline_speed_test_oo proc~f4~4 f4 program~bspline_speed_test_oo->proc~f4~4 bspline_3d bspline_3d program~bspline_speed_test_oo->bspline_3d proc~f5~4 f5 program~bspline_speed_test_oo->proc~f5~4 bspline_6d bspline_6d program~bspline_speed_test_oo->bspline_6d proc~f2~4 f2 program~bspline_speed_test_oo->proc~f2~4 bspline_1d bspline_1d program~bspline_speed_test_oo->bspline_1d proc~f6~4 f6 program~bspline_speed_test_oo->proc~f6~4 bspline_5d bspline_5d program~bspline_speed_test_oo->bspline_5d bspline_2d bspline_2d program~bspline_speed_test_oo->bspline_2d proc~f3~4 f3 program~bspline_speed_test_oo->proc~f3~4 proc~f1~4 f1 program~bspline_speed_test_oo->proc~f1~4 bspline_4d bspline_4d program~bspline_speed_test_oo->bspline_4d Help Ã— Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Variables nx ny nz nq nr ns kx ky kz kq kr ks n_cases x y z q r s fcn_1d fcn_2d fcn_3d fcn_4d fcn_5d fcn_6d s1 s2 s3 s4 s5 s6 val sumval i j k l m n idx idy idz idq idr ids iflag tstart tend plt cases_per_sec istat Functions f1 f2 f3 f4 f5 f6 Source Code bspline_speed_test_oo Variables Type Attributes Name Initial integer, parameter :: nx = 8 integer, parameter :: ny = 8 integer, parameter :: nz = 8 integer, parameter :: nq = 8 integer, parameter :: nr = 8 integer, parameter :: ns = 8 integer, parameter :: kx = 4 integer, parameter :: ky = 4 integer, parameter :: kz = 4 integer, parameter :: kq = 4 integer, parameter :: kr = 4 integer, parameter :: ks = 4 integer, parameter :: n_cases = nx*ny*nz*nq*nr*ns real(kind=wp) :: x (nx) real(kind=wp) :: y (ny) real(kind=wp) :: z (nz) real(kind=wp) :: q (nq) real(kind=wp) :: r (nr) real(kind=wp) :: s (ns) real(kind=wp) :: fcn_1d (nx) real(kind=wp) :: fcn_2d (nx,ny) real(kind=wp) :: fcn_3d (nx,ny,nz) real(kind=wp) :: fcn_4d (nx,ny,nz,nq) real(kind=wp) :: fcn_5d (nx,ny,nz,nq,nr) real(kind=wp) :: fcn_6d (nx,ny,nz,nq,nr,ns) type(bspline_1d) :: s1 type(bspline_2d) :: s2 type(bspline_3d) :: s3 type(bspline_4d) :: s4 type(bspline_5d) :: s5 type(bspline_6d) :: s6 real(kind=wp) :: val real(kind=wp) :: sumval integer :: i integer :: j integer :: k integer :: l integer :: m integer :: n integer :: idx integer :: idy integer :: idz integer :: idq integer :: idr integer :: ids integer :: iflag real :: tstart real :: tend type(pyplot) :: plt real(kind=wp), dimension(6) :: cases_per_sec integer :: istat pyplot-fortran status flag Functions function f1 (x) result(f) 1d test function Arguments Type Intent Optional Attributes Name real(kind=wp), intent(in) :: x Return Value real(kind=wp) function f2 (x, y) result(f) 2d test function Arguments Type Intent Optional Attributes Name real(kind=wp), intent(in) :: x real(kind=wp), intent(in) :: y Return Value real(kind=wp) function f3 (x, y, z) result(f) 3d test function Arguments Type Intent Optional Attributes Name real(kind=wp), intent(in) :: x real(kind=wp), intent(in) :: y real(kind=wp), intent(in) :: z Return Value real(kind=wp) function f4 (x, y, z, q) result(f) 4d test function Arguments Type Intent Optional Attributes Name real(kind=wp), intent(in) :: x real(kind=wp), intent(in) :: y real(kind=wp), intent(in) :: z real(kind=wp), intent(in) :: q Return Value real(kind=wp) function f5 (x, y, z, q, r) result(f) 5d test function Arguments Type Intent Optional Attributes Name real(kind=wp), intent(in) :: x real(kind=wp), intent(in) :: y real(kind=wp), intent(in) :: z real(kind=wp), intent(in) :: q real(kind=wp), intent(in) :: r Return Value real(kind=wp) function f6 (x, y, z, q, r, s) result(f) 6d test function Arguments Type Intent Optional Attributes Name real(kind=wp), intent(in) :: x real(kind=wp), intent(in) :: y real(kind=wp), intent(in) :: z real(kind=wp), intent(in) :: q real(kind=wp), intent(in) :: r real(kind=wp), intent(in) :: s Return Value real(kind=wp) Source Code program bspline_speed_test_oo use bspline_module use , intrinsic :: iso_fortran_env , only : wp => real64 use pyplot_module implicit none integer , parameter :: nx = 8 !number of points integer , parameter :: ny = 8 integer , parameter :: nz = 8 integer , parameter :: nq = 8 integer , parameter :: nr = 8 integer , parameter :: ns = 8 integer , parameter :: kx = 4 !order integer , parameter :: ky = 4 integer , parameter :: kz = 4 integer , parameter :: kq = 4 integer , parameter :: kr = 4 integer , parameter :: ks = 4 integer , parameter :: n_cases = nx * ny * nz * nq * nr * ns real ( wp ) :: x ( nx ), y ( ny ), z ( nz ), q ( nq ), r ( nr ), s ( ns ) real ( wp ) :: fcn_1d ( nx ) real ( wp ) :: fcn_2d ( nx , ny ) real ( wp ) :: fcn_3d ( nx , ny , nz ) real ( wp ) :: fcn_4d ( nx , ny , nz , nq ) real ( wp ) :: fcn_5d ( nx , ny , nz , nq , nr ) real ( wp ) :: fcn_6d ( nx , ny , nz , nq , nr , ns ) type ( bspline_1d ) :: s1 type ( bspline_2d ) :: s2 type ( bspline_3d ) :: s3 type ( bspline_4d ) :: s4 type ( bspline_5d ) :: s5 type ( bspline_6d ) :: s6 real ( wp ) :: val , sumval integer :: i , j , k , l , m , n , idx , idy , idz , idq , idr , ids , iflag real :: tstart , tend type ( pyplot ) :: plt real ( wp ), dimension ( 6 ) :: cases_per_sec integer :: istat !! pyplot-fortran status flag idx = 0 idy = 0 idz = 0 idq = 0 idr = 0 ids = 0 x = [ ( dble ( i ), i = 1 , nx ) ] y = [ ( dble ( i ), i = 1 , ny ) ] z = [ ( dble ( i ), i = 1 , nz ) ] q = [ ( dble ( i ), i = 1 , nq ) ] r = [ ( dble ( i ), i = 1 , nr ) ] s = [ ( dble ( i ), i = 1 , ns ) ] !evaluate the functions: do i = 1 , nx fcn_1d ( i ) = f1 ( x ( i )) do j = 1 , ny fcn_2d ( i , j ) = f2 ( x ( i ), y ( j )) do k = 1 , nz fcn_3d ( i , j , k ) = f3 ( x ( i ), y ( j ), z ( k )) do l = 1 , nq fcn_4d ( i , j , k , l ) = f4 ( x ( i ), y ( j ), z ( k ), q ( l )) do m = 1 , nr fcn_5d ( i , j , k , l , m ) = f5 ( x ( i ), y ( j ), z ( k ), q ( l ), r ( m )) do n = 1 , ns fcn_6d ( i , j , k , l , m , n ) = f6 ( x ( i ), y ( j ), z ( k ), q ( l ), r ( m ), s ( n )) end do end do end do end do end do end do !initialize using the constructors: s1 = bspline_1d ( x , fcn_1d , kx ) ; if (. not . s1 % status_ok ()) error stop 'error initializing s1' s2 = bspline_2d ( x , y , fcn_2d , kx , ky ) ; if (. not . s1 % status_ok ()) error stop 'error initializing s2' s3 = bspline_3d ( x , y , z , fcn_3d , kx , ky , kz ) ; if (. not . s1 % status_ok ()) error stop 'error initializing s3' s4 = bspline_4d ( x , y , z , q , fcn_4d , kx , ky , kz , kq ) ; if (. not . s1 % status_ok ()) error stop 'error initializing s4' s5 = bspline_5d ( x , y , z , q , r , fcn_5d , kx , ky , kz , kq , kr ) ; if (. not . s1 % status_ok ()) error stop 'error initializing s5' s6 = bspline_6d ( x , y , z , q , r , s , fcn_6d , kx , ky , kz , kq , kr , ks ); if (. not . s1 % status_ok ()) error stop 'error initializing s6' ! evaluate the interpolants: sumval = 0.0_wp call cpu_time ( tstart ) do i = 1 , nx do j = 1 , ny do k = 1 , nz do l = 1 , nq do m = 1 , nr do n = 1 , ns call s1 % evaluate ( x ( i ), idx , val , iflag ) sumval = sumval + val end do end do end do end do end do end do call cpu_time ( tend ) write ( * , * ) '' write ( * , * ) '1D' write ( * , * ) 'result         :' , sumval write ( * , * ) 'number of cases:' , n_cases write ( * , * ) 'cases/sec      :' , n_cases / ( tend - tstart ) cases_per_sec ( 1 ) = n_cases / ( tend - tstart ) sumval = 0.0_wp call cpu_time ( tstart ) do i = 1 , nx do j = 1 , ny do k = 1 , nz do l = 1 , nq do m = 1 , nr do n = 1 , ns call s2 % evaluate ( x ( i ), y ( j ), idx , idy , val , iflag ) sumval = sumval + val end do end do end do end do end do end do call cpu_time ( tend ) write ( * , * ) '' write ( * , * ) '2D' write ( * , * ) 'result         :' , sumval write ( * , * ) 'number of cases:' , n_cases write ( * , * ) 'cases/sec      :' , n_cases / ( tend - tstart ) cases_per_sec ( 2 ) = n_cases / ( tend - tstart ) sumval = 0.0_wp call cpu_time ( tstart ) do i = 1 , nx do j = 1 , ny do k = 1 , nz do l = 1 , nq do m = 1 , nr do n = 1 , ns call s3 % evaluate ( x ( i ), y ( j ), z ( k ), idx , idy , idz , val , iflag ) sumval = sumval + val end do end do end do end do end do end do call cpu_time ( tend ) write ( * , * ) '' write ( * , * ) '3D' write ( * , * ) 'result         :' , sumval write ( * , * ) 'number of cases:' , n_cases write ( * , * ) 'cases/sec      :' , n_cases / ( tend - tstart ) cases_per_sec ( 3 ) = n_cases / ( tend - tstart ) sumval = 0.0_wp call cpu_time ( tstart ) do i = 1 , nx do j = 1 , ny do k = 1 , nz do l = 1 , nq do m = 1 , nr do n = 1 , ns call s4 % evaluate ( x ( i ), y ( j ), z ( k ), q ( l ), idx , idy , idz , idq , val , iflag ) sumval = sumval + val end do end do end do end do end do end do call cpu_time ( tend ) write ( * , * ) '' write ( * , * ) '4D' write ( * , * ) 'result         :' , sumval write ( * , * ) 'number of cases:' , n_cases write ( * , * ) 'cases/sec      :' , n_cases / ( tend - tstart ) cases_per_sec ( 4 ) = n_cases / ( tend - tstart ) sumval = 0.0_wp call cpu_time ( tstart ) do i = 1 , nx do j = 1 , ny do k = 1 , nz do l = 1 , nq do m = 1 , nr do n = 1 , ns call s5 % evaluate ( x ( i ), y ( j ), z ( k ), q ( l ), r ( m ), idx , idy , idz , idq , idr , val , iflag ) sumval = sumval + val end do end do end do end do end do end do call cpu_time ( tend ) write ( * , * ) '' write ( * , * ) '5D' write ( * , * ) 'result         :' , sumval write ( * , * ) 'number of cases:' , n_cases write ( * , * ) 'cases/sec      :' , n_cases / ( tend - tstart ) cases_per_sec ( 5 ) = n_cases / ( tend - tstart ) sumval = 0.0_wp call cpu_time ( tstart ) do i = 1 , nx do j = 1 , ny do k = 1 , nz do l = 1 , nq do m = 1 , nr do n = 1 , ns call s6 % evaluate ( x ( i ), y ( j ), z ( k ), q ( l ), r ( m ), s ( n ), idx , idy , idz , idq , idr , ids , val , iflag ) sumval = sumval + val end do end do end do end do end do end do call cpu_time ( tend ) write ( * , * ) '' write ( * , * ) '6D' write ( * , * ) 'result         :' , sumval write ( * , * ) 'number of cases:' , n_cases write ( * , * ) 'cases/sec      :' , n_cases / ( tend - tstart ) cases_per_sec ( 6 ) = n_cases / ( tend - tstart ) !plot results in bar chart: call plt % initialize ( grid = . false ., xlabel = 'Dimension' , ylabel = 'Cases Per Second' ,& title = 'Speed Test (Object-Oriented Interface)' , legend = . false .,& font_size = 20 ,& axes_labelsize = 20 ,& xtick_labelsize = 20 ,& ytick_labelsize = 20 ) call plt % add_bar ( left = real ([ 1 , 2 , 3 , 4 , 5 , 6 ], wp ), height = cases_per_sec , label = 'Speed test runs' ,& yscale = 'log' , align = 'center' , color = 'r' , istat = istat ) call plt % savefig ( 'speed_test_oo.png' , istat = istat ) contains function f1 ( x ) result ( f ) !! 1d test function implicit none real ( wp ), intent ( in ) :: x real ( wp ) :: f f = x ** 1.1_wp + x ** 1.2_wp + x ** 1.3_wp + x ** 1.4_wp + x ** 1.5_wp + x ** 1.6_wp end function f1 function f2 ( x , y ) result ( f ) !! 2d test function implicit none real ( wp ), intent ( in ) :: x , y real ( wp ) :: f f = x ** 1.1_wp + y ** 1.2_wp + x ** 1.3_wp + y ** 1.4_wp + x ** 1.5_wp + y ** 1.6_wp end function f2 function f3 ( x , y , z ) result ( f ) !! 3d test function implicit none real ( wp ), intent ( in ) :: x , y , z real ( wp ) :: f f = x ** 1.1_wp + y ** 1.2_wp + z ** 1.3_wp + x ** 1.4_wp + y ** 1.5_wp + z ** 1.6_wp end function f3 function f4 ( x , y , z , q ) result ( f ) !! 4d test function implicit none real ( wp ), intent ( in ) :: x , y , z , q real ( wp ) :: f f = x ** 1.1_wp + y ** 1.2_wp + z ** 1.3_wp + q ** 1.4_wp + x ** 1.5_wp + y ** 1.6_wp end function f4 function f5 ( x , y , z , q , r ) result ( f ) !! 5d test function implicit none real ( wp ), intent ( in ) :: x , y , z , q , r real ( wp ) :: f f = x ** 1.1_wp + y ** 1.2_wp + z ** 1.3_wp + q ** 1.4_wp + r ** 1.5_wp + x ** 1.6_wp end function f5 function f6 ( x , y , z , q , r , s ) result ( f ) !! 6d test function implicit none real ( wp ), intent ( in ) :: x , y , z , q , r , s real ( wp ) :: f f = x ** 1.1_wp + y ** 1.2_wp + z ** 1.3_wp + q ** 1.4_wp + r ** 1.5_wp + s ** 1.6_wp end function f6 end program bspline_speed_test_oo","tags":"","loc":"program/bspline_speed_test_oo.html","title":"bspline_speed_test_oo â€“ bspline-fortran"},{"text":"Uses: bspline_module iso_fortran_env pyplot_module program~~bspline_extrap_test~~UsesGraph program~bspline_extrap_test bspline_extrap_test module~bspline_module bspline_module module~bspline_module->program~bspline_extrap_test pyplot_module pyplot_module pyplot_module->program~bspline_extrap_test iso_fortran_env iso_fortran_env iso_fortran_env->program~bspline_extrap_test module~bspline_sub_module bspline_sub_module iso_fortran_env->module~bspline_sub_module module~bspline_oo_module bspline_oo_module iso_fortran_env->module~bspline_oo_module module~bspline_sub_module->module~bspline_module module~bspline_sub_module->module~bspline_oo_module module~bspline_oo_module->module~bspline_module var panprogrambspline_extrap_testUsesGraph = svgPanZoom('#programbspline_extrap_testUsesGraph', {\n                    zoomEnabled: true,\n                    controlIconsEnabled: true,\n                    fit: true,\n                    center: true,}); Help Ã— Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a parent (sub)module to the submodule which is\n    descended from it. Dashed arrows point from a module being used to the\n    module or program unit using it. Extrapolation test Results Calls program~~bspline_extrap_test~~CallsGraph program~bspline_extrap_test bspline_extrap_test proc~f1~5 f1 program~bspline_extrap_test->proc~f1~5 get_status_message get_status_message program~bspline_extrap_test->get_status_message db1val db1val program~bspline_extrap_test->db1val db1ink db1ink program~bspline_extrap_test->db1ink Help Ã— Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Variables nx nxv kx iknot x xval fval tx fcn_1d val tru err errmax i j idx iflag inbvx iloy extrap plt istat rad2deg Functions f1 Source Code bspline_extrap_test Variables Type Attributes Name Initial integer, parameter :: nx = 400 number of points in x integer, parameter :: nxv = 800 number of points to evaluate interpolant integer, parameter :: kx = 4 order in x integer, parameter :: iknot = 0 automatically select the knots real(kind=wp) :: x (nx) real(kind=wp) :: xval (nxv) real(kind=wp) :: fval (nxv) real(kind=wp) :: tx (nx+kx) real(kind=wp) :: fcn_1d (nx) real(kind=wp) :: val real(kind=wp) :: tru real(kind=wp) :: err real(kind=wp) :: errmax integer :: i integer :: j integer :: idx integer :: iflag integer :: inbvx integer :: iloy logical :: extrap type(pyplot) :: plt integer :: istat pyplot-fortran status flag real(kind=wp), parameter :: rad2deg = 180.0_wp/acos(-1.0_wp) deg. to radians conversion factor Functions function f1 (x) 1d test function Arguments Type Intent Optional Attributes Name real(kind=wp) :: x Return Value real(kind=wp) Source Code program bspline_extrap_test use bspline_module use , intrinsic :: iso_fortran_env , only : wp => real64 use pyplot_module implicit none integer , parameter :: nx = 400 !! number of points in x integer , parameter :: nxv = 800 !! number of points to evaluate interpolant integer , parameter :: kx = 4 !! order in x integer , parameter :: iknot = 0 !! automatically select the knots real ( wp ) :: x ( nx ) real ( wp ) :: xval ( nxv ), fval ( nxv ) real ( wp ) :: tx ( nx + kx ) real ( wp ) :: fcn_1d ( nx ) real ( wp ) :: val , tru , err , errmax integer :: i , j , idx , iflag , inbvx , iloy logical :: extrap type ( pyplot ) :: plt integer :: istat !! pyplot-fortran status flag real ( wp ), parameter :: rad2deg = 18 0.0_wp / acos ( - 1.0_wp ) !! deg. to radians conversion factor idx = 0 do i = 1 , nx x ( i ) = real ( i - 1 , wp ) / 10 0.0_wp + 0.0001_wp fcn_1d ( i ) = f1 ( x ( i )) end do do i = 1 , nxv xval ( i ) = real ( i - 200 , wp ) / 10 0.0_wp end do !have to set these before the first evaluate call: inbvx = 1 iloy = 1 ! initialize call db1ink ( x , nx , fcn_1d , kx , iknot , tx , fcn_1d , iflag ) if ( iflag /= 0 ) then write ( * , * ) 'Error initializing 1D spline: ' // get_status_message ( iflag ) end if !initialize the plot: call plt % initialize ( grid = . true ., xlabel = 'x (deg)' , ylabel = 'f(x)' ,& title = 'Extrapolation Test' , legend = . true .) call plt % add_plot ( x * rad2deg , fcn_1d , label = 'Function $f(x) = \\sin(x)$' ,& linestyle = 'ko' , markersize = 5 , linewidth = 2 , istat = istat ) do j = 1 , 2 ! run once without extrapolation, and once with extrapolation extrap = j == 2 errmax = 0.0_wp do i = 1 , nxv call db1val ( xval ( i ), idx , tx , nx , kx , fcn_1d , val , iflag , inbvx , extrap = extrap ) fval ( i ) = val ! save it for plot tru = f1 ( xval ( i )) err = abs ( tru - val ) errmax = max ( err , errmax ) !write(*,*) xval(i), val, tru, err, iflag end do ! check max error against tolerance write ( * , * ) '' write ( * , * ) '1D: max error:' , errmax write ( * , * ) '' if ( extrap ) then call plt % add_plot ( xval * rad2deg , fval ,& label = 'Interpolated' ,& linestyle = 'g.-' , linewidth = 1 , istat = istat ) call plt % savefig ( 'bspline_extrap_test.png' , istat = istat ) end if end do contains real ( wp ) function f1 ( x ) !! 1d test function implicit none real ( wp ) :: x f1 = sin ( x ) end function f1 end program bspline_extrap_test","tags":"","loc":"program/bspline_extrap_test.html","title":"bspline_extrap_test â€“ bspline-fortran"}]}