var tipuesearch = {"pages":[{"loc":"index.html","text":"bspline-fortran Brief description The library provides subroutines for 2D-6D interpolation using b-splines. The code is written in modern Fortran. The core routines are: !f(x,y) subroutine db2ink ( x , nx , y , ny , fcn , kx , ky , tx , ty , bcoef , iflag ) function db2val ( xval , yval , idx , idy , tx , ty , nx , ny , kx , ky , bcoef ) !f(x,y,z) subroutine db3ink ( x , nx , y , ny , z , nz , fcn , kx , ky , kz , tx , ty , tz , bcoef , iflag ) function db3val ( xval , yval , zval , idx , idy , idz , tx , ty , tz , nx , ny , nz , kx , ky , kz , bcoef ) !f(x,y,z,q) subroutine db4ink ( x , nx , y , ny , z , nz , q , nq , fcn , kx , ky , kz , kq , tx , ty , tz , tq , bcoef , iflag ) function db4val ( xval , yval , zval , qval , idx , idy , idz , idq , tx , ty , tz , tq , nx , ny , nz , nq , kx , ky , kz , kq , bcoef ) !f(x,y,z,q,r) subroutine db5ink ( x , nx , y , ny , z , nz , q , nq , r , nr , fcn , kx , ky , kz , kq , kr , tx , ty , tz , tq , tr , bcoef , iflag ) function db5val ( xval , yval , zval , qval , rval , idx , idy , idz , idq , idr , tx , ty , tz , tq , tr , nx , ny , nz , nq , nr , kx , ky , kz , kq , kr , bcoef ) !f(x,y,z,q,r,s) subroutine db6ink ( x , nx , y , ny , z , nz , q , nq , r , nr , s , ns , fcn , kx , ky , kz , kq , kr , ks , tx , ty , tz , tq , tr , ts , bcoef , iflag ) function db6val ( xval , yval , zval , qval , rval , sval , idx , idy , idz , idq , idr , ids , tx , ty , tz , tq , tr , ts , nx , ny , nz , nq , nr , ns , kx , ky , kz , kq , kr , ks , bcoef ) The ink routines compute the interpolant coefficients, and the val routines evalute the interpolant at the specified value of each coordinate.  Eventually, object-oriented wrappers will be created for these routines for ease of use.  The 2D and 3D routines are extensively refactored versions of the original routines from the NIST Core Math Library .  The others are new, and are simply extensions of the same algorithm into higher dimensions. License The bspline-fortran source code and related files and documentation are distributed under a permissive free software license (BSD-style). See also This code includes the public domain DBSPLIN and DTENSBS code from the NIST Core Math Library (CMLIB) Developer Info Jacob Williams","tags":"home","title":" bspline-fortran "},{"loc":"lists/procedures.html","text":"Procedures Procedure Location Procedure Type Description db2ink bspline_module Subroutine Determines the parameters of a function that interpolates\n the two-dimensional gridded data\n  [x(i),y(j),\\mathrm{fcn}(i,j)] ~\\mathrm{for}~ i=1,..,n_x ~\\mathrm{and}~ j=1,..,n_y \n The interpolating function and its derivatives may\n subsequently be evaluated by the function db2val . db2val bspline_module Function Evaluates the tensor product piecewise polynomial\n interpolant constructed by the routine db2ink or one of its\n derivatives at the point (xval,yval). db3ink bspline_module Subroutine Determines the parameters of a function that interpolates\n the three-dimensional gridded data \n  [x(i),y(j),z(k),\\mathrm{fcn}(i,j,k)] ~\\mathrm{for}~ \n    i=1,..,n_x ~\\mathrm{and}~ j=1,..,n_y, ~\\mathrm{and}~ k=1,..,n_z \n The interpolating function and\n its derivatives may subsequently be evaluated by the function db3val . db3val bspline_module Function Evaluates the tensor product piecewise polynomial\n interpolant constructed by the routine db3ink or one of its\n derivatives at the point (xval,yval,zval). db4ink bspline_module Subroutine Determines the parameters of a function that interpolates\n the four-dimensional gridded data\n  [x(i),y(j),z(k),q(l),\\mathrm{fcn}(i,j,k,l)] ~\\mathrm{for}~ \n    i=1,..,n_x ~\\mathrm{and}~ j=1,..,n_y, ~\\mathrm{and}~ k=1,..,n_z, \n    ~\\mathrm{and}~ l=1,..,n_q \n The interpolating function and its derivatives may \n subsequently be evaluated by the function db4val . db4val bspline_module Function Evaluates the tensor product piecewise polynomial\n interpolant constructed by the routine db4ink or one of its\n derivatives at the point (xval,yval,zval,qval). db5ink bspline_module Subroutine Determines the parameters of a function that interpolates\n the five-dimensional gridded data (x(i),y(j),z(k),q(l),r(m),fcn(i,j,k,l,m)) for\n i=1,..,nx, j=1,..,ny, k=1,..,nz, l=1,..,nq, and m=1,..,nr. \n The interpolating function and its derivatives may subsequently be evaluated \n by the function db5val . db5val bspline_module Function Evaluates the tensor product piecewise polynomial\n interpolant constructed by the routine db5ink or one of its\n derivatives at the point (xval,yval,zval,qval,rval). db6ink bspline_module Subroutine Determines the parameters of a function that interpolates\n the six-dimensional gridded data (x(i),y(j),z(k),q(l),r(m),s(n),fcn(i,j,k,l,m,n)) for\n i=1,..,nx, j=1,..,ny, k=1,..,nz, l=1,..,nq, m=1,..,nr, n=1,..,ns. \n the interpolating function and its derivatives may subsequently be evaluated \n by the function db6val . db6val bspline_module Function Evaluates the tensor product piecewise polynomial\n interpolant constructed by the routine db6ink or one of its\n derivatives at the point (xval,yval,zval,qval,rval,sval).","tags":"list procedures","title":"\nAll Procedures – bspline-fortran\n"},{"loc":"lists/modules.html","text":"Modules Module Source File Description bspline_module bspline_module.f90 Multidimensional (2D-6D) B-Spline interpolation of data on a regular grid.","tags":"list modules","title":"\nAll Modules – bspline-fortran\n"},{"loc":"sourcefile/bspline_module.f90.html","text":"bspline_module.f90 Source File Source File bspline_module.f90 Modules bspline_module All Source Files bspline_module.f90 !# author: Jacob Williams !# license: BSD !# !# Description !#--------- !# Multidimensional (2D-6D) B-Spline interpolation of data on a regular grid. !# !# Notes !#--------- !# This module is based on the bspline and spline routines from [1]. !# The original Fortran 77 routines were converted to free-form source. !# Some of them are relatively unchanged from the originals, but some have !# been extensively refactored.  In addition, new routines for !# 4d, 5d, and 6d interpolation were also created. !# !# References !#--------- !# 1. DBSPLIN and DTENSBS from the !#    [NIST Core Math Library](http://www.nist.gov/itl/math/mcsd-software.cfm). !#    Original code is public domain. !# 2. Carl de Boor, \"A Practical Guide to Splines\", !#        Springer-Verlag, New York, 1978. !# 3. Carl de Boor, \"Efficient Computer Manipulation of Tensor !#        Products\", ACM Transactions on Mathematical Software, !#        Vol. 5 (1979), p. 173-182. !# 4. D.E. Amos, \"Computation with Splines and B-Splines\", !#        SAND78-1968, Sandia Laboratories, March, 1979. module bspline_module use , intrinsic :: iso_fortran_env , only : real64 implicit none private integer , parameter :: wp = real64 !! Real precision !main routines: public :: db2ink , db2val public :: db3ink , db3val public :: db4ink , db4val public :: db5ink , db5val public :: db6ink , db6val contains !***************************************************************************************** !***************************************************************************************** !# Determines the parameters of a function that interpolates !# the two-dimensional gridded data !#  [x(i),y(j),\\mathrm{fcn}(i,j)] ~\\mathrm{for}~ i=1,..,n_x ~\\mathrm{and}~ j=1,..,n_y  !# The interpolating function and its derivatives may !# subsequently be evaluated by the function **db2val**. !# !# The interpolating function is a piecewise polynomial function !# represented as a tensor product of one-dimensional b-splines. the !# form of this function is !# !#  s(x,y) = \\sum_{i=1}&#94;{n_x} \\sum_{j=1}&#94;{n_y} a_{ij} u_i(x) v_j(y)  !# !# where the functions u_i and v_j are one-dimensional b-spline !# basis functions. the coefficients  a_{ij}  are chosen so that !# !#  s(x(i),y(j)) = \\mathrm{fcn}(i,j) ~\\mathrm{for}~ i=1,..,n_x ~\\mathrm{and}~ j=1,..,n_y  !# !# Note that for each fixed value of y,  s(x,y)  is a piecewise !# polynomial function of x alone, and for each fixed value of x  s(x,y)  !# is a piecewise polynomial function of y alone. in one dimension !# a piecewise polynomial may be created by partitioning a given !# interval into subintervals and defining a distinct polynomial piece !# on each one. the points where adjacent subintervals meet are called !# knots. each of the functions u_i and v_j above is a piecewise !# polynomial. !# !# Users of db2ink choose the order (degree+1) of the polynomial !# pieces used to define the piecewise polynomial in each of the x and !# y directions (kx and ky). users also may define their own knot !# sequence in x and y separately (tx and ty). if iflag=0, however, !# db2ink will choose sequences of knots that result in a piecewise !# polynomial interpolant with kx-2 continuous partial derivatives in !# x and ky-2 continuous partial derivatives in y. (kx knots are taken !# near each endpoint in the x direction, not-a-knot end conditions !# are used, and the remaining knots are placed at data points if kx !# is even or at midpoints between data points if kx is odd. the y !# direction is treated similarly.) !# !# After a call to db2ink, all information necessary to define the !# interpolating function are contained in the parameters nx, ny, kx, !# ky, tx, ty, and bcoef. These quantities should not be altered until !# after the last call of the evaluation routine **db2val**. !# !# History !#--------- !# * Boisvert, Ronald, NBS : 25 may 1982 : Author of original routine. !# * JEC : 000330 modified array declarations. !# * Jacob Williams, 2/24/2015 : extensive refactoring of CMLIB routine. subroutine db2ink ( x , nx , y , ny , fcn , kx , ky , tx , ty , bcoef , iflag ) implicit none integer , intent ( in ) :: nx !! Number of x abcissae integer , intent ( in ) :: ny !! Number of y abcissae integer , intent ( in ) :: kx !! The order of spline pieces in x (>= 2, < nx). (order = polynomial degree + 1) integer , intent ( in ) :: ky !! The order of spline pieces in y (>= 2, < ny). (order = polynomial degree + 1) real ( wp ), dimension ( nx ), intent ( in ) :: x !! Array of x abcissae. Must be strictly increasing. real ( wp ), dimension ( ny ), intent ( in ) :: y !! Array of y abcissae. Must be strictly increasing. real ( wp ), dimension ( nx , ny ), intent ( in ) :: fcn !! Array of function values to interpolate. fcn(i,j) should !!    contain the function value at the point (x(i),y(j)) real ( wp ), dimension ( nx + kx ), intent ( inout ) :: tx !! The knots in the x direction for the spline interpolant. !!    If iflag=0 these are chosen by db2ink. !!    If iflag=1 these are specified by the user. !!    Must be non-decreasing. real ( wp ), dimension ( ny + ky ), intent ( inout ) :: ty !! The knots in the y direction for the spline interpolant. !!    If iflag=0 these are chosen by db2ink. !!    If iflag=1 these are specified by the user. !!    Must be non-decreasing. real ( wp ), dimension ( nx , ny ), intent ( out ) :: bcoef !! Array of coefficients of the b-spline interpolant. integer , intent ( inout ) :: iflag !! **on input:**  0 = knot sequence chosen by db2ink. !!                1 = knot sequence chosen by user. !! **on output:** 1 = successful execution. !!                2 = iflag out of range. !!                3 = nx out of range. !!                4 = kx out of range. !!                5 = x not strictly increasing. !!                6 = tx not non-decreasing. !!                7 = ny out of range. !!                8 = ky out of range. !!                9 = y not strictly increasing. !!               10 = ty not non-decreasing. real ( wp ), dimension ( nx * ny ) :: temp real ( wp ), dimension ( max ( 2 * kx * ( nx + 1 ), 2 * ky * ( ny + 1 ))) :: work logical :: status_ok !check validity of inputs call check_inputs ( 'db2ink' ,& iflag ,& nx = nx , ny = ny ,& kx = kx , ky = ky ,& x = x , y = y ,& tx = tx , ty = ty ,& status_ok = status_ok ) if ( status_ok ) then !choose knots if ( iflag == 0 ) then call dbknot ( x , nx , kx , tx ) call dbknot ( y , ny , ky , ty ) end if !construct b-spline coefficients call dbtpcf ( x , nx , fcn , nx , ny , tx , kx , temp , work ) call dbtpcf ( y , ny , temp , ny , nx , ty , ky , bcoef , work ) iflag = 1 end if end subroutine db2ink !***************************************************************************************** !***************************************************************************************** !# Evaluates the tensor product piecewise polynomial !# interpolant constructed by the routine **db2ink** or one of its !# derivatives at the point (xval,yval). !# !# To evaluate the interpolant !# itself, set idx=idy=0, to evaluate the first partial with respect !# to x, set idx=1,idy=0, and so on. !# !# db2val returns 0.0 if (xval,yval) is out of range. that is, if !#```fortran !#   xval < tx(1) .or. xval > tx(nx+kx) .or. !#   yval < ty(1) .or. yval > ty(ny+ky) !#``` !# if the knots tx and ty were chosen by db2ink, then this is equivalent to: !#```fortran !#   xval < x(1) .or. xval > x(nx)+epsx .or. !#   yval < y(1) .or. yval > y(ny)+epsy !#``` !# where !#```fortran !#   epsx = 0.1*(x(nx)-x(nx-1)) !#   epsy = 0.1*(y(ny)-y(ny-1)) !#``` !# !# The input quantities tx, ty, nx, ny, kx, ky, and bcoef should be !# unchanged since the last call of db2ink. !# !# History !#--------- !# * Boisvert, Ronald, NBS : 25 may 1982 : Author of original routine. !# * JEC : 000330 modified array declarations. !# * Jacob Williams, 2/24/2015 : extensive refactoring of CMLIB routine. real ( wp ) function db2val ( xval , yval , idx , idy , tx , ty , nx , ny , kx , ky , bcoef ) implicit none integer , intent ( in ) :: idx !! x derivative of piecewise polynomial to evaluate. integer , intent ( in ) :: idy !! y derivative of piecewise polynomial to evaluate. integer , intent ( in ) :: nx !! the number of interpolation points in x. (same as in last call to db2ink) integer , intent ( in ) :: ny !! the number of interpolation points in y. (same as in last call to db2ink) integer , intent ( in ) :: kx !! order of polynomial pieces in x. (same as in last call to db2ink) integer , intent ( in ) :: ky !! order of polynomial pieces in y. (same as in last call to db2ink) real ( wp ), intent ( in ) :: xval !! x coordinate of evaluation point. real ( wp ), intent ( in ) :: yval !! y coordinate of evaluation point. real ( wp ), dimension ( nx + kx ), intent ( in ) :: tx !! sequence of knots defining the piecewise polynomial in the x direction. (same as in last call to db2ink) real ( wp ), dimension ( ny + ky ), intent ( in ) :: ty !! sequence of knots defining the piecewise polynomial in the y direction. (same as in last call to db2ink) real ( wp ), dimension ( nx , ny ), intent ( in ) :: bcoef !! the b-spline coefficients computed by db2ink. integer :: inbv , k , lefty , mflag , kcol real ( wp ), dimension ( ky ) :: temp real ( wp ), dimension ( 3 * max ( kx , ky )) :: work integer , save :: iloy = 1 integer , save :: inbvx = 1 db2val = 0.0_wp if ( xval < tx ( 1 ) . or . xval > tx ( nx + kx )) return if ( yval < ty ( 1 ) . or . yval > ty ( ny + ky )) return call dintrv ( ty , ny + ky , yval , iloy , lefty , mflag ); if ( mflag /= 0 ) return inbv = 1 kcol = lefty - ky do k = 1 , ky kcol = kcol + 1 temp ( k ) = dbvalu ( tx , bcoef (:, kcol ), nx , kx , idx , xval , inbvx , work ) end do kcol = lefty - ky + 1 db2val = dbvalu ( ty ( kcol :), temp , ky , ky , idy , yval , inbv , work ) end function db2val !***************************************************************************************** !***************************************************************************************** !# Determines the parameters of a function that interpolates !# the three-dimensional gridded data !#  [x(i),y(j),z(k),\\mathrm{fcn}(i,j,k)] ~\\mathrm{for}~ !#    i=1,..,n_x ~\\mathrm{and}~ j=1,..,n_y, ~\\mathrm{and}~ k=1,..,n_z  !# The interpolating function and !# its derivatives may subsequently be evaluated by the function !# **db3val**. !# !# The interpolating function is a piecewise polynomial function !# represented as a tensor product of one-dimensional b-splines. the !# form of this function is !#  s(x,y,z) = \\sum_{i=1}&#94;{n_x} \\sum_{j=1}&#94;{n_y} \\sum_{k=1}&#94;{n_z} !#               a_{ijk} u_i(x) v_j(y) w_k(z)  !# !# where the functions u_i, v_j, and w_k are one-dimensional b- !# spline basis functions. the coefficients a_{ijk} are chosen so that: !# !#  s(x(i),y(j),z(k)) = \\mathrm{fcn}(i,j,k) !#    ~\\mathrm{for}~ i=1,..,n_x , j=1,..,n_y , k=1,..,n_z  !# !# Note that for fixed values of y and z s(x,y,z) is a piecewise !# polynomial function of x alone, for fixed values of x and z s(x,y,z) !# is a piecewise polynomial function of y alone, and for fixed !# values of x and y s(x,y,z) is a function of z alone. in one !# dimension a piecewise polynomial may be created by partitioning a !# given interval into subintervals and defining a distinct polynomial !# piece on each one. the points where adjacent subintervals meet are !# called knots. each of the functions u_i, v_j, and w_k above is a !# piecewise polynomial. !# !# Users of db3ink choose the order (degree+1) of the polynomial !# pieces used to define the piecewise polynomial in each of the x, y, !# and z directions (kx, ky, and kz). users also may define their own !# knot sequence in x, y, and z separately (tx, ty, and tz). if iflag= !# 0, however, db3ink will choose sequences of knots that result in a !# piecewise polynomial interpolant with kx-2 continuous partial !# derivatives in x, ky-2 continuous partial derivatives in y, and kz- !# 2 continuous partial derivatives in z. (kx knots are taken near !# each endpoint in x, not-a-knot end conditions are used, and the !# remaining knots are placed at data points if kx is even or at !# midpoints between data points if kx is odd. the y and z directions !# are treated similarly.) !# !# After a call to db3ink, all information necessary to define the !# interpolating function are contained in the parameters nx, ny, nz, !# kx, ky, kz, tx, ty, tz, and bcoef. these quantities should not be !# altered until after the last call of the evaluation routine db3val. !# !# History !#--------- !# * Boisvert, Ronald, NBS : 25 may 1982 : Author of original routine. !# * JEC : 000330 modified array declarations. !# * Jacob Williams, 2/24/2015 : extensive refactoring of CMLIB routine. subroutine db3ink ( x , nx , y , ny , z , nz , fcn , kx , ky , kz , tx , ty , tz , bcoef , iflag ) implicit none integer , intent ( in ) :: nx !! number of x abcissae (>= 3) integer , intent ( in ) :: ny !! number of y abcissae (>= 3) integer , intent ( in ) :: nz !! number of z abcissae (>= 3) integer , intent ( in ) :: kx !! the order of spline pieces in x (>= 2, < nx). (order = polynomial degree + 1) integer , intent ( in ) :: ky !! the order of spline pieces in y (>= 2, < ny). (order = polynomial degree + 1) integer , intent ( in ) :: kz !! the order of spline pieces in z (>= 2, < nz). (order = polynomial degree + 1) real ( wp ), dimension ( nx ), intent ( in ) :: x !! array of x abcissae. must be strictly increasing. real ( wp ), dimension ( ny ), intent ( in ) :: y !! array of y abcissae. must be strictly increasing. real ( wp ), dimension ( nz ), intent ( in ) :: z !! array of z abcissae. must be strictly increasing. real ( wp ), dimension ( nx , ny , nz ), intent ( in ) :: fcn !! array of function values to interpolate. fcn(i,j,k) should !!   contain the function value at the point (x(i),y(j),z(k)) real ( wp ), dimension ( nx + kx ), intent ( inout ) :: tx !! The knots in the x direction for the spline interpolant. !!   If iflag=0 these are chosen by db3ink. !!   If iflag=1 these are specified by the user. !!    Must be non-decreasing. real ( wp ), dimension ( ny + ky ), intent ( inout ) :: ty !! The knots in the y direction for the spline interpolant. !!    If iflag=0 these are chosen by db3ink. !!    If iflag=1 these are specified by the user. !!    Must be non-decreasing. real ( wp ), dimension ( nz + kz ), intent ( inout ) :: tz !! The knots in the z direction for the spline interpolant. !!    If iflag=0 these are chosen by db3ink. !!    If iflag=1 these are specified by the user. !!    Must be non-decreasing. real ( wp ), dimension ( nx , ny , nz ), intent ( out ) :: bcoef !! array of coefficients of the b-spline interpolant. integer , intent ( inout ) :: iflag !! **on input**    0 = knot sequence chosen by db3ink. !!                 1 = knot sequence chosen by user. !! **on output**   1 = successful execution. !!                 2 = iflag out of range. !!                 3 = nx out of range. !!                 4 = kx out of range. !!                 5 = x not strictly increasing.","tags":"","title":"bspline_module.f90 – bspline-fortran"},{"loc":"proc/db2val.html","text":"db2val Function Source File bspline_module.f90 bspline_module db2val Variables inbv k lefty mflag kcol temp work iloy inbvx All Procedures db2ink db2val db3ink db3val db4ink db4val db5ink db5val db6ink db6val public  function db2val(xval, yval, idx, idy, tx, ty, nx, ny, kx, ky, bcoef) Arguments Type Intent Optional Attributes Name real(kind=wp), intent(in) :: xval x coordinate of evaluation point. real(kind=wp), intent(in) :: yval y coordinate of evaluation point. integer, intent(in) :: idx x derivative of piecewise polynomial to evaluate. integer, intent(in) :: idy y derivative of piecewise polynomial to evaluate. real(kind=wp), intent(in), dimension(nx+kx) :: tx sequence of knots defining the piecewise polynomial in the x direction. (same as in last call to db2ink) real(kind=wp), intent(in), dimension(ny+ky) :: ty sequence of knots defining the piecewise polynomial in the y direction. (same as in last call to db2ink) integer, intent(in) :: nx the number of interpolation points in x. (same as in last call to db2ink) integer, intent(in) :: ny the number of interpolation points in y. (same as in last call to db2ink) integer, intent(in) :: kx order of polynomial pieces in x. (same as in last call to db2ink) integer, intent(in) :: ky order of polynomial pieces in y. (same as in last call to db2ink) real(kind=wp), intent(in), dimension(nx,ny) :: bcoef the b-spline coefficients computed by db2ink. Return Value real(kind=wp) Description Evaluates the tensor product piecewise polynomial\n interpolant constructed by the routine db2ink or one of its\n derivatives at the point (xval,yval). To evaluate the interpolant\n itself, set idx=idy=0, to evaluate the first partial with respect\n to x, set idx=1,idy=0, and so on. db2val returns 0.0 if (xval,yval) is out of range. that is, if xval < tx ( 1 ) . or . xval > tx ( nx + kx ) . or . yval < ty ( 1 ) . or . yval > ty ( ny + ky ) if the knots tx and ty were chosen by db2ink, then this is equivalent to: xval < x ( 1 ) . or . xval > x ( nx ) + epsx . or . yval < y ( 1 ) . or . yval > y ( ny ) + epsy where epsx = 0.1 * ( x ( nx ) - x ( nx - 1 )) epsy = 0.1 * ( y ( ny ) - y ( ny - 1 )) The input quantities tx, ty, nx, ny, kx, ky, and bcoef should be\n unchanged since the last call of db2ink. History Boisvert, Ronald, NBS : 25 may 1982 : Author of original routine. JEC : 000330 modified array declarations. Jacob Williams, 2/24/2015 : extensive refactoring of CMLIB routine. Variables Type Visibility Attributes Name Initial integer, public :: inbv integer, public :: k integer, public :: lefty integer, public :: mflag integer, public :: kcol real(kind=wp), public, dimension(ky) :: temp real(kind=wp), public, dimension(3*max(kx,ky)) :: work integer, public, save :: iloy = 1 integer, public, save :: inbvx = 1 © 2015 bspline-fortran was written by Jacob Williams. Documentation generated by FORD .","tags":"","title":"db2val – bspline-fortran"},{"loc":"proc/db3val.html","text":"db3val Function Source File bspline_module.f90 bspline_module db3val Variables temp1 temp2 work inbv1 inbv2 lefty leftz mflag kcoly kcolz izm1 j k iloy iloz inbvx All Procedures db2ink db2val db3ink db3val db4ink db4val db5ink db5val db6ink db6val public  function db3val(xval, yval, zval, idx, idy, idz, tx, ty, tz, nx, ny, nz, kx, ky, kz, bcoef) Arguments Type Intent Optional Attributes Name real(kind=wp), intent(in) :: xval x coordinate of evaluation point. real(kind=wp), intent(in) :: yval y coordinate of evaluation point. real(kind=wp), intent(in) :: zval z coordinate of evaluation point. integer, intent(in) :: idx x derivative of piecewise polynomial to evaluate. integer, intent(in) :: idy y derivative of piecewise polynomial to evaluate. integer, intent(in) :: idz z derivative of piecewise polynomial to evaluate. real(kind=wp), intent(in), dimension(nx+kx) :: tx sequence of knots defining the piecewise polynomial in the x direction. (same as in last call to db3ink) real(kind=wp), intent(in), dimension(ny+ky) :: ty sequence of knots defining the piecewise polynomial in the y direction. (same as in last call to db3ink) real(kind=wp), intent(in), dimension(nz+kz) :: tz sequence of knots defining the piecewise polynomial in the z direction. (same as in last call to db3ink) integer, intent(in) :: nx the number of interpolation points in x. (same as in last call to db3ink) integer, intent(in) :: ny the number of interpolation points in y. (same as in last call to db3ink) integer, intent(in) :: nz the number of interpolation points in z. (same as in last call to db3ink) integer, intent(in) :: kx order of polynomial pieces in x. (same as in last call to db3ink) integer, intent(in) :: ky order of polynomial pieces in y. (same as in last call to db3ink) integer, intent(in) :: kz order of polynomial pieces in z. (same as in last call to db3ink) real(kind=wp), intent(in), dimension(nx,ny,nz) :: bcoef the b-spline coefficients computed by db3ink. Return Value real(kind=wp) Description Evaluates the tensor product piecewise polynomial\n interpolant constructed by the routine db3ink or one of its\n derivatives at the point (xval,yval,zval). To evaluate the\n interpolant itself, set idx=idy=idz=0, to evaluate the first\n partial with respect to x, set idx=1,idy=idz=0, and so on. db3val returns 0.0 if (xval,yval,zval) is out of range. that is, xval < tx ( 1 ) . or . xval > tx ( nx + kx ) . or . yval < ty ( 1 ) . or . yval > ty ( ny + ky ) . or . zval < tz ( 1 ) . or . zval > tz ( nz + kz ) if the knots tx, ty, and tz were chosen by db3ink, then this is\n equivalent to xval < x ( 1 ) . or . xval > x ( nx ) + epsx . or . yval < y ( 1 ) . or . yval > y ( ny ) + epsy . or . zval < z ( 1 ) . or . zval > z ( nz ) + epsz where epsx = 0.1 * ( x ( nx ) - x ( nx - 1 )) epsy = 0.1 * ( y ( ny ) - y ( ny - 1 )) epsz = 0.1 * ( z ( nz ) - z ( nz - 1 )) The input quantities tx, ty, tz, nx, ny, nz, kx, ky, kz, and bcoef\n should remain unchanged since the last call of db3ink. History Boisvert, Ronald, NBS : 25 may 1982 : Author of original routine. JEC : 000330 modified array declarations. Jacob Williams, 2/24/2015 : extensive refactoring of CMLIB routine. Variables Type Visibility Attributes Name Initial real(kind=wp), public, dimension(ky,kz) :: temp1 real(kind=wp), public, dimension(kz) :: temp2 real(kind=wp), public, dimension(3*max(kx,ky,kz)) :: work integer, public :: inbv1 integer, public :: inbv2 integer, public :: lefty integer, public :: leftz integer, public :: mflag integer, public :: kcoly integer, public :: kcolz integer, public :: izm1 integer, public :: j integer, public :: k integer, public, save :: iloy = 1 integer, public, save :: iloz = 1 integer, public, save :: inbvx = 1 © 2015 bspline-fortran was written by Jacob Williams. Documentation generated by FORD .","tags":"","title":"db3val – bspline-fortran"},{"loc":"proc/db4val.html","text":"db4val Function Source File bspline_module.f90 bspline_module db4val Variables temp1 temp2 temp3 work inbv1 inbv2 inbv3 lefty leftz leftq mflag kcoly kcolz kcolq i j k q iloy iloz iloq inbvx All Procedures db2ink db2val db3ink db3val db4ink db4val db5ink db5val db6ink db6val public  function db4val(xval, yval, zval, qval, idx, idy, idz, idq, tx, ty, tz, tq, nx, ny, nz, nq, kx, ky, kz, kq, bcoef) Arguments Type Intent Optional Attributes Name real(kind=wp), intent(in) :: xval x coordinate of evaluation point. real(kind=wp), intent(in) :: yval y coordinate of evaluation point. real(kind=wp), intent(in) :: zval z coordinate of evaluation point. real(kind=wp), intent(in) :: qval q coordinate of evaluation point. integer, intent(in) :: idx x derivative of piecewise polynomial to evaluate. integer, intent(in) :: idy y derivative of piecewise polynomial to evaluate. integer, intent(in) :: idz z derivative of piecewise polynomial to evaluate. integer, intent(in) :: idq q derivative of piecewise polynomial to evaluate. real(kind=wp), intent(in), dimension(nx+kx) :: tx sequence of knots defining the piecewise polynomial in the x direction. (same as in last call to db4ink) real(kind=wp), intent(in), dimension(ny+ky) :: ty sequence of knots defining the piecewise polynomial in the y direction. (same as in last call to db4ink) real(kind=wp), intent(in), dimension(nz+kz) :: tz sequence of knots defining the piecewise polynomial in the z direction. (same as in last call to db4ink) real(kind=wp), intent(in), dimension(nq+kq) :: tq sequence of knots defining the piecewise polynomial in the q direction. (same as in last call to db4ink) integer, intent(in) :: nx the number of interpolation points in x. (same as in last call to db4ink) integer, intent(in) :: ny the number of interpolation points in y. (same as in last call to db4ink) integer, intent(in) :: nz the number of interpolation points in z. (same as in last call to db4ink) integer, intent(in) :: nq the number of interpolation points in q. (same as in last call to db4ink) integer, intent(in) :: kx order of polynomial pieces in x. (same as in last call to db4ink) integer, intent(in) :: ky order of polynomial pieces in y. (same as in last call to db4ink) integer, intent(in) :: kz order of polynomial pieces in z. (same as in last call to db4ink) integer, intent(in) :: kq order of polynomial pieces in q. (same as in last call to db4ink) real(kind=wp), intent(in), dimension(nx,ny,nz,nq) :: bcoef the b-spline coefficients computed by db4ink. Return Value real(kind=wp) Description Evaluates the tensor product piecewise polynomial\n interpolant constructed by the routine db4ink or one of its\n derivatives at the point (xval,yval,zval,qval). To evaluate the\n interpolant itself, set idx=idy=idz=idq=0, to evaluate the first\n partial with respect to x, set idx=1,idy=idz=idq=0, and so on. See db3val header for more information. History Jacob Williams, 2/24/2015 : Created this routine. Variables Type Visibility Attributes Name Initial real(kind=wp), public, dimension(ky,kz,kq) :: temp1 real(kind=wp), public, dimension(kz,kq) :: temp2 real(kind=wp), public, dimension(kq) :: temp3 real(kind=wp), public, dimension(3*max(kx,ky,kz,kq)) :: work integer, public :: inbv1 integer, public :: inbv2 integer, public :: inbv3 integer, public :: lefty integer, public :: leftz integer, public :: leftq integer, public :: mflag integer, public :: kcoly integer, public :: kcolz integer, public :: kcolq integer, public :: i integer, public :: j integer, public :: k integer, public :: q integer, public, save :: iloy = 1 integer, public, save :: iloz = 1 integer, public, save :: iloq = 1 integer, public, save :: inbvx = 1 © 2015 bspline-fortran was written by Jacob Williams. Documentation generated by FORD .","tags":"","title":"db4val – bspline-fortran"},{"loc":"proc/db5val.html","text":"db5val Function Source File bspline_module.f90 bspline_module db5val Variables temp1 temp2 temp3 temp4 work inbv1 inbv2 inbv3 inbv4 lefty leftz leftq leftr mflag kcoly kcolz kcolq kcolr i j k q r iloy iloz iloq ilor inbvx All Procedures db2ink db2val db3ink db3val db4ink db4val db5ink db5val db6ink db6val public  function db5val(xval, yval, zval, qval, rval, idx, idy, idz, idq, idr, tx, ty, tz, tq, tr, nx, ny, nz, nq, nr, kx, ky, kz, kq, kr, bcoef) Arguments Type Intent Optional Attributes Name real(kind=wp), intent(in) :: xval x coordinate of evaluation point. real(kind=wp), intent(in) :: yval y coordinate of evaluation point. real(kind=wp), intent(in) :: zval z coordinate of evaluation point. real(kind=wp), intent(in) :: qval q coordinate of evaluation point. real(kind=wp), intent(in) :: rval r coordinate of evaluation point. integer, intent(in) :: idx x derivative of piecewise polynomial to evaluate. integer, intent(in) :: idy y derivative of piecewise polynomial to evaluate. integer, intent(in) :: idz z derivative of piecewise polynomial to evaluate. integer, intent(in) :: idq q derivative of piecewise polynomial to evaluate. integer, intent(in) :: idr r derivative of piecewise polynomial to evaluate. real(kind=wp), intent(in), dimension(nx+kx) :: tx sequence of knots defining the piecewise polynomial in the x direction. (same as in last call to db5ink) real(kind=wp), intent(in), dimension(ny+ky) :: ty sequence of knots defining the piecewise polynomial in the y direction. (same as in last call to db5ink) real(kind=wp), intent(in), dimension(nz+kz) :: tz sequence of knots defining the piecewise polynomial in the z direction. (same as in last call to db5ink) real(kind=wp), intent(in), dimension(nq+kq) :: tq sequence of knots defining the piecewise polynomial in the q direction. (same as in last call to db5ink) real(kind=wp), intent(in), dimension(nr+kr) :: tr sequence of knots defining the piecewise polynomial in the r direction. (same as in last call to db5ink) integer, intent(in) :: nx the number of interpolation points in x. (same as in last call to db5ink) integer, intent(in) :: ny the number of interpolation points in y. (same as in last call to db5ink) integer, intent(in) :: nz the number of interpolation points in z. (same as in last call to db5ink) integer, intent(in) :: nq the number of interpolation points in q. (same as in last call to db5ink) integer, intent(in) :: nr the number of interpolation points in r. (same as in last call to db5ink) integer, intent(in) :: kx order of polynomial pieces in x. (same as in last call to db5ink) integer, intent(in) :: ky order of polynomial pieces in y. (same as in last call to db5ink) integer, intent(in) :: kz order of polynomial pieces in z. (same as in last call to db5ink) integer, intent(in) :: kq order of polynomial pieces in q. (same as in last call to db5ink) integer, intent(in) :: kr order of polynomial pieces in r. (same as in last call to db5ink) real(kind=wp), intent(in), dimension(nx,ny,nz,nq,nr) :: bcoef the b-spline coefficients computed by db5ink. Return Value real(kind=wp) Description Evaluates the tensor product piecewise polynomial\n interpolant constructed by the routine db5ink or one of its\n derivatives at the point (xval,yval,zval,qval,rval). To evaluate the\n interpolant itself, set idx=idy=idz=idq=idr=0, to evaluate the first\n partial with respect to x, set idx=1,idy=idz=idq=idr=0, and so on.\n \n See db3val header for more information. History Jacob Williams, 2/24/2015 : Created this routine. Variables Type Visibility Attributes Name Initial real(kind=wp), public, dimension(ky,kz,kq,kr) :: temp1 real(kind=wp), public, dimension(kz,kq,kr) :: temp2 real(kind=wp), public, dimension(kq,kr) :: temp3 real(kind=wp), public, dimension(kr) :: temp4 real(kind=wp), public, dimension(3*max(kx,ky,kz,kq,kr)) :: work integer, public :: inbv1 integer, public :: inbv2 integer, public :: inbv3 integer, public :: inbv4 integer, public :: lefty integer, public :: leftz integer, public :: leftq integer, public :: leftr integer, public :: mflag integer, public :: kcoly integer, public :: kcolz integer, public :: kcolq integer, public :: kcolr integer, public :: i integer, public :: j integer, public :: k integer, public :: q integer, public :: r integer, public, save :: iloy = 1 integer, public, save :: iloz = 1 integer, public, save :: iloq = 1 integer, public, save :: ilor = 1 integer, public, save :: inbvx = 1 © 2015 bspline-fortran was written by Jacob Williams. Documentation generated by FORD .","tags":"","title":"db5val – bspline-fortran"},{"loc":"proc/db6val.html","text":"db6val Function Source File bspline_module.f90 bspline_module db6val Variables temp1 temp2 temp3 temp4 temp5 work inbv1 inbv2 inbv3 inbv4 inbv5 lefty leftz leftq leftr lefts mflag kcoly kcolz kcolq kcolr kcols i j k q r s iloy iloz iloq ilor ilos inbvx All Procedures db2ink db2val db3ink db3val db4ink db4val db5ink db5val db6ink db6val public  function db6val(xval, yval, zval, qval, rval, sval, idx, idy, idz, idq, idr, ids, tx, ty, tz, tq, tr, ts, nx, ny, nz, nq, nr, ns, kx, ky, kz, kq, kr, ks, bcoef) Arguments Type Intent Optional Attributes Name real(kind=wp), intent(in) :: xval x coordinate of evaluation point. real(kind=wp), intent(in) :: yval y coordinate of evaluation point. real(kind=wp), intent(in) :: zval z coordinate of evaluation point. real(kind=wp), intent(in) :: qval q coordinate of evaluation point. real(kind=wp), intent(in) :: rval r coordinate of evaluation point. real(kind=wp), intent(in) :: sval s coordinate of evaluation point. integer, intent(in) :: idx x derivative of piecewise polynomial to evaluate. integer, intent(in) :: idy y derivative of piecewise polynomial to evaluate. integer, intent(in) :: idz z derivative of piecewise polynomial to evaluate. integer, intent(in) :: idq q derivative of piecewise polynomial to evaluate. integer, intent(in) :: idr r derivative of piecewise polynomial to evaluate. integer, intent(in) :: ids s derivative of piecewise polynomial to evaluate. real(kind=wp), intent(in), dimension(nx+kx) :: tx sequence of knots defining the piecewise polynomial in the x direction. (same as in last call to db6ink) real(kind=wp), intent(in), dimension(ny+ky) :: ty sequence of knots defining the piecewise polynomial in the y direction. (same as in last call to db6ink) real(kind=wp), intent(in), dimension(nz+kz) :: tz sequence of knots defining the piecewise polynomial in the z direction. (same as in last call to db6ink) real(kind=wp), intent(in), dimension(nq+kq) :: tq sequence of knots defining the piecewise polynomial in the q direction. (same as in last call to db6ink) real(kind=wp), intent(in), dimension(nr+kr) :: tr sequence of knots defining the piecewise polynomial in the r direction. (same as in last call to db6ink) real(kind=wp), intent(in), dimension(ns+ks) :: ts sequence of knots defining the piecewise polynomial in the s direction. (same as in last call to db6ink) integer, intent(in) :: nx the number of interpolation points in x. (same as in last call to db6ink) integer, intent(in) :: ny the number of interpolation points in y. (same as in last call to db6ink) integer, intent(in) :: nz the number of interpolation points in z. (same as in last call to db6ink) integer, intent(in) :: nq the number of interpolation points in q. (same as in last call to db6ink) integer, intent(in) :: nr the number of interpolation points in r. (same as in last call to db6ink) integer, intent(in) :: ns the number of interpolation points in s. (same as in last call to db6ink) integer, intent(in) :: kx order of polynomial pieces in x. (same as in last call to db6ink) integer, intent(in) :: ky order of polynomial pieces in y. (same as in last call to db6ink) integer, intent(in) :: kz order of polynomial pieces in z. (same as in last call to db6ink) integer, intent(in) :: kq order of polynomial pieces in q. (same as in last call to db6ink) integer, intent(in) :: kr order of polynomial pieces in r. (same as in last call to db6ink) integer, intent(in) :: ks order of polynomial pieces in s. (same as in last call to db6ink) real(kind=wp), intent(in), dimension(nx,ny,nz,nq,nr,ns) :: bcoef the b-spline coefficients computed by db6ink. Return Value real(kind=wp) Description Evaluates the tensor product piecewise polynomial\n interpolant constructed by the routine db6ink or one of its\n derivatives at the point (xval,yval,zval,qval,rval,sval). To evaluate the\n interpolant itself, set idx=idy=idz=idq=idr=ids=0, to evaluate the first\n partial with respect to x, set idx=1,idy=idz=idq=idr=ids=0, and so on. See db3val header for more information. History Jacob Williams, 2/24/2015 : Created this routine. Variables Type Visibility Attributes Name Initial real(kind=wp), public, dimension(ky,kz,kq,kr,ks) :: temp1 real(kind=wp), public, dimension(kz,kq,kr,ks) :: temp2 real(kind=wp), public, dimension(kq,kr,ks) :: temp3 real(kind=wp), public, dimension(kr,ks) :: temp4 real(kind=wp), public, dimension(ks) :: temp5 real(kind=wp), public, dimension(3*max(kx,ky,kz,kq,kr,ks)) :: work integer, public :: inbv1 integer, public :: inbv2 integer, public :: inbv3 integer, public :: inbv4 integer, public :: inbv5 integer, public :: lefty integer, public :: leftz integer, public :: leftq integer, public :: leftr integer, public :: lefts integer, public :: mflag integer, public :: kcoly integer, public :: kcolz integer, public :: kcolq integer, public :: kcolr integer, public :: kcols integer, public :: i integer, public :: j integer, public :: k integer, public :: q integer, public :: r integer, public :: s integer, public, save :: iloy = 1 integer, public, save :: iloz = 1 integer, public, save :: iloq = 1 integer, public, save :: ilor = 1 integer, public, save :: ilos = 1 integer, public, save :: inbvx = 1 © 2015 bspline-fortran was written by Jacob Williams. Documentation generated by FORD .","tags":"","title":"db6val – bspline-fortran"},{"loc":"proc/db2ink.html","text":"db2ink Subroutine Source File bspline_module.f90 bspline_module db2ink Variables temp work status_ok All Procedures db2ink db2val db3ink db3val db4ink db4val db5ink db5val db6ink db6val public  subroutine db2ink(x, nx, y, ny, fcn, kx, ky, tx, ty, bcoef, iflag) Arguments Type Intent Optional Attributes Name real(kind=wp), intent(in), dimension(nx) :: x Array of x abcissae. Must be strictly increasing. integer, intent(in) :: nx Number of x abcissae real(kind=wp), intent(in), dimension(ny) :: y Array of y abcissae. Must be strictly increasing. integer, intent(in) :: ny Number of y abcissae real(kind=wp), intent(in), dimension(nx,ny) :: fcn Array of function values to interpolate. fcn(i,j) should\n    contain the function value at the point (x(i),y(j)) integer, intent(in) :: kx The order of spline pieces in x (>= 2, < nx). (order = polynomial degree + 1) integer, intent(in) :: ky The order of spline pieces in y (>= 2, < ny). (order = polynomial degree + 1) real(kind=wp), intent(inout), dimension(nx+kx) :: tx The knots in the x direction for the spline interpolant.\n    If iflag=0 these are chosen by db2ink.\n    If iflag=1 these are specified by the user.\n    Must be non-decreasing. real(kind=wp), intent(inout), dimension(ny+ky) :: ty The knots in the y direction for the spline interpolant.\n    If iflag=0 these are chosen by db2ink.\n    If iflag=1 these are specified by the user.\n    Must be non-decreasing. real(kind=wp), intent(out), dimension(nx,ny) :: bcoef Array of coefficients of the b-spline interpolant. integer, intent(inout) :: iflag on input: 0 = knot sequence chosen by db2ink.\n                1 = knot sequence chosen by user. on output: 1 = successful execution.\n                2 = iflag out of range.\n                3 = nx out of range.\n                4 = kx out of range.\n                5 = x not strictly increasing.\n                6 = tx not non-decreasing.\n                7 = ny out of range.\n                8 = ky out of range.\n                9 = y not strictly increasing.\n               10 = ty not non-decreasing. Description Determines the parameters of a function that interpolates\n the two-dimensional gridded data\n  [x(i),y(j),\\mathrm{fcn}(i,j)] ~\\mathrm{for}~ i=1,..,n_x ~\\mathrm{and}~ j=1,..,n_y \n The interpolating function and its derivatives may\n subsequently be evaluated by the function db2val . The interpolating function is a piecewise polynomial function\n represented as a tensor product of one-dimensional b-splines. the\n form of this function is  s(x,y) = \\sum_{i=1}&#94;{n_x} \\sum_{j=1}&#94;{n_y} a_{ij} u_i(x) v_j(y)  where the functions u_i and v_j are one-dimensional b-spline\n basis functions. the coefficients  a_{ij}  are chosen so that  s(x(i),y(j)) = \\mathrm{fcn}(i,j) ~\\mathrm{for}~ i=1,..,n_x ~\\mathrm{and}~ j=1,..,n_y  Note that for each fixed value of y,  s(x,y)  is a piecewise\n polynomial function of x alone, and for each fixed value of x  s(x,y) \n is a piecewise polynomial function of y alone. in one dimension\n a piecewise polynomial may be created by partitioning a given\n interval into subintervals and defining a distinct polynomial piece\n on each one. the points where adjacent subintervals meet are called\n knots. each of the functions u_i and v_j above is a piecewise\n polynomial. Users of db2ink choose the order (degree+1) of the polynomial\n pieces used to define the piecewise polynomial in each of the x and\n y directions (kx and ky). users also may define their own knot\n sequence in x and y separately (tx and ty). if iflag=0, however,\n db2ink will choose sequences of knots that result in a piecewise\n polynomial interpolant with kx-2 continuous partial derivatives in\n x and ky-2 continuous partial derivatives in y. (kx knots are taken\n near each endpoint in the x direction, not-a-knot end conditions\n are used, and the remaining knots are placed at data points if kx\n is even or at midpoints between data points if kx is odd. the y\n direction is treated similarly.) After a call to db2ink, all information necessary to define the\n interpolating function are contained in the parameters nx, ny, kx,\n ky, tx, ty, and bcoef. These quantities should not be altered until\n after the last call of the evaluation routine db2val . History Boisvert, Ronald, NBS : 25 may 1982 : Author of original routine. JEC : 000330 modified array declarations. Jacob Williams, 2/24/2015 : extensive refactoring of CMLIB routine. Variables Type Visibility Attributes Name Initial real(kind=wp), public, dimension(nx*ny) :: temp real(kind=wp), public, dimension(max(2*kx*(nx+1),2*ky*(ny+1))) :: work logical, public :: status_ok © 2015 bspline-fortran was written by Jacob Williams. Documentation generated by FORD .","tags":"","title":"db2ink – bspline-fortran"},{"loc":"proc/db3ink.html","text":"db3ink Subroutine Source File bspline_module.f90 bspline_module db3ink Variables temp work status_ok All Procedures db2ink db2val db3ink db3val db4ink db4val db5ink db5val db6ink db6val public  subroutine db3ink(x, nx, y, ny, z, nz, fcn, kx, ky, kz, tx, ty, tz, bcoef, iflag) Arguments Type Intent Optional Attributes Name real(kind=wp), intent(in), dimension(nx) :: x array of x abcissae. must be strictly increasing. integer, intent(in) :: nx number of x abcissae (>= 3) real(kind=wp), intent(in), dimension(ny) :: y array of y abcissae. must be strictly increasing. integer, intent(in) :: ny number of y abcissae (>= 3) real(kind=wp), intent(in), dimension(nz) :: z array of z abcissae. must be strictly increasing. integer, intent(in) :: nz number of z abcissae (>= 3) real(kind=wp), intent(in), dimension(nx,ny,nz) :: fcn array of function values to interpolate. fcn(i,j,k) should\n   contain the function value at the point (x(i),y(j),z(k)) integer, intent(in) :: kx the order of spline pieces in x (>= 2, < nx). (order = polynomial degree + 1) integer, intent(in) :: ky the order of spline pieces in y (>= 2, < ny). (order = polynomial degree + 1) integer, intent(in) :: kz the order of spline pieces in z (>= 2, < nz). (order = polynomial degree + 1) real(kind=wp), intent(inout), dimension(nx+kx) :: tx The knots in the x direction for the spline interpolant.\n   If iflag=0 these are chosen by db3ink.\n   If iflag=1 these are specified by the user.\n    Must be non-decreasing. real(kind=wp), intent(inout), dimension(ny+ky) :: ty The knots in the y direction for the spline interpolant.\n    If iflag=0 these are chosen by db3ink.\n    If iflag=1 these are specified by the user.\n    Must be non-decreasing. real(kind=wp), intent(inout), dimension(nz+kz) :: tz The knots in the z direction for the spline interpolant.\n    If iflag=0 these are chosen by db3ink.\n    If iflag=1 these are specified by the user.\n    Must be non-decreasing. real(kind=wp), intent(out), dimension(nx,ny,nz) :: bcoef array of coefficients of the b-spline interpolant. integer, intent(inout) :: iflag on input 0 = knot sequence chosen by db3ink.\n                 1 = knot sequence chosen by user. on output 1 = successful execution.\n                 2 = iflag out of range.\n                 3 = nx out of range.\n                 4 = kx out of range.\n                 5 = x not strictly increasing.\n                 6 = tx not non-decreasing.\n                 7 = ny out of range.\n                 8 = ky out of range.\n                 9 = y not strictly increasing.\n                10 = ty not non-decreasing.\n                11 = nz out of range.\n                12 = kz out of range.\n                13 = z not strictly increasing.\n                14 = ty not non-decreasing. Description Determines the parameters of a function that interpolates\n the three-dimensional gridded data \n  [x(i),y(j),z(k),\\mathrm{fcn}(i,j,k)] ~\\mathrm{for}~ \n    i=1,..,n_x ~\\mathrm{and}~ j=1,..,n_y, ~\\mathrm{and}~ k=1,..,n_z \n The interpolating function and\n its derivatives may subsequently be evaluated by the function db3val . The interpolating function is a piecewise polynomial function\n represented as a tensor product of one-dimensional b-splines. the\n form of this function is\n  s(x,y,z) = \\sum_{i=1}&#94;{n_x} \\sum_{j=1}&#94;{n_y} \\sum_{k=1}&#94;{n_z} \n               a_{ijk} u_i(x) v_j(y) w_k(z)  where the functions u_i, v_j, and w_k are one-dimensional b-\n spline basis functions. the coefficients a_{ijk} are chosen so that:  s(x(i),y(j),z(k)) = \\mathrm{fcn}(i,j,k) \n    ~\\mathrm{for}~ i=1,..,n_x , j=1,..,n_y , k=1,..,n_z  Note that for fixed values of y and z s(x,y,z) is a piecewise\n polynomial function of x alone, for fixed values of x and z s(x,y,z) \n is a piecewise polynomial function of y alone, and for fixed\n values of x and y s(x,y,z) is a function of z alone. in one\n dimension a piecewise polynomial may be created by partitioning a\n given interval into subintervals and defining a distinct polynomial\n piece on each one. the points where adjacent subintervals meet are\n called knots. each of the functions u_i, v_j, and w_k above is a\n piecewise polynomial. Users of db3ink choose the order (degree+1) of the polynomial\n pieces used to define the piecewise polynomial in each of the x, y,\n and z directions (kx, ky, and kz). users also may define their own\n knot sequence in x, y, and z separately (tx, ty, and tz). if iflag=\n 0, however, db3ink will choose sequences of knots that result in a\n piecewise polynomial interpolant with kx-2 continuous partial\n derivatives in x, ky-2 continuous partial derivatives in y, and kz-\n 2 continuous partial derivatives in z. (kx knots are taken near\n each endpoint in x, not-a-knot end conditions are used, and the\n remaining knots are placed at data points if kx is even or at\n midpoints between data points if kx is odd. the y and z directions\n are treated similarly.) After a call to db3ink, all information necessary to define the\n interpolating function are contained in the parameters nx, ny, nz,\n kx, ky, kz, tx, ty, tz, and bcoef. these quantities should not be\n altered until after the last call of the evaluation routine db3val. History Boisvert, Ronald, NBS : 25 may 1982 : Author of original routine. JEC : 000330 modified array declarations. Jacob Williams, 2/24/2015 : extensive refactoring of CMLIB routine. Variables Type Visibility Attributes Name Initial real(kind=wp), public, dimension(nx*ny*nz) :: temp real(kind=wp), public, dimension(max(2*kx*(nx+1),2*ky*(ny+1),2*kz*(nz+1))) :: work logical, public :: status_ok © 2015 bspline-fortran was written by Jacob Williams. Documentation generated by FORD .","tags":"","title":"db3ink – bspline-fortran"},{"loc":"proc/db4ink.html","text":"db4ink Subroutine Source File bspline_module.f90 bspline_module db4ink Variables temp work status_ok All Procedures db2ink db2val db3ink db3val db4ink db4val db5ink db5val db6ink db6val public  subroutine db4ink(x, nx, y, ny, z, nz, q, nq, fcn, kx, ky, kz, kq, tx, ty, tz, tq, bcoef, iflag) Arguments Type Intent Optional Attributes Name real(kind=wp), intent(in), dimension(nx) :: x array of x abcissae. must be strictly increasing. integer, intent(in) :: nx number of x abcissae (>= 3) real(kind=wp), intent(in), dimension(ny) :: y array of y abcissae. must be strictly increasing. integer, intent(in) :: ny number of y abcissae (>= 3) real(kind=wp), intent(in), dimension(nz) :: z array of z abcissae. must be strictly increasing. integer, intent(in) :: nz number of z abcissae (>= 3) real(kind=wp), intent(in), dimension(nq) :: q array of q abcissae. must be strictly increasing. integer, intent(in) :: nq number of q abcissae (>= 3) real(kind=wp), intent(in), dimension(nx,ny,nz,nq) :: fcn array of function values to interpolate. fcn(i,j,k,q) should\n   contain the function value at the point (x(i),y(j),z(k),q(l)) integer, intent(in) :: kx the order of spline pieces in x (>= 2, < nx). (order = polynomial degree + 1) integer, intent(in) :: ky the order of spline pieces in y (>= 2, < ny). (order = polynomial degree + 1) integer, intent(in) :: kz the order of spline pieces in z (>= 2, < nz). (order = polynomial degree + 1) integer, intent(in) :: kq the order of spline pieces in q (>= 2, < nq). (order = polynomial degree + 1) real(kind=wp), intent(inout), dimension(nx+kx) :: tx The knots in the x direction for the spline interpolant.\n   If iflag=0 these are chosen by db4ink.\n   If iflag=1 these are specified by the user.\n    Must be non-decreasing. real(kind=wp), intent(inout), dimension(ny+ky) :: ty The knots in the y direction for the spline interpolant.\n    If iflag=0 these are chosen by db4ink.\n    If iflag=1 these are specified by the user.\n    Must be non-decreasing. real(kind=wp), intent(inout), dimension(nz+kz) :: tz The knots in the z direction for the spline interpolant.\n    If iflag=0 these are chosen by db4ink.\n    If iflag=1 these are specified by the user.\n    Must be non-decreasing. real(kind=wp), intent(inout), dimension(nq+kq) :: tq The knots in the q direction for the spline interpolant.\n    If iflag=0 these are chosen by db4ink.\n    If iflag=1 these are specified by the user.\n    Must be non-decreasing. real(kind=wp), intent(out), dimension(nx,ny,nz,nq) :: bcoef array of coefficients of the b-spline interpolant. integer, intent(inout) :: iflag on input 0 = knot sequence chosen by db4ink.\n                 1 = knot sequence chosen by user. on output 1 = successful execution.\n                 2 = iflag out of range.\n                 3 = nx out of range.\n                 4 = kx out of range.\n                 5 = x not strictly increasing.\n                 6 = tx not non-decreasing.\n                 7 = ny out of range.\n                 8 = ky out of range.\n                 9 = y not strictly increasing.\n                10 = ty not non-decreasing.\n                11 = nz out of range.\n                12 = kz out of range.\n                13 = z not strictly increasing.\n                14 = ty not non-decreasing. Description Determines the parameters of a function that interpolates\n the four-dimensional gridded data\n  [x(i),y(j),z(k),q(l),\\mathrm{fcn}(i,j,k,l)] ~\\mathrm{for}~ \n    i=1,..,n_x ~\\mathrm{and}~ j=1,..,n_y, ~\\mathrm{and}~ k=1,..,n_z, \n    ~\\mathrm{and}~ l=1,..,n_q \n The interpolating function and its derivatives may \n subsequently be evaluated by the function db4val . See db3ink header for more details. History Jacob Williams, 2/24/2015 : Created this routine. Variables Type Visibility Attributes Name Initial real(kind=wp), public, dimension(nx*ny*nz*nq) :: temp real(kind=wp), public, dimension(max(2*kx*(nx+1),2*ky*(ny+1),2*kz*(nz+1),2*kq*(nq+1))) :: work logical, public :: status_ok © 2015 bspline-fortran was written by Jacob Williams. Documentation generated by FORD .","tags":"","title":"db4ink – bspline-fortran"},{"loc":"proc/db5ink.html","text":"db5ink Subroutine Source File bspline_module.f90 bspline_module db5ink Variables temp work status_ok All Procedures db2ink db2val db3ink db3val db4ink db4val db5ink db5val db6ink db6val public  subroutine db5ink(x, nx, y, ny, z, nz, q, nq, r, nr, fcn, kx, ky, kz, kq, kr, tx, ty, tz, tq, tr, bcoef, iflag) Arguments Type Intent Optional Attributes Name real(kind=wp), intent(in), dimension(nx) :: x array of x abcissae. must be strictly increasing. integer, intent(in) :: nx number of x abcissae (>= 3) real(kind=wp), intent(in), dimension(ny) :: y array of y abcissae. must be strictly increasing. integer, intent(in) :: ny number of y abcissae (>= 3) real(kind=wp), intent(in), dimension(nz) :: z array of z abcissae. must be strictly increasing. integer, intent(in) :: nz number of z abcissae (>= 3) real(kind=wp), intent(in), dimension(nq) :: q array of q abcissae. must be strictly increasing. integer, intent(in) :: nq number of q abcissae (>= 3) real(kind=wp), intent(in), dimension(nr) :: r array of r abcissae. must be strictly increasing. integer, intent(in) :: nr number of r abcissae (>= 3) real(kind=wp), intent(in), dimension(nx,ny,nz,nq,nr) :: fcn array of function values to interpolate. fcn(i,j,k,q,r) should\n   contain the function value at the point (x(i),y(j),z(k),q(l),r(m)) integer, intent(in) :: kx the order of spline pieces in x (>= 2, < nx). (order = polynomial degree + 1) integer, intent(in) :: ky the order of spline pieces in y (>= 2, < ny). (order = polynomial degree + 1) integer, intent(in) :: kz the order of spline pieces in z (>= 2, < nz). (order = polynomial degree + 1) integer, intent(in) :: kq the order of spline pieces in q (>= 2, < nq). (order = polynomial degree + 1) integer, intent(in) :: kr the order of spline pieces in r (>= 2, < nr). (order = polynomial degree + 1) real(kind=wp), intent(inout), dimension(nx+kx) :: tx The knots in the x direction for the spline interpolant.\n   If iflag=0 these are chosen by db5ink.\n   If iflag=1 these are specified by the user.\n    Must be non-decreasing. real(kind=wp), intent(inout), dimension(ny+ky) :: ty The knots in the y direction for the spline interpolant.\n    If iflag=0 these are chosen by db5ink.\n    If iflag=1 these are specified by the user.\n    Must be non-decreasing. real(kind=wp), intent(inout), dimension(nz+kz) :: tz The knots in the z direction for the spline interpolant.\n    If iflag=0 these are chosen by db5ink.\n    If iflag=1 these are specified by the user.\n    Must be non-decreasing. real(kind=wp), intent(inout), dimension(nq+kq) :: tq The knots in the q direction for the spline interpolant.\n    If iflag=0 these are chosen by db5ink.\n    If iflag=1 these are specified by the user.\n    Must be non-decreasing. real(kind=wp), intent(inout), dimension(nr+kr) :: tr The knots in the r direction for the spline interpolant.\n    If iflag=0 these are chosen by db5ink.\n    If iflag=1 these are specified by the user.\n    Must be non-decreasing. real(kind=wp), intent(out), dimension(nx,ny,nz,nq,nr) :: bcoef array of coefficients of the b-spline interpolant. integer, intent(inout) :: iflag on input 0 = knot sequence chosen by db5ink.\n                 1 = knot sequence chosen by user. on output 1 = successful execution.\n                 2 = iflag out of range.\n                 3 = nx out of range.\n                 4 = kx out of range.\n                 5 = x not strictly increasing.\n                 6 = tx not non-decreasing.\n                 7 = ny out of range.\n                 8 = ky out of range.\n                 9 = y not strictly increasing.\n                10 = ty not non-decreasing.\n                11 = nz out of range.\n                12 = kz out of range.\n                13 = z not strictly increasing.\n                14 = ty not non-decreasing. Description Determines the parameters of a function that interpolates\n the five-dimensional gridded data (x(i),y(j),z(k),q(l),r(m),fcn(i,j,k,l,m)) for\n i=1,..,nx, j=1,..,ny, k=1,..,nz, l=1,..,nq, and m=1,..,nr. \n The interpolating function and its derivatives may subsequently be evaluated \n by the function db5val . See db3ink header for more details. History Jacob Williams, 2/24/2015 : Created this routine. Variables Type Visibility Attributes Name Initial real(kind=wp), public, dimension(nx*ny*nz*nq*nr) :: temp real(kind=wp), public, dimension(max( 2*kx*(nx+1),2*ky*(ny+1),2*kz*(nz+1),2*kq*(nq+1),2*kr*(nr+1) )) :: work logical, public :: status_ok © 2015 bspline-fortran was written by Jacob Williams. Documentation generated by FORD .","tags":"","title":"db5ink – bspline-fortran"},{"loc":"proc/db6ink.html","text":"db6ink Subroutine Source File bspline_module.f90 bspline_module db6ink Variables temp work status_ok All Procedures db2ink db2val db3ink db3val db4ink db4val db5ink db5val db6ink db6val public  subroutine db6ink(x, nx, y, ny, z, nz, q, nq, r, nr, s, ns, fcn, kx, ky, kz, kq, kr, ks, tx, ty, tz, tq, tr, ts, bcoef, iflag) Arguments Type Intent Optional Attributes Name real(kind=wp), intent(in), dimension(nx) :: x array of x abcissae. must be strictly increasing. integer, intent(in) :: nx number of x abcissae (>= 3) real(kind=wp), intent(in), dimension(ny) :: y array of y abcissae. must be strictly increasing. integer, intent(in) :: ny number of y abcissae (>= 3) real(kind=wp), intent(in), dimension(nz) :: z array of z abcissae. must be strictly increasing. integer, intent(in) :: nz number of z abcissae (>= 3) real(kind=wp), intent(in), dimension(nq) :: q array of q abcissae. must be strictly increasing. integer, intent(in) :: nq number of q abcissae (>= 3) real(kind=wp), intent(in), dimension(nr) :: r array of r abcissae. must be strictly increasing. integer, intent(in) :: nr number of r abcissae (>= 3) real(kind=wp), intent(in), dimension(ns) :: s array of s abcissae. must be strictly increasing. integer, intent(in) :: ns number of s abcissae (>= 3) real(kind=wp), intent(in), dimension(nx,ny,nz,nq,nr,ns) :: fcn array of function values to interpolate. fcn(i,j,k,q,r,s) should\n   contain the function value at the point (x(i),y(j),z(k),q(l),r(m),s(n)) integer, intent(in) :: kx the order of spline pieces in x (>= 2, < nx). (order = polynomial degree + 1) integer, intent(in) :: ky the order of spline pieces in y (>= 2, < ny). (order = polynomial degree + 1) integer, intent(in) :: kz the order of spline pieces in z (>= 2, < nz). (order = polynomial degree + 1) integer, intent(in) :: kq the order of spline pieces in q (>= 2, < nq). (order = polynomial degree + 1) integer, intent(in) :: kr the order of spline pieces in r (>= 2, < nr). (order = polynomial degree + 1) integer, intent(in) :: ks the order of spline pieces in s (>= 2, < ns). (order = polynomial degree + 1) real(kind=wp), intent(inout), dimension(nx+kx) :: tx The knots in the x direction for the spline interpolant.\n   If iflag=0 these are chosen by db6ink.\n   If iflag=1 these are specified by the user.\n    Must be non-decreasing. real(kind=wp), intent(inout), dimension(ny+ky) :: ty The knots in the y direction for the spline interpolant.\n    If iflag=0 these are chosen by db6ink.\n    If iflag=1 these are specified by the user.\n    Must be non-decreasing. real(kind=wp), intent(inout), dimension(nz+kz) :: tz The knots in the z direction for the spline interpolant.\n    If iflag=0 these are chosen by db6ink.\n    If iflag=1 these are specified by the user.\n    Must be non-decreasing. real(kind=wp), intent(inout), dimension(nq+kq) :: tq The knots in the q direction for the spline interpolant.\n    If iflag=0 these are chosen by db6ink.\n    If iflag=1 these are specified by the user.\n    Must be non-decreasing. real(kind=wp), intent(inout), dimension(nr+kr) :: tr The knots in the r direction for the spline interpolant.\n    If iflag=0 these are chosen by db6ink.\n    If iflag=1 these are specified by the user.\n    Must be non-decreasing. real(kind=wp), intent(inout), dimension(ns+ks) :: ts The knots in the s direction for the spline interpolant.\n    If iflag=0 these are chosen by db6ink.\n    If iflag=1 these are specified by the user.\n    Must be non-decreasing. real(kind=wp), intent(out), dimension(nx,ny,nz,nq,nr,ns) :: bcoef array of coefficients of the b-spline interpolant. integer, intent(inout) :: iflag on input 0 = knot sequence chosen by db6ink.\n                 1 = knot sequence chosen by user. on output 1 = successful execution.\n                 2 = iflag out of range.\n                 3 = nx out of range.\n                 4 = kx out of range.\n                 5 = x not strictly increasing.\n                 6 = tx not non-decreasing.\n                 7 = ny out of range.\n                 8 = ky out of range.\n                 9 = y not strictly increasing.\n                10 = ty not non-decreasing.\n                11 = nz out of range.\n                12 = kz out of range.\n                13 = z not strictly increasing.\n                14 = ty not non-decreasing. Description Determines the parameters of a function that interpolates\n the six-dimensional gridded data (x(i),y(j),z(k),q(l),r(m),s(n),fcn(i,j,k,l,m,n)) for\n i=1,..,nx, j=1,..,ny, k=1,..,nz, l=1,..,nq, m=1,..,nr, n=1,..,ns. \n the interpolating function and its derivatives may subsequently be evaluated \n by the function db6val . See db3ink header for more details. History Jacob Williams, 2/24/2015 : Created this routine. Variables Type Visibility Attributes Name Initial real(kind=wp), public, dimension(nx*ny*nz*nq*nr*ns) :: temp real(kind=wp), public, dimension(max( 2*kx*(nx+1),2*ky*(ny+1),2*kz*(nz+1),2*kq*(nq+1),2*kr*(nr+1),2*ks*(ns+1))) :: work logical, public :: status_ok © 2015 bspline-fortran was written by Jacob Williams. Documentation generated by FORD .","tags":"","title":"db6ink – bspline-fortran"},{"loc":"module/bspline_module.html","text":"bspline_module Module Jacob Williams BSD Source File bspline_module.f90 bspline_module Functions db2val db3val db4val db5val db6val Subroutines db2ink db3ink db4ink db5ink db6ink All Modules bspline_module Description Multidimensional (2D-6D) B-Spline interpolation of data on a regular grid. Notes This module is based on the bspline and spline routines from [1].\n The original Fortran 77 routines were converted to free-form source.\n Some of them are relatively unchanged from the originals, but some have\n been extensively refactored.  In addition, new routines for \n 4d, 5d, and 6d interpolation were also created. References DBSPLIN and DTENSBS from the NIST Core Math Library .\n    Original code is public domain. Carl de Boor, \"A Practical Guide to Splines\",\n        Springer-Verlag, New York, 1978. Carl de Boor, \"Efficient Computer Manipulation of Tensor\n        Products\", ACM Transactions on Mathematical Software,\n        Vol. 5 (1979), p. 173-182. D.E. Amos, \"Computation with Splines and B-Splines\",\n        SAND78-1968, Sandia Laboratories, March, 1979. Functions public  function db2val (xval, yval, idx, idy, tx, ty, nx, ny, kx, ky, bcoef) Arguments Type Intent Optional Attributes Name real(kind=wp), intent(in) :: xval x coordinate of evaluation point. real(kind=wp), intent(in) :: yval y coordinate of evaluation point. integer, intent(in) :: idx x derivative of piecewise polynomial to evaluate. integer, intent(in) :: idy y derivative of piecewise polynomial to evaluate. real(kind=wp), intent(in), dimension(nx+kx) :: tx sequence of knots defining the piecewise polynomial in the x direction. (same as in last call to db2ink) real(kind=wp), intent(in), dimension(ny+ky) :: ty sequence of knots defining the piecewise polynomial in the y direction. (same as in last call to db2ink) integer, intent(in) :: nx the number of interpolation points in x. (same as in last call to db2ink) integer, intent(in) :: ny the number of interpolation points in y. (same as in last call to db2ink) integer, intent(in) :: kx order of polynomial pieces in x. (same as in last call to db2ink) integer, intent(in) :: ky order of polynomial pieces in y. (same as in last call to db2ink) real(kind=wp), intent(in), dimension(nx,ny) :: bcoef the b-spline coefficients computed by db2ink. Return Value real(kind=wp) Description Evaluates the tensor product piecewise polynomial\n interpolant constructed by the routine db2ink or one of its\n derivatives at the point (xval,yval). public  function db3val (xval, yval, zval, idx, idy, idz, tx, ty, tz, nx, ny, nz, kx, ky, kz, bcoef) Arguments Type Intent Optional Attributes Name real(kind=wp), intent(in) :: xval x coordinate of evaluation point. real(kind=wp), intent(in) :: yval y coordinate of evaluation point. real(kind=wp), intent(in) :: zval z coordinate of evaluation point. integer, intent(in) :: idx x derivative of piecewise polynomial to evaluate. integer, intent(in) :: idy y derivative of piecewise polynomial to evaluate. integer, intent(in) :: idz z derivative of piecewise polynomial to evaluate. real(kind=wp), intent(in), dimension(nx+kx) :: tx sequence of knots defining the piecewise polynomial in the x direction. (same as in last call to db3ink) real(kind=wp), intent(in), dimension(ny+ky) :: ty sequence of knots defining the piecewise polynomial in the y direction. (same as in last call to db3ink) real(kind=wp), intent(in), dimension(nz+kz) :: tz sequence of knots defining the piecewise polynomial in the z direction. (same as in last call to db3ink) integer, intent(in) :: nx the number of interpolation points in x. (same as in last call to db3ink) integer, intent(in) :: ny the number of interpolation points in y. (same as in last call to db3ink) integer, intent(in) :: nz the number of interpolation points in z. (same as in last call to db3ink) integer, intent(in) :: kx order of polynomial pieces in x. (same as in last call to db3ink) integer, intent(in) :: ky order of polynomial pieces in y. (same as in last call to db3ink) integer, intent(in) :: kz order of polynomial pieces in z. (same as in last call to db3ink) real(kind=wp), intent(in), dimension(nx,ny,nz) :: bcoef the b-spline coefficients computed by db3ink. Return Value real(kind=wp) Description Evaluates the tensor product piecewise polynomial\n interpolant constructed by the routine db3ink or one of its\n derivatives at the point (xval,yval,zval). public  function db4val (xval, yval, zval, qval, idx, idy, idz, idq, tx, ty, tz, tq, nx, ny, nz, nq, kx, ky, kz, kq, bcoef) Arguments Type Intent Optional Attributes Name real(kind=wp), intent(in) :: xval x coordinate of evaluation point. real(kind=wp), intent(in) :: yval y coordinate of evaluation point. real(kind=wp), intent(in) :: zval z coordinate of evaluation point. real(kind=wp), intent(in) :: qval q coordinate of evaluation point. integer, intent(in) :: idx x derivative of piecewise polynomial to evaluate. integer, intent(in) :: idy y derivative of piecewise polynomial to evaluate. integer, intent(in) :: idz z derivative of piecewise polynomial to evaluate. integer, intent(in) :: idq q derivative of piecewise polynomial to evaluate. real(kind=wp), intent(in), dimension(nx+kx) :: tx sequence of knots defining the piecewise polynomial in the x direction. (same as in last call to db4ink) real(kind=wp), intent(in), dimension(ny+ky) :: ty sequence of knots defining the piecewise polynomial in the y direction. (same as in last call to db4ink) real(kind=wp), intent(in), dimension(nz+kz) :: tz sequence of knots defining the piecewise polynomial in the z direction. (same as in last call to db4ink) real(kind=wp), intent(in), dimension(nq+kq) :: tq sequence of knots defining the piecewise polynomial in the q direction. (same as in last call to db4ink) integer, intent(in) :: nx the number of interpolation points in x. (same as in last call to db4ink) integer, intent(in) :: ny the number of interpolation points in y. (same as in last call to db4ink) integer, intent(in) :: nz the number of interpolation points in z. (same as in last call to db4ink) integer, intent(in) :: nq the number of interpolation points in q. (same as in last call to db4ink) integer, intent(in) :: kx order of polynomial pieces in x. (same as in last call to db4ink) integer, intent(in) :: ky order of polynomial pieces in y. (same as in last call to db4ink) integer, intent(in) :: kz order of polynomial pieces in z. (same as in last call to db4ink) integer, intent(in) :: kq order of polynomial pieces in q. (same as in last call to db4ink) real(kind=wp), intent(in), dimension(nx,ny,nz,nq) :: bcoef the b-spline coefficients computed by db4ink. Return Value real(kind=wp) Description Evaluates the tensor product piecewise polynomial\n interpolant constructed by the routine db4ink or one of its\n derivatives at the point (xval,yval,zval,qval). public  function db5val (xval, yval, zval, qval, rval, idx, idy, idz, idq, idr, tx, ty, tz, tq, tr, nx, ny, nz, nq, nr, kx, ky, kz, kq, kr, bcoef) Arguments Type Intent Optional Attributes Name real(kind=wp), intent(in) :: xval x coordinate of evaluation point. real(kind=wp), intent(in) :: yval y coordinate of evaluation point. real(kind=wp), intent(in) :: zval z coordinate of evaluation point. real(kind=wp), intent(in) :: qval q coordinate of evaluation point. real(kind=wp), intent(in) :: rval r coordinate of evaluation point. integer, intent(in) :: idx x derivative of piecewise polynomial to evaluate. integer, intent(in) :: idy y derivative of piecewise polynomial to evaluate. integer, intent(in) :: idz z derivative of piecewise polynomial to evaluate. integer, intent(in) :: idq q derivative of piecewise polynomial to evaluate. integer, intent(in) :: idr r derivative of piecewise polynomial to evaluate. real(kind=wp), intent(in), dimension(nx+kx) :: tx sequence of knots defining the piecewise polynomial in the x direction. (same as in last call to db5ink) real(kind=wp), intent(in), dimension(ny+ky) :: ty sequence of knots defining the piecewise polynomial in the y direction. (same as in last call to db5ink) real(kind=wp), intent(in), dimension(nz+kz) :: tz sequence of knots defining the piecewise polynomial in the z direction. (same as in last call to db5ink) real(kind=wp), intent(in), dimension(nq+kq) :: tq sequence of knots defining the piecewise polynomial in the q direction. (same as in last call to db5ink) real(kind=wp), intent(in), dimension(nr+kr) :: tr sequence of knots defining the piecewise polynomial in the r direction. (same as in last call to db5ink) integer, intent(in) :: nx the number of interpolation points in x. (same as in last call to db5ink) integer, intent(in) :: ny the number of interpolation points in y. (same as in last call to db5ink) integer, intent(in) :: nz the number of interpolation points in z. (same as in last call to db5ink) integer, intent(in) :: nq the number of interpolation points in q. (same as in last call to db5ink) integer, intent(in) :: nr the number of interpolation points in r. (same as in last call to db5ink) integer, intent(in) :: kx order of polynomial pieces in x. (same as in last call to db5ink) integer, intent(in) :: ky order of polynomial pieces in y. (same as in last call to db5ink) integer, intent(in) :: kz order of polynomial pieces in z. (same as in last call to db5ink) integer, intent(in) :: kq order of polynomial pieces in q. (same as in last call to db5ink) integer, intent(in) :: kr order of polynomial pieces in r. (same as in last call to db5ink) real(kind=wp), intent(in), dimension(nx,ny,nz,nq,nr) :: bcoef the b-spline coefficients computed by db5ink. Return Value real(kind=wp) Description Evaluates the tensor product piecewise polynomial\n interpolant constructed by the routine db5ink or one of its\n derivatives at the point (xval,yval,zval,qval,rval). public  function db6val (xval, yval, zval, qval, rval, sval, idx, idy, idz, idq, idr, ids, tx, ty, tz, tq, tr, ts, nx, ny, nz, nq, nr, ns, kx, ky, kz, kq, kr, ks, bcoef) Arguments Type Intent Optional Attributes Name real(kind=wp), intent(in) :: xval x coordinate of evaluation point. real(kind=wp), intent(in) :: yval y coordinate of evaluation point. real(kind=wp), intent(in) :: zval z coordinate of evaluation point. real(kind=wp), intent(in) :: qval q coordinate of evaluation point. real(kind=wp), intent(in) :: rval r coordinate of evaluation point. real(kind=wp), intent(in) :: sval s coordinate of evaluation point. integer, intent(in) :: idx x derivative of piecewise polynomial to evaluate. integer, intent(in) :: idy y derivative of piecewise polynomial to evaluate. integer, intent(in) :: idz z derivative of piecewise polynomial to evaluate. integer, intent(in) :: idq q derivative of piecewise polynomial to evaluate. integer, intent(in) :: idr r derivative of piecewise polynomial to evaluate. integer, intent(in) :: ids s derivative of piecewise polynomial to evaluate. real(kind=wp), intent(in), dimension(nx+kx) :: tx sequence of knots defining the piecewise polynomial in the x direction. (same as in last call to db6ink) real(kind=wp), intent(in), dimension(ny+ky) :: ty sequence of knots defining the piecewise polynomial in the y direction. (same as in last call to db6ink) real(kind=wp), intent(in), dimension(nz+kz) :: tz sequence of knots defining the piecewise polynomial in the z direction. (same as in last call to db6ink) real(kind=wp), intent(in), dimension(nq+kq) :: tq sequence of knots defining the piecewise polynomial in the q direction. (same as in last call to db6ink) real(kind=wp), intent(in), dimension(nr+kr) :: tr sequence of knots defining the piecewise polynomial in the r direction. (same as in last call to db6ink) real(kind=wp), intent(in), dimension(ns+ks) :: ts sequence of knots defining the piecewise polynomial in the s direction. (same as in last call to db6ink) integer, intent(in) :: nx the number of interpolation points in x. (same as in last call to db6ink) integer, intent(in) :: ny the number of interpolation points in y. (same as in last call to db6ink) integer, intent(in) :: nz the number of interpolation points in z. (same as in last call to db6ink) integer, intent(in) :: nq the number of interpolation points in q. (same as in last call to db6ink) integer, intent(in) :: nr the number of interpolation points in r. (same as in last call to db6ink) integer, intent(in) :: ns the number of interpolation points in s. (same as in last call to db6ink) integer, intent(in) :: kx order of polynomial pieces in x. (same as in last call to db6ink) integer, intent(in) :: ky order of polynomial pieces in y. (same as in last call to db6ink) integer, intent(in) :: kz order of polynomial pieces in z. (same as in last call to db6ink) integer, intent(in) :: kq order of polynomial pieces in q. (same as in last call to db6ink) integer, intent(in) :: kr order of polynomial pieces in r. (same as in last call to db6ink) integer, intent(in) :: ks order of polynomial pieces in s. (same as in last call to db6ink) real(kind=wp), intent(in), dimension(nx,ny,nz,nq,nr,ns) :: bcoef the b-spline coefficients computed by db6ink. Return Value real(kind=wp) Description Evaluates the tensor product piecewise polynomial\n interpolant constructed by the routine db6ink or one of its\n derivatives at the point (xval,yval,zval,qval,rval,sval). Subroutines public  subroutine db2ink (x, nx, y, ny, fcn, kx, ky, tx, ty, bcoef, iflag) Arguments Type Intent Optional Attributes Name real(kind=wp), intent(in), dimension(nx) :: x Array of x abcissae. Must be strictly increasing. integer, intent(in) :: nx Number of x abcissae real(kind=wp), intent(in), dimension(ny) :: y Array of y abcissae. Must be strictly increasing. integer, intent(in) :: ny Number of y abcissae real(kind=wp), intent(in), dimension(nx,ny) :: fcn Array of function values to interpolate. fcn(i,j) should\n    contain the function value at the point (x(i),y(j)) integer, intent(in) :: kx The order of spline pieces in x (>= 2, < nx). (order = polynomial degree + 1) integer, intent(in) :: ky The order of spline pieces in y (>= 2, < ny). (order = polynomial degree + 1) real(kind=wp), intent(inout), dimension(nx+kx) :: tx The knots in the x direction for the spline interpolant.\n    If iflag=0 these are chosen by db2ink.\n    If iflag=1 these are specified by the user.\n    Must be non-decreasing. real(kind=wp), intent(inout), dimension(ny+ky) :: ty The knots in the y direction for the spline interpolant.\n    If iflag=0 these are chosen by db2ink.\n    If iflag=1 these are specified by the user.\n    Must be non-decreasing. real(kind=wp), intent(out), dimension(nx,ny) :: bcoef Array of coefficients of the b-spline interpolant. integer, intent(inout) :: iflag on input: 0 = knot sequence chosen by db2ink.\n                1 = knot sequence chosen by user. on output: 1 = successful execution.\n                2 = iflag out of range.\n                3 = nx out of range.\n                4 = kx out of range.\n                5 = x not strictly increasing.\n                6 = tx not non-decreasing.\n                7 = ny out of range.\n                8 = ky out of range.\n                9 = y not strictly increasing.\n               10 = ty not non-decreasing. Description Determines the parameters of a function that interpolates\n the two-dimensional gridded data\n  [x(i),y(j),\\mathrm{fcn}(i,j)] ~\\mathrm{for}~ i=1,..,n_x ~\\mathrm{and}~ j=1,..,n_y \n The interpolating function and its derivatives may\n subsequently be evaluated by the function db2val . public  subroutine db3ink (x, nx, y, ny, z, nz, fcn, kx, ky, kz, tx, ty, tz, bcoef, iflag) Arguments Type Intent Optional Attributes Name real(kind=wp), intent(in), dimension(nx) :: x array of x abcissae. must be strictly increasing. integer, intent(in) :: nx number of x abcissae (>= 3) real(kind=wp), intent(in), dimension(ny) :: y array of y abcissae. must be strictly increasing. integer, intent(in) :: ny number of y abcissae (>= 3) real(kind=wp), intent(in), dimension(nz) :: z array of z abcissae. must be strictly increasing. integer, intent(in) :: nz number of z abcissae (>= 3) real(kind=wp), intent(in), dimension(nx,ny,nz) :: fcn array of function values to interpolate. fcn(i,j,k) should\n   contain the function value at the point (x(i),y(j),z(k)) integer, intent(in) :: kx the order of spline pieces in x (>= 2, < nx). (order = polynomial degree + 1) integer, intent(in) :: ky the order of spline pieces in y (>= 2, < ny). (order = polynomial degree + 1) integer, intent(in) :: kz the order of spline pieces in z (>= 2, < nz). (order = polynomial degree + 1) real(kind=wp), intent(inout), dimension(nx+kx) :: tx The knots in the x direction for the spline interpolant.\n   If iflag=0 these are chosen by db3ink.\n   If iflag=1 these are specified by the user.\n    Must be non-decreasing. real(kind=wp), intent(inout), dimension(ny+ky) :: ty The knots in the y direction for the spline interpolant.\n    If iflag=0 these are chosen by db3ink.\n    If iflag=1 these are specified by the user.\n    Must be non-decreasing. real(kind=wp), intent(inout), dimension(nz+kz) :: tz The knots in the z direction for the spline interpolant.\n    If iflag=0 these are chosen by db3ink.\n    If iflag=1 these are specified by the user.\n    Must be non-decreasing. real(kind=wp), intent(out), dimension(nx,ny,nz) :: bcoef array of coefficients of the b-spline interpolant. integer, intent(inout) :: iflag on input 0 = knot sequence chosen by db3ink.\n                 1 = knot sequence chosen by user. on output 1 = successful execution.\n                 2 = iflag out of range.\n                 3 = nx out of range.\n                 4 = kx out of range.\n                 5 = x not strictly increasing.\n                 6 = tx not non-decreasing.\n                 7 = ny out of range.\n                 8 = ky out of range.\n                 9 = y not strictly increasing.\n                10 = ty not non-decreasing.\n                11 = nz o","tags":"","title":"bspline_module – bspline-fortran"}]}